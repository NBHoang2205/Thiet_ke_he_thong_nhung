
TKHTN_da_nhiem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d90  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08009ea0  08009ea0  00019ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a374  0800a374  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a374  0800a374  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a374  0800a374  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a37c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae4  200001e0  0800a55c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cc4  0800a55c  00021cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac80  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a68  00000000  00000000  0003ae89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003fe28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a240  00000000  00000000  00041200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161d5  00000000  00000000  0005b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095d45  00000000  00000000  00071615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010735a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006970  00000000  00000000  001073b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e88 	.word	0x08009e88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009e88 	.word	0x08009e88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <DS18B20_DelayInit>:
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name* DS18B20)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fa95 	bl	8001480 <DELAY_TIM_Init>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fa8f 	bl	8001496 <DELAY_TIM_Us>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name* DS18B20, uint16_t Time)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	887a      	ldrh	r2, [r7, #2]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fa95 	bl	80014c4 <DELAY_TIM_Ms>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name* DS18B20)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	889b      	ldrh	r3, [r3, #4]
 8000fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f107 0208 	add.w	r2, r7, #8
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fa01 	bl	80023d8 <HAL_GPIO_Init>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name* DS18B20)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	889b      	ldrh	r3, [r3, #4]
 8000ff8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f107 0208 	add.w	r2, r7, #8
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f001 f9e3 	bl	80023d8 <HAL_GPIO_Init>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name* DS18B20, uint8_t Value)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6898      	ldr	r0, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	889b      	ldrh	r3, [r3, #4]
 800102e:	78fa      	ldrb	r2, [r7, #3]
 8001030:	4619      	mov	r1, r3
 8001032:	f001 fb6c 	bl	800270e <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name* DS18B20)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	return  HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	889b      	ldrh	r3, [r3, #4]
 800104e:	4619      	mov	r1, r3
 8001050:	4610      	mov	r0, r2
 8001052:	f001 fb45 	bl	80026e0 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name* DS18B20)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff98 	bl	8000fa2 <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 8001072:	2100      	movs	r1, #0
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffd0 	bl	800101a <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);
 800107a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff6d 	bl	8000f5e <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ffaa 	bl	8000fde <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80);
 800108a:	2150      	movs	r1, #80	; 0x50
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff66 	bl	8000f5e <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20))) Response = 1;
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffd3 	bl	800103e <DS18B20_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <DS18B20_Start+0x44>
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e001      	b.n	80010a8 <DS18B20_Start+0x48>
	else Response = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 80010a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff56 	bl	8000f5e <DS18B20_DelayUs>

	return Response;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name* DS18B20, uint8_t Data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff6a 	bl	8000fa2 <DS18B20_SetPinOut>
	for(int i = 0; i<8; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e02b      	b.n	800112c <DS18B20_Write+0x70>
	{
		if((Data&(1<<i))!=0)
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	fa42 f303 	asr.w	r3, r2, r3
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d012      	beq.n	800110a <DS18B20_Write+0x4e>
		{
			DS18B20_SetPinOut(DS18B20);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff5c 	bl	8000fa2 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 80010ea:	2100      	movs	r1, #0
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff94 	bl	800101a <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 80010f2:	2101      	movs	r1, #1
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff32 	bl	8000f5e <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff6f 	bl	8000fde <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 8001100:	2132      	movs	r1, #50	; 0x32
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff2b 	bl	8000f5e <DS18B20_DelayUs>
 8001108:	e00d      	b.n	8001126 <DS18B20_Write+0x6a>
		}
		else
		{
			DS18B20_SetPinOut(DS18B20);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff49 	bl	8000fa2 <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8001110:	2100      	movs	r1, #0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff81 	bl	800101a <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8001118:	2132      	movs	r1, #50	; 0x32
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff1f 	bl	8000f5e <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff5c 	bl	8000fde <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	ddd0      	ble.n	80010d4 <DS18B20_Write+0x18>
		}
	}
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name* DS18B20)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff48 	bl	8000fde <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	e024      	b.n	800119e <DS18B20_Read+0x62>
	{
		DS18B20_SetPinOut(DS18B20);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff24 	bl	8000fa2 <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 800115a:	2100      	movs	r1, #0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff5c 	bl	800101a <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 8001162:	2101      	movs	r1, #1
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fefa 	bl	8000f5e <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff37 	bl	8000fde <DS18B20_SetPinIn>
		if(DS18B20_ReadPin(DS18B20))
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff64 	bl	800103e <DS18B20_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d009      	beq.n	8001190 <DS18B20_Read+0x54>
		{
			Value |= 1<<i;
 800117c:	2201      	movs	r2, #1
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	b25a      	sxtb	r2, r3
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4313      	orrs	r3, r2
 800118c:	b25b      	sxtb	r3, r3
 800118e:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 8001190:	2132      	movs	r1, #50	; 0x32
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fee3 	bl	8000f5e <DS18B20_DelayUs>
	for(int i = 0; i<8; i++)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3301      	adds	r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	ddd7      	ble.n	8001154 <DS18B20_Read+0x18>
	}
	return Value;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name* DS18B20, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DS_PORT, uint16_t DS_Pin)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	887a      	ldrh	r2, [r7, #2]
 80011c6:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f7ff feb8 	bl	8000f44 <DS18B20_DelayInit>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name* DS18B20)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	float Temp;
	DS18B20_Start(DS18B20);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff3b 	bl	8001060 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 80011ea:	2101      	movs	r1, #1
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fec7 	bl	8000f80 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 80011f2:	21cc      	movs	r1, #204	; 0xcc
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff61 	bl	80010bc <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 80011fa:	2144      	movs	r1, #68	; 0x44
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff5d 	bl	80010bc <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 8001202:	21c8      	movs	r1, #200	; 0xc8
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff febb 	bl	8000f80 <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff28 	bl	8001060 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8001210:	2101      	movs	r1, #1
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff feb4 	bl	8000f80 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8001218:	21cc      	movs	r1, #204	; 0xcc
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff4e 	bl	80010bc <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 8001220:	21be      	movs	r1, #190	; 0xbe
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff4a 	bl	80010bc <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff87 	bl	800113c <DS18B20_Read>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff82 	bl	800113c <DS18B20_Read>
 8001238:	4603      	mov	r3, r0
 800123a:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2<<8)|Temp1;
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	021a      	lsls	r2, r3, #8
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	4313      	orrs	r3, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fcd9 	bl	8000bfc <__aeabi_i2f>
 800124a:	4603      	mov	r3, r0
 800124c:	60bb      	str	r3, [r7, #8]
	DS18B20->Temp = (float)(Temp/16);
 800124e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001252:	68b8      	ldr	r0, [r7, #8]
 8001254:	f7ff fdda 	bl	8000e0c <__aeabi_fdiv>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <Motor_Init_PWM>:
  * 		frequency: frequency of PWM
  * @retval None
  */

void Motor_Init_PWM(Motor_Name* Motor, TIM_HandleTypeDef* Timer, uint32_t Channel, 	uint32_t frequency, uint8_t duty)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
	Motor->Timer_PWM = Timer;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	601a      	str	r2, [r3, #0]
	Motor->Channel_PWM = Channel;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	605a      	str	r2, [r3, #4]
	//Start Timer
	HAL_TIM_PWM_Start(Timer, Channel);
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	68b8      	ldr	r0, [r7, #8]
 800128a:	f001 ff75 	bl	8003178 <HAL_TIM_PWM_Start>
	Motor_Set_Duty(Motor, duty);
 800128e:	7e3b      	ldrb	r3, [r7, #24]
 8001290:	4619      	mov	r1, r3
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f000 f81c 	bl	80012d0 <Motor_Set_Duty>
	Motor_Set_Frequency(Motor, frequency);
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f862 	bl	8001364 <Motor_Set_Frequency>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <Motor_Init_Encoder>:
  * @param	Timer,channel for Encoder
  *
  * @retval None
  */
void Motor_Init_Encoder(Motor_Name* Motor, TIM_HandleTypeDef* Timer, uint32_t Channel)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	Motor->Timer_Encoder = Timer;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	609a      	str	r2, [r3, #8]
	Motor->Channel_Encoder = Channel;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(Timer, Channel);
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	68b8      	ldr	r0, [r7, #8]
 80012c4:	f002 f89c 	bl	8003400 <HAL_TIM_Encoder_Start>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <Motor_Set_Duty>:
  * @brief Set duty cycle for PWM
  * @param Duty(%) 0 -> 100. % High voltage
  * @retval None
  */
void Motor_Set_Duty(Motor_Name* Motor,uint8_t duty)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	if(duty > DUTY_MAX)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <Motor_Set_Duty+0x16>
		duty = DUTY_MAX;
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	70fb      	strb	r3, [r7, #3]
	if(duty <= DUTY_MIN)
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2b0a      	cmp	r3, #10
 80012ea:	d801      	bhi.n	80012f0 <Motor_Set_Duty+0x20>
		duty = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	70fb      	strb	r3, [r7, #3]

	Motor->duty = duty;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	751a      	strb	r2, [r3, #20]
	uint16_t compare = (Motor->Timer_PWM->Init.Period + 1) * duty / 100;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	78fa      	ldrb	r2, [r7, #3]
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	4a16      	ldr	r2, [pc, #88]	; (8001360 <Motor_Set_Duty+0x90>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <Motor_Set_Duty+0x52>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	89fa      	ldrh	r2, [r7, #14]
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001320:	e018      	b.n	8001354 <Motor_Set_Duty+0x84>
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d105      	bne.n	8001336 <Motor_Set_Duty+0x66>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001334:	e00e      	b.n	8001354 <Motor_Set_Duty+0x84>
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b08      	cmp	r3, #8
 800133c:	d105      	bne.n	800134a <Motor_Set_Duty+0x7a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001348:	e004      	b.n	8001354 <Motor_Set_Duty+0x84>
	__HAL_TIM_SET_COMPARE(Motor->Timer_PWM, Motor->Channel_PWM, compare);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	89fb      	ldrh	r3, [r7, #14]
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	51eb851f 	.word	0x51eb851f

08001364 <Motor_Set_Frequency>:
  * @brief Set frequency for PWM
  * @param frequency(Hz); should  2 < f < 10000
  * @retval None
  */
void Motor_Set_Frequency(Motor_Name* Motor, uint32_t frequency)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	// frequency = f_timer / [(Period + 1) * (Psc + 1)]
	// -> Psc = f_timer / ((period + 1)*frequency) - 1;
	Motor->frequency = frequency;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	611a      	str	r2, [r3, #16]
	uint32_t period = Motor->Timer_PWM->Init.Period;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	60fb      	str	r3, [r7, #12]
	uint32_t f_timer = HAL_RCC_GetHCLKFreq();
 800137c:	f001 fdc2 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8001380:	60b8      	str	r0, [r7, #8]
	TIM2->PSC = f_timer / ((period + 1) * frequency) - 1;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3301      	adds	r3, #1
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	3b01      	subs	r3, #1
 8001398:	6293      	str	r3, [r2, #40]	; 0x28
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <Motor_Get_Speed>:
  * @brief read speed
  * @param
  * @retval None
  */
uint16_t Motor_Get_Speed(Motor_Name* Motor)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	Motor->speed = speed;
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <Motor_Get_Speed+0x20>)
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	82da      	strh	r2, [r3, #22]
	return speed;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <Motor_Get_Speed+0x20>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000204 	.word	0x20000204

080013c8 <HAL_SYSTICK_Callback>:
  * @brief update speed for motor through encoder
  * @param
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
	if(idx == SAMPLING_TIME)	//update speed after every sampling time
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_SYSTICK_Callback+0x50>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b64      	cmp	r3, #100	; 0x64
 80013d2:	d119      	bne.n	8001408 <HAL_SYSTICK_Callback+0x40>
	{
		pre_counter = __HAL_TIM_GET_COUNTER(Motor.Timer_Encoder);
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_SYSTICK_Callback+0x54>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	b29a      	uxth	r2, r3
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_SYSTICK_Callback+0x58>)
 80013e0:	801a      	strh	r2, [r3, #0]
		speed = caculate_speed(pre_counter, old_counter);
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_SYSTICK_Callback+0x58>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_SYSTICK_Callback+0x5c>)
 80013e8:	8812      	ldrh	r2, [r2, #0]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f81d 	bl	800142c <caculate_speed>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_SYSTICK_Callback+0x60>)
 80013f8:	801a      	strh	r2, [r3, #0]
		old_counter = pre_counter;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_SYSTICK_Callback+0x58>)
 80013fc:	881a      	ldrh	r2, [r3, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_SYSTICK_Callback+0x5c>)
 8001400:	801a      	strh	r2, [r3, #0]
		idx = 0;
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_SYSTICK_Callback+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
	}
	idx++;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_SYSTICK_Callback+0x50>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a02      	ldr	r2, [pc, #8]	; (8001418 <HAL_SYSTICK_Callback+0x50>)
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001fc 	.word	0x200001fc
 800141c:	20001c54 	.word	0x20001c54
 8001420:	20000200 	.word	0x20000200
 8001424:	20000202 	.word	0x20000202
 8001428:	20000204 	.word	0x20000204

0800142c <caculate_speed>:

static uint16_t caculate_speed(uint16_t pre_counter, uint16_t old_counter)
		{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	460a      	mov	r2, r1
 8001436:	80fb      	strh	r3, [r7, #6]
 8001438:	4613      	mov	r3, r2
 800143a:	80bb      	strh	r3, [r7, #4]
			if(pre_counter < old_counter)
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	d206      	bcs.n	8001452 <caculate_speed+0x26>
				pre_counter += Motor.Timer_Encoder->Init.Period;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <caculate_speed+0x4c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	b29a      	uxth	r2, r3
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4413      	add	r3, r2
 8001450:	80fb      	strh	r3, [r7, #6]
			return (pre_counter - old_counter) * (1000 / SAMPLING_TIME) * 60 / 334; 	//number of pulses in one  minutes / 334 = rpm
 8001452:	88fa      	ldrh	r2, [r7, #6]
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f44f 7216 	mov.w	r2, #600	; 0x258
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <caculate_speed+0x50>)
 8001462:	fb82 1203 	smull	r1, r2, r2, r3
 8001466:	11d2      	asrs	r2, r2, #7
 8001468:	17db      	asrs	r3, r3, #31
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b29b      	uxth	r3, r3
		}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20001c54 	.word	0x20001c54
 800147c:	621b97c3 	.word	0x621b97c3

08001480 <DELAY_TIM_Init>:
 *      Author: acer
 */
#include "delay_timer.h"

void	DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f001 fddb 	bl	8003044 <HAL_TIM_Base_Start>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <DELAY_TIM_Us>:

void 	DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t us)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	807b      	strh	r3, [r7, #2]
    __HAL_TIM_SET_COUNTER(htim,0);  // set the counter value a 0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(htim) < us);  // wait for the counter to reach the us input in the parameter
 80014aa:	bf00      	nop
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d3f9      	bcc.n	80014ac <DELAY_TIM_Us+0x16>
//        while (__HAL_TIM_GET_COUNTER(htim) < period);  // wait for the counter to reach the us input in the parameter
//        while (__HAL_TIM_GET_COUNTER(htim) < last_cnt - period);  // wait for the counter to reach the us input in the parameter
//    }
//

}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <DELAY_TIM_Ms>:

void	DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t ms)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
	while(ms--)
 80014d0:	e004      	b.n	80014dc <DELAY_TIM_Ms+0x18>
	{
		DELAY_TIM_Us(htim, 1000);
 80014d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffdd 	bl	8001496 <DELAY_TIM_Us>
	while(ms--)
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	1e5a      	subs	r2, r3, #1
 80014e0:	807a      	strh	r2, [r7, #2]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f5      	bne.n	80014d2 <DELAY_TIM_Ms+0xe>
	}
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f6:	f000 fd25 	bl	8001f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fa:	f000 f87b 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fe:	f000 f9e9 	bl	80018d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001502:	f000 f9b7 	bl	8001874 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001506:	f000 f8bb 	bl	8001680 <MX_TIM2_Init>
  MX_TIM3_Init();
 800150a:	f000 f911 	bl	8001730 <MX_TIM3_Init>
  MX_TIM4_Init();
 800150e:	f000 f963 	bl	80017d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001512:	f003 f9bf 	bl	8004894 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001516:	4a25      	ldr	r2, [pc, #148]	; (80015ac <main+0xbc>)
 8001518:	2100      	movs	r1, #0
 800151a:	4825      	ldr	r0, [pc, #148]	; (80015b0 <main+0xc0>)
 800151c:	f003 fa48 	bl	80049b0 <osThreadNew>
 8001520:	4603      	mov	r3, r0
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <main+0xc4>)
 8001524:	6013      	str	r3, [r2, #0]

  /* creation of readSensor */
  readSensorHandle = osThreadNew(StartTask02, NULL, &readSensor_attributes);
 8001526:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <main+0xc8>)
 8001528:	2100      	movs	r1, #0
 800152a:	4824      	ldr	r0, [pc, #144]	; (80015bc <main+0xcc>)
 800152c:	f003 fa40 	bl	80049b0 <osThreadNew>
 8001530:	4603      	mov	r3, r0
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <main+0xd0>)
 8001534:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001536:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <main+0xd4>)
 8001538:	2100      	movs	r1, #0
 800153a:	4823      	ldr	r0, [pc, #140]	; (80015c8 <main+0xd8>)
 800153c:	f003 fa38 	bl	80049b0 <osThreadNew>
 8001540:	4603      	mov	r3, r0
 8001542:	4a22      	ldr	r2, [pc, #136]	; (80015cc <main+0xdc>)
 8001544:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001546:	f003 f9d7 	bl	80048f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  DS18B20_Init(&DS, &htim4, DS18b20_GPIO_Port , DS18b20_Pin);
 800154a:	2302      	movs	r3, #2
 800154c:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <main+0xe0>)
 800154e:	4921      	ldr	r1, [pc, #132]	; (80015d4 <main+0xe4>)
 8001550:	4821      	ldr	r0, [pc, #132]	; (80015d8 <main+0xe8>)
 8001552:	f7ff fe2c 	bl	80011ae <DS18B20_Init>
  Motor_Init_PWM(&Motor, &htim2, TIM_CHANNEL_4, 2000, 100);
 8001556:	2364      	movs	r3, #100	; 0x64
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800155e:	220c      	movs	r2, #12
 8001560:	491e      	ldr	r1, [pc, #120]	; (80015dc <main+0xec>)
 8001562:	481f      	ldr	r0, [pc, #124]	; (80015e0 <main+0xf0>)
 8001564:	f7ff fe82 	bl	800126c <Motor_Init_PWM>
  Motor_Init_Encoder(&Motor, &htim3, TIM_CHANNEL_1);
 8001568:	2200      	movs	r2, #0
 800156a:	491e      	ldr	r1, [pc, #120]	; (80015e4 <main+0xf4>)
 800156c:	481c      	ldr	r0, [pc, #112]	; (80015e0 <main+0xf0>)
 800156e:	f7ff fe9b 	bl	80012a8 <Motor_Init_Encoder>

  while (1)
  {

	  temp = DS18B20_ReadTemp(&DS);
 8001572:	4819      	ldr	r0, [pc, #100]	; (80015d8 <main+0xe8>)
 8001574:	f7ff fe32 	bl	80011dc <DS18B20_ReadTemp>
 8001578:	4603      	mov	r3, r0
 800157a:	4a1b      	ldr	r2, [pc, #108]	; (80015e8 <main+0xf8>)
 800157c:	6013      	str	r3, [r2, #0]
	  printf("temp = %f\n", temp);
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <main+0xf8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff50 	bl	8000428 <__aeabi_f2d>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4817      	ldr	r0, [pc, #92]	; (80015ec <main+0xfc>)
 800158e:	f006 fb85 	bl	8007c9c <iprintf>
	  printf("speed = %d\n", Motor_Get_Speed(&Motor));
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <main+0xf0>)
 8001594:	f7ff ff06 	bl	80013a4 <Motor_Get_Speed>
 8001598:	4603      	mov	r3, r0
 800159a:	4619      	mov	r1, r3
 800159c:	4814      	ldr	r0, [pc, #80]	; (80015f0 <main+0x100>)
 800159e:	f006 fb7d 	bl	8007c9c <iprintf>

	  HAL_Delay(2000);
 80015a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015a6:	f000 fd2f 	bl	8002008 <HAL_Delay>
	  temp = DS18B20_ReadTemp(&DS);
 80015aa:	e7e2      	b.n	8001572 <main+0x82>
 80015ac:	08009f10 	.word	0x08009f10
 80015b0:	08001a19 	.word	0x08001a19
 80015b4:	20001b1c 	.word	0x20001b1c
 80015b8:	08009f34 	.word	0x08009f34
 80015bc:	08001a45 	.word	0x08001a45
 80015c0:	20001c6c 	.word	0x20001c6c
 80015c4:	08009f58 	.word	0x08009f58
 80015c8:	08001a71 	.word	0x08001a71
 80015cc:	20001c08 	.word	0x20001c08
 80015d0:	40010c00 	.word	0x40010c00
 80015d4:	20001b20 	.word	0x20001b20
 80015d8:	20001bf8 	.word	0x20001bf8
 80015dc:	20001c0c 	.word	0x20001c0c
 80015e0:	20001c54 	.word	0x20001c54
 80015e4:	20001b6c 	.word	0x20001b6c
 80015e8:	20001b68 	.word	0x20001b68
 80015ec:	08009ec4 	.word	0x08009ec4
 80015f0:	08009ed0 	.word	0x08009ed0

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	; 0x40
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	2228      	movs	r2, #40	; 0x28
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f005 fee2 	bl	80073cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800161a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001624:	2301      	movs	r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001628:	2302      	movs	r3, #2
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800162c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001632:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	4618      	mov	r0, r3
 800163e:	f001 f897 	bl	8002770 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001648:	f000 fa28 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2102      	movs	r1, #2
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fb02 	bl	8002c70 <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001672:	f000 fa13 	bl	8001a9c <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	3740      	adds	r7, #64	; 0x40
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <MX_TIM2_Init+0xac>)
 80016a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_TIM2_Init+0xac>)
 80016ac:	2208      	movs	r2, #8
 80016ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <MX_TIM2_Init+0xac>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <MX_TIM2_Init+0xac>)
 80016b8:	2263      	movs	r2, #99	; 0x63
 80016ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <MX_TIM2_Init+0xac>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_TIM2_Init+0xac>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016c8:	4818      	ldr	r0, [pc, #96]	; (800172c <MX_TIM2_Init+0xac>)
 80016ca:	f001 fd05 	bl	80030d8 <HAL_TIM_PWM_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80016d4:	f000 f9e2 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	4619      	mov	r1, r3
 80016e6:	4811      	ldr	r0, [pc, #68]	; (800172c <MX_TIM2_Init+0xac>)
 80016e8:	f002 fb3e 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80016f2:	f000 f9d3 	bl	8001a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f6:	2360      	movs	r3, #96	; 0x60
 80016f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	220c      	movs	r2, #12
 800170a:	4619      	mov	r1, r3
 800170c:	4807      	ldr	r0, [pc, #28]	; (800172c <MX_TIM2_Init+0xac>)
 800170e:	f001 ff05 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001718:	f000 f9c0 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <MX_TIM2_Init+0xac>)
 800171e:	f000 fa73 	bl	8001c08 <HAL_TIM_MspPostInit>

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20001c0c 	.word	0x20001c0c

08001730 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	2224      	movs	r2, #36	; 0x24
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f005 fe44 	bl	80073cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MX_TIM3_Init+0xa0>)
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <MX_TIM3_Init+0xa4>)
 8001750:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MX_TIM3_Init+0xa0>)
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_TIM3_Init+0xa0>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_TIM3_Init+0xa0>)
 8001760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001764:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_TIM3_Init+0xa0>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <MX_TIM3_Init+0xa0>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001772:	2301      	movs	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001776:	2302      	movs	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800177a:	2301      	movs	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001786:	2302      	movs	r3, #2
 8001788:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <MX_TIM3_Init+0xa0>)
 800179e:	f001 fd8d 	bl	80032bc <HAL_TIM_Encoder_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f000 f978 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_TIM3_Init+0xa0>)
 80017ba:	f002 fad5 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017c4:	f000 f96a 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3730      	adds	r7, #48	; 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20001b6c 	.word	0x20001b6c
 80017d4:	40000400 	.word	0x40000400

080017d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ec:	463b      	mov	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_TIM4_Init+0x94>)
 80017f6:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <MX_TIM4_Init+0x98>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_TIM4_Init+0x94>)
 80017fc:	2247      	movs	r2, #71	; 0x47
 80017fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_TIM4_Init+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <MX_TIM4_Init+0x94>)
 8001808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800180c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_TIM4_Init+0x94>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_TIM4_Init+0x94>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800181a:	4814      	ldr	r0, [pc, #80]	; (800186c <MX_TIM4_Init+0x94>)
 800181c:	f001 fbc2 	bl	8002fa4 <HAL_TIM_Base_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001826:	f000 f939 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	4619      	mov	r1, r3
 8001836:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_TIM4_Init+0x94>)
 8001838:	f001 ff2e 	bl	8003698 <HAL_TIM_ConfigClockSource>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001842:	f000 f92b 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800184e:	463b      	mov	r3, r7
 8001850:	4619      	mov	r1, r3
 8001852:	4806      	ldr	r0, [pc, #24]	; (800186c <MX_TIM4_Init+0x94>)
 8001854:	f002 fa88 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800185e:	f000 f91d 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20001b20 	.word	0x20001b20
 8001870:	40000800 	.word	0x40000800

08001874 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <MX_USART1_UART_Init+0x58>)
 800187c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 80018ac:	f002 faba 	bl	8003e24 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018b6:	f000 f8f1 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&rxBuff, 1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	4904      	ldr	r1, [pc, #16]	; (80018d0 <MX_USART1_UART_Init+0x5c>)
 80018be:	4802      	ldr	r0, [pc, #8]	; (80018c8 <MX_USART1_UART_Init+0x54>)
 80018c0:	f002 fb8f 	bl	8003fe2 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20001bb4 	.word	0x20001bb4
 80018cc:	40013800 	.word	0x40013800
 80018d0:	20000206 	.word	0x20000206

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <MX_GPIO_Init+0xcc>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a2c      	ldr	r2, [pc, #176]	; (80019a0 <MX_GPIO_Init+0xcc>)
 80018ee:	f043 0310 	orr.w	r3, r3, #16
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <MX_GPIO_Init+0xcc>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <MX_GPIO_Init+0xcc>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <MX_GPIO_Init+0xcc>)
 8001906:	f043 0320 	orr.w	r3, r3, #32
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <MX_GPIO_Init+0xcc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0320 	and.w	r3, r3, #32
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <MX_GPIO_Init+0xcc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <MX_GPIO_Init+0xcc>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <MX_GPIO_Init+0xcc>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_GPIO_Init+0xcc>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <MX_GPIO_Init+0xcc>)
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_GPIO_Init+0xcc>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194e:	4815      	ldr	r0, [pc, #84]	; (80019a4 <MX_GPIO_Init+0xd0>)
 8001950:	f000 fedd 	bl	800270e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18b20_GPIO_Port, DS18b20_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2102      	movs	r1, #2
 8001958:	4813      	ldr	r0, [pc, #76]	; (80019a8 <MX_GPIO_Init+0xd4>)
 800195a:	f000 fed8 	bl	800270e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2302      	movs	r3, #2
 800196e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	480b      	ldr	r0, [pc, #44]	; (80019a4 <MX_GPIO_Init+0xd0>)
 8001978:	f000 fd2e 	bl	80023d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18b20_Pin */
  GPIO_InitStruct.Pin = DS18b20_Pin;
 800197c:	2302      	movs	r3, #2
 800197e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2302      	movs	r3, #2
 800198a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18b20_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001994:	f000 fd20 	bl	80023d8 <HAL_GPIO_Init>

}
 8001998:	bf00      	nop
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40011000 	.word	0x40011000
 80019a8:	40010c00 	.word	0x40010c00

080019ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_UART_RxCpltCallback+0x38>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10d      	bne.n	80019da <HAL_UART_RxCpltCallback+0x2e>
		if(rxBuff == 't') {
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_UART_RxCpltCallback+0x3c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b74      	cmp	r3, #116	; 0x74
 80019c4:	d104      	bne.n	80019d0 <HAL_UART_RxCpltCallback+0x24>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80019c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <HAL_UART_RxCpltCallback+0x40>)
 80019cc:	f000 feb7 	bl	800273e <HAL_GPIO_TogglePin>
			// giai phong Semaphore;
		}

		HAL_UART_Receive_IT(&huart1, &rxBuff, 1);
 80019d0:	2201      	movs	r2, #1
 80019d2:	4905      	ldr	r1, [pc, #20]	; (80019e8 <HAL_UART_RxCpltCallback+0x3c>)
 80019d4:	4806      	ldr	r0, [pc, #24]	; (80019f0 <HAL_UART_RxCpltCallback+0x44>)
 80019d6:	f002 fb04 	bl	8003fe2 <HAL_UART_Receive_IT>
	}
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40013800 	.word	0x40013800
 80019e8:	20000206 	.word	0x20000206
 80019ec:	40011000 	.word	0x40011000
 80019f0:	20001bb4 	.word	0x20001bb4

080019f4 <__io_putchar>:


int __io_putchar(int ch) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1,(uint8_t *)&ch, 1, 500);
 80019fc:	1d39      	adds	r1, r7, #4
 80019fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a02:	2201      	movs	r2, #1
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <__io_putchar+0x20>)
 8001a06:	f002 fa5a 	bl	8003ebe <HAL_UART_Transmit>

	return ch;
 8001a0a:	687b      	ldr	r3, [r7, #4]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20001bb4 	.word	0x20001bb4

08001a18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	__IO uint32_t tick3 = osKernelGetTickCount();
 8001a20:	f002 ff9e 	bl	8004960 <osKernelGetTickCount>
 8001a24:	4603      	mov	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    printf("111\n");
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <StartDefaultTask+0x28>)
 8001a2a:	f006 f9bd 	bl	8007da8 <puts>
    tick3 += 500;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a34:	60fb      	str	r3, [r7, #12]
    osDelayUntil(tick3);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f003 f863 	bl	8004b04 <osDelayUntil>
    printf("111\n");
 8001a3e:	e7f3      	b.n	8001a28 <StartDefaultTask+0x10>
 8001a40:	08009edc 	.word	0x08009edc

08001a44 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	__IO uint32_t tick2 = osKernelGetTickCount();
 8001a4c:	f002 ff88 	bl	8004960 <osKernelGetTickCount>
 8001a50:	4603      	mov	r3, r0
 8001a52:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    printf("222\n");
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <StartTask02+0x28>)
 8001a56:	f006 f9a7 	bl	8007da8 <puts>
    tick2 += 500;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a60:	60fb      	str	r3, [r7, #12]
    osDelayUntil(tick2);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 f84d 	bl	8004b04 <osDelayUntil>
    printf("222\n");
 8001a6a:	e7f3      	b.n	8001a54 <StartTask02+0x10>
 8001a6c:	08009ee0 	.word	0x08009ee0

08001a70 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	__IO uint32_t tick3 = osKernelGetTickCount();
 8001a78:	f002 ff72 	bl	8004960 <osKernelGetTickCount>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    printf("333\n");
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <StartTask03+0x28>)
 8001a82:	f006 f991 	bl	8007da8 <puts>
    tick3 += 500;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a8c:	60fb      	str	r3, [r7, #12]
    osDelayUntil(tick3);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 f837 	bl	8004b04 <osDelayUntil>
    printf("333\n");
 8001a96:	e7f3      	b.n	8001a80 <StartTask03+0x10>
 8001a98:	08009ee4 	.word	0x08009ee4

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>
	...

08001aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_MspInit+0x68>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_MspInit+0x68>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_MspInit+0x68>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_MspInit+0x68>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_MspInit+0x68>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_MspInit+0x68>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	210f      	movs	r1, #15
 8001ae2:	f06f 0001 	mvn.w	r0, #1
 8001ae6:	f000 fb8a 	bl	80021fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_MspInit+0x6c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_MspInit+0x6c>)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010000 	.word	0x40010000

08001b18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d10b      	bne.n	8001b42 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_TIM_PWM_MspInit+0x34>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_TIM_PWM_MspInit+0x34>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_TIM_PWM_MspInit+0x34>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0310 	add.w	r3, r7, #16
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <HAL_TIM_Encoder_MspInit+0x70>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d123      	bne.n	8001bb8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	61d3      	str	r3, [r2, #28]
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TI1_Encoder_Pin|TI2_Encoder_Pin;
 8001ba0:	23c0      	movs	r3, #192	; 0xc0
 8001ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001bb4:	f000 fc10 	bl	80023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010800 	.word	0x40010800

08001bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_TIM_Base_MspInit+0x34>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_TIM_Base_MspInit+0x38>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_TIM_Base_MspInit+0x38>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_TIM_Base_MspInit+0x38>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c26:	d117      	bne.n	8001c58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_TIM_MspPostInit+0x58>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <HAL_TIM_MspPostInit+0x58>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_MspPostInit+0x58>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001c40:	2308      	movs	r3, #8
 8001c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	4619      	mov	r1, r3
 8001c52:	4804      	ldr	r0, [pc, #16]	; (8001c64 <HAL_TIM_MspPostInit+0x5c>)
 8001c54:	f000 fbc0 	bl	80023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c58:	bf00      	nop
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010800 	.word	0x40010800

08001c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_UART_MspInit+0x9c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d139      	bne.n	8001cfc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_UART_MspInit+0xa0>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480f      	ldr	r0, [pc, #60]	; (8001d0c <HAL_UART_MspInit+0xa4>)
 8001cce:	f000 fb83 	bl	80023d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4809      	ldr	r0, [pc, #36]	; (8001d0c <HAL_UART_MspInit+0xa4>)
 8001ce8:	f000 fb76 	bl	80023d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2105      	movs	r1, #5
 8001cf0:	2025      	movs	r0, #37	; 0x25
 8001cf2:	f000 fa84 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cf6:	2025      	movs	r0, #37	; 0x25
 8001cf8:	f000 fa9d 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40013800 	.word	0x40013800
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010800 	.word	0x40010800

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <NMI_Handler+0x4>

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler+0x4>

08001d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3e:	f000 f947 	bl	8001fd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d42:	f004 fb4d 	bl	80063e0 <xTaskGetSchedulerState>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d001      	beq.n	8001d50 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d4c:	f005 f8ac 	bl	8006ea8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001d50:	f000 fa8b 	bl	800226a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <USART1_IRQHandler+0x10>)
 8001d5e:	f002 f971 	bl	8004044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20001bb4 	.word	0x20001bb4

08001d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
	return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <_kill>:

int _kill(int pid, int sig)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d84:	f005 faea 	bl	800735c <__errno>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2216      	movs	r2, #22
 8001d8c:	601a      	str	r2, [r3, #0]
	return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_exit>:

void _exit (int status)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001da2:	f04f 31ff 	mov.w	r1, #4294967295
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffe7 	bl	8001d7a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dac:	e7fe      	b.n	8001dac <_exit+0x12>

08001dae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e00a      	b.n	8001dd6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dc0:	f3af 8000 	nop.w
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	b2ca      	uxtb	r2, r1
 8001dce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbf0      	blt.n	8001dc0 <_read+0x12>
	}

return len;
 8001dde:	687b      	ldr	r3, [r7, #4]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e009      	b.n	8001e0e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	60ba      	str	r2, [r7, #8]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fdf6 	bl	80019f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	dbf1      	blt.n	8001dfa <_write+0x12>
	}
	return len;
 8001e16:	687b      	ldr	r3, [r7, #4]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_close>:

int _close(int file)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	return -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e46:	605a      	str	r2, [r3, #4]
	return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <_isatty>:

int _isatty(int file)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	return 1;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
	return 0;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <_sbrk+0x5c>)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <_sbrk+0x60>)
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <_sbrk+0x64>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <_sbrk+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d207      	bcs.n	8001ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb0:	f005 fa54 	bl	800735c <__errno>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e009      	b.n	8001ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <_sbrk+0x64>)
 8001ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20005000 	.word	0x20005000
 8001ee0:	00000400 	.word	0x00000400
 8001ee4:	20000208 	.word	0x20000208
 8001ee8:	20001cc8 	.word	0x20001cc8

08001eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001efa:	490d      	ldr	r1, [pc, #52]	; (8001f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f10:	4c0a      	ldr	r4, [pc, #40]	; (8001f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f1e:	f7ff ffe5 	bl	8001eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f22:	f005 fa21 	bl	8007368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f26:	f7ff fae3 	bl	80014f0 <main>
  bx lr
 8001f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f34:	0800a37c 	.word	0x0800a37c
  ldr r2, =_sbss
 8001f38:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f3c:	20001cc4 	.word	0x20001cc4

08001f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC1_2_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_Init+0x28>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_Init+0x28>)
 8001f4e:	f043 0310 	orr.w	r3, r3, #16
 8001f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 f947 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5a:	200f      	movs	r0, #15
 8001f5c:	f000 f808 	bl	8001f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f60:	f7ff fda2 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40022000 	.word	0x40022000

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x54>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f95f 	bl	8002252 <HAL_SYSTICK_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00e      	b.n	8001fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d80a      	bhi.n	8001fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 f927 	bl	80021fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_InitTick+0x5c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_IncTick+0x1c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20001c70 	.word	0x20001c70

08001ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <HAL_GetTick+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20001c70 	.word	0x20001c70

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff fff0 	bl	8001ff4 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d005      	beq.n	800202e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_Delay+0x44>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800202e:	bf00      	nop
 8002030:	f7ff ffe0 	bl	8001ff4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8f7      	bhi.n	8002030 <HAL_Delay+0x28>
  {
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000008 	.word	0x20000008

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0b      	blt.n	80020de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4906      	ldr	r1, [pc, #24]	; (80020e8 <__NVIC_EnableIRQ+0x34>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db0a      	blt.n	8002116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	490c      	ldr	r1, [pc, #48]	; (8002138 <__NVIC_SetPriority+0x4c>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	440b      	add	r3, r1
 8002110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002114:	e00a      	b.n	800212c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4908      	ldr	r1, [pc, #32]	; (800213c <__NVIC_SetPriority+0x50>)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3b04      	subs	r3, #4
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	440b      	add	r3, r1
 800212a:	761a      	strb	r2, [r3, #24]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f1c3 0307 	rsb	r3, r3, #7
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf28      	it	cs
 800215e:	2304      	movcs	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3304      	adds	r3, #4
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <NVIC_EncodePriority+0x30>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3b03      	subs	r3, #3
 800216e:	e000      	b.n	8002172 <NVIC_EncodePriority+0x32>
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43d9      	mvns	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	4313      	orrs	r3, r2
         );
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b4:	d301      	bcc.n	80021ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <SysTick_Config+0x40>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c2:	210f      	movs	r1, #15
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f7ff ff90 	bl	80020ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <SysTick_Config+0x40>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SysTick_Config+0x40>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff2d 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff42 	bl	8002098 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff90 	bl	8002140 <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5f 	bl	80020ec <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff35 	bl	80020b4 <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa2 	bl	80021a4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800226e:	f7ff f8ab 	bl	80013c8 <HAL_SYSTICK_Callback>
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002288:	2b02      	cmp	r3, #2
 800228a:	d008      	beq.n	800229e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2204      	movs	r2, #4
 8002290:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e020      	b.n	80022e0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 020e 	bic.w	r2, r2, #14
 80022ac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d005      	beq.n	800230e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2204      	movs	r2, #4
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e051      	b.n	80023b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 020e 	bic.w	r2, r2, #14
 800231c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_DMA_Abort_IT+0xd0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d029      	beq.n	800238c <HAL_DMA_Abort_IT+0xa0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <HAL_DMA_Abort_IT+0xd4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d022      	beq.n	8002388 <HAL_DMA_Abort_IT+0x9c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1f      	ldr	r2, [pc, #124]	; (80023c4 <HAL_DMA_Abort_IT+0xd8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d01a      	beq.n	8002382 <HAL_DMA_Abort_IT+0x96>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <HAL_DMA_Abort_IT+0xdc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d012      	beq.n	800237c <HAL_DMA_Abort_IT+0x90>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_DMA_Abort_IT+0xe0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00a      	beq.n	8002376 <HAL_DMA_Abort_IT+0x8a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1a      	ldr	r2, [pc, #104]	; (80023d0 <HAL_DMA_Abort_IT+0xe4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d102      	bne.n	8002370 <HAL_DMA_Abort_IT+0x84>
 800236a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800236e:	e00e      	b.n	800238e <HAL_DMA_Abort_IT+0xa2>
 8002370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002374:	e00b      	b.n	800238e <HAL_DMA_Abort_IT+0xa2>
 8002376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237a:	e008      	b.n	800238e <HAL_DMA_Abort_IT+0xa2>
 800237c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002380:	e005      	b.n	800238e <HAL_DMA_Abort_IT+0xa2>
 8002382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002386:	e002      	b.n	800238e <HAL_DMA_Abort_IT+0xa2>
 8002388:	2310      	movs	r3, #16
 800238a:	e000      	b.n	800238e <HAL_DMA_Abort_IT+0xa2>
 800238c:	2301      	movs	r3, #1
 800238e:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_DMA_Abort_IT+0xe8>)
 8002390:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
    } 
  }
  return status;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40020008 	.word	0x40020008
 80023c0:	4002001c 	.word	0x4002001c
 80023c4:	40020030 	.word	0x40020030
 80023c8:	40020044 	.word	0x40020044
 80023cc:	40020058 	.word	0x40020058
 80023d0:	4002006c 	.word	0x4002006c
 80023d4:	40020000 	.word	0x40020000

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b08b      	sub	sp, #44	; 0x2c
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ea:	e169      	b.n	80026c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023ec:	2201      	movs	r2, #1
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	429a      	cmp	r2, r3
 8002406:	f040 8158 	bne.w	80026ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4a9a      	ldr	r2, [pc, #616]	; (8002678 <HAL_GPIO_Init+0x2a0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d05e      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 8002414:	4a98      	ldr	r2, [pc, #608]	; (8002678 <HAL_GPIO_Init+0x2a0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d875      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 800241a:	4a98      	ldr	r2, [pc, #608]	; (800267c <HAL_GPIO_Init+0x2a4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d058      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 8002420:	4a96      	ldr	r2, [pc, #600]	; (800267c <HAL_GPIO_Init+0x2a4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d86f      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 8002426:	4a96      	ldr	r2, [pc, #600]	; (8002680 <HAL_GPIO_Init+0x2a8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d052      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 800242c:	4a94      	ldr	r2, [pc, #592]	; (8002680 <HAL_GPIO_Init+0x2a8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d869      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 8002432:	4a94      	ldr	r2, [pc, #592]	; (8002684 <HAL_GPIO_Init+0x2ac>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d04c      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 8002438:	4a92      	ldr	r2, [pc, #584]	; (8002684 <HAL_GPIO_Init+0x2ac>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d863      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 800243e:	4a92      	ldr	r2, [pc, #584]	; (8002688 <HAL_GPIO_Init+0x2b0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d046      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
 8002444:	4a90      	ldr	r2, [pc, #576]	; (8002688 <HAL_GPIO_Init+0x2b0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d85d      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 800244a:	2b12      	cmp	r3, #18
 800244c:	d82a      	bhi.n	80024a4 <HAL_GPIO_Init+0xcc>
 800244e:	2b12      	cmp	r3, #18
 8002450:	d859      	bhi.n	8002506 <HAL_GPIO_Init+0x12e>
 8002452:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <HAL_GPIO_Init+0x80>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	080024d3 	.word	0x080024d3
 800245c:	080024ad 	.word	0x080024ad
 8002460:	080024bf 	.word	0x080024bf
 8002464:	08002501 	.word	0x08002501
 8002468:	08002507 	.word	0x08002507
 800246c:	08002507 	.word	0x08002507
 8002470:	08002507 	.word	0x08002507
 8002474:	08002507 	.word	0x08002507
 8002478:	08002507 	.word	0x08002507
 800247c:	08002507 	.word	0x08002507
 8002480:	08002507 	.word	0x08002507
 8002484:	08002507 	.word	0x08002507
 8002488:	08002507 	.word	0x08002507
 800248c:	08002507 	.word	0x08002507
 8002490:	08002507 	.word	0x08002507
 8002494:	08002507 	.word	0x08002507
 8002498:	08002507 	.word	0x08002507
 800249c:	080024b5 	.word	0x080024b5
 80024a0:	080024c9 	.word	0x080024c9
 80024a4:	4a79      	ldr	r2, [pc, #484]	; (800268c <HAL_GPIO_Init+0x2b4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024aa:	e02c      	b.n	8002506 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	623b      	str	r3, [r7, #32]
          break;
 80024b2:	e029      	b.n	8002508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	3304      	adds	r3, #4
 80024ba:	623b      	str	r3, [r7, #32]
          break;
 80024bc:	e024      	b.n	8002508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	3308      	adds	r3, #8
 80024c4:	623b      	str	r3, [r7, #32]
          break;
 80024c6:	e01f      	b.n	8002508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	330c      	adds	r3, #12
 80024ce:	623b      	str	r3, [r7, #32]
          break;
 80024d0:	e01a      	b.n	8002508 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024da:	2304      	movs	r3, #4
 80024dc:	623b      	str	r3, [r7, #32]
          break;
 80024de:	e013      	b.n	8002508 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e8:	2308      	movs	r3, #8
 80024ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	611a      	str	r2, [r3, #16]
          break;
 80024f2:	e009      	b.n	8002508 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024f4:	2308      	movs	r3, #8
 80024f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	615a      	str	r2, [r3, #20]
          break;
 80024fe:	e003      	b.n	8002508 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
          break;
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x130>
          break;
 8002506:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2bff      	cmp	r3, #255	; 0xff
 800250c:	d801      	bhi.n	8002512 <HAL_GPIO_Init+0x13a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	e001      	b.n	8002516 <HAL_GPIO_Init+0x13e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2bff      	cmp	r3, #255	; 0xff
 800251c:	d802      	bhi.n	8002524 <HAL_GPIO_Init+0x14c>
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x152>
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	3b08      	subs	r3, #8
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	210f      	movs	r1, #15
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	401a      	ands	r2, r3
 800253c:	6a39      	ldr	r1, [r7, #32]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	431a      	orrs	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80b1 	beq.w	80026ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002558:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <HAL_GPIO_Init+0x2b8>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a4c      	ldr	r2, [pc, #304]	; (8002690 <HAL_GPIO_Init+0x2b8>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6193      	str	r3, [r2, #24]
 8002564:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_GPIO_Init+0x2b8>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002570:	4a48      	ldr	r2, [pc, #288]	; (8002694 <HAL_GPIO_Init+0x2bc>)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a40      	ldr	r2, [pc, #256]	; (8002698 <HAL_GPIO_Init+0x2c0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <HAL_GPIO_Init+0x1ec>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a3f      	ldr	r2, [pc, #252]	; (800269c <HAL_GPIO_Init+0x2c4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00d      	beq.n	80025c0 <HAL_GPIO_Init+0x1e8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <HAL_GPIO_Init+0x2c8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d007      	beq.n	80025bc <HAL_GPIO_Init+0x1e4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a3d      	ldr	r2, [pc, #244]	; (80026a4 <HAL_GPIO_Init+0x2cc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_GPIO_Init+0x1e0>
 80025b4:	2303      	movs	r3, #3
 80025b6:	e006      	b.n	80025c6 <HAL_GPIO_Init+0x1ee>
 80025b8:	2304      	movs	r3, #4
 80025ba:	e004      	b.n	80025c6 <HAL_GPIO_Init+0x1ee>
 80025bc:	2302      	movs	r3, #2
 80025be:	e002      	b.n	80025c6 <HAL_GPIO_Init+0x1ee>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_GPIO_Init+0x1ee>
 80025c4:	2300      	movs	r3, #0
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	f002 0203 	and.w	r2, r2, #3
 80025cc:	0092      	lsls	r2, r2, #2
 80025ce:	4093      	lsls	r3, r2
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025d6:	492f      	ldr	r1, [pc, #188]	; (8002694 <HAL_GPIO_Init+0x2bc>)
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d006      	beq.n	80025fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	492c      	ldr	r1, [pc, #176]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	43db      	mvns	r3, r3
 8002606:	4928      	ldr	r1, [pc, #160]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002608:	4013      	ands	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4922      	ldr	r1, [pc, #136]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	43db      	mvns	r3, r3
 800262e:	491e      	ldr	r1, [pc, #120]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002630:	4013      	ands	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	4918      	ldr	r1, [pc, #96]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	43db      	mvns	r3, r3
 8002656:	4914      	ldr	r1, [pc, #80]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 8002658:	4013      	ands	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d021      	beq.n	80026ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	490e      	ldr	r1, [pc, #56]	; (80026a8 <HAL_GPIO_Init+0x2d0>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	60cb      	str	r3, [r1, #12]
 8002674:	e021      	b.n	80026ba <HAL_GPIO_Init+0x2e2>
 8002676:	bf00      	nop
 8002678:	10320000 	.word	0x10320000
 800267c:	10310000 	.word	0x10310000
 8002680:	10220000 	.word	0x10220000
 8002684:	10210000 	.word	0x10210000
 8002688:	10120000 	.word	0x10120000
 800268c:	10110000 	.word	0x10110000
 8002690:	40021000 	.word	0x40021000
 8002694:	40010000 	.word	0x40010000
 8002698:	40010800 	.word	0x40010800
 800269c:	40010c00 	.word	0x40010c00
 80026a0:	40011000 	.word	0x40011000
 80026a4:	40011400 	.word	0x40011400
 80026a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_GPIO_Init+0x304>)
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	4909      	ldr	r1, [pc, #36]	; (80026dc <HAL_GPIO_Init+0x304>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	3301      	adds	r3, #1
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f47f ae8e 	bne.w	80023ec <HAL_GPIO_Init+0x14>
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	372c      	adds	r7, #44	; 0x2c
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40010400 	.word	0x40010400

080026e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e001      	b.n	8002702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]
 800271a:	4613      	mov	r3, r2
 800271c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800271e:	787b      	ldrb	r3, [r7, #1]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002724:	887a      	ldrh	r2, [r7, #2]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800272a:	e003      	b.n	8002734 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	041a      	lsls	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	611a      	str	r2, [r3, #16]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	041a      	lsls	r2, r3, #16
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43d9      	mvns	r1, r3
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	400b      	ands	r3, r1
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	611a      	str	r2, [r3, #16]
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e26c      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8087 	beq.w	800289e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002790:	4b92      	ldr	r3, [pc, #584]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800279c:	4b8f      	ldr	r3, [pc, #572]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d112      	bne.n	80027ce <HAL_RCC_OscConfig+0x5e>
 80027a8:	4b8c      	ldr	r3, [pc, #560]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d10b      	bne.n	80027ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b6:	4b89      	ldr	r3, [pc, #548]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d06c      	beq.n	800289c <HAL_RCC_OscConfig+0x12c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d168      	bne.n	800289c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e246      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x76>
 80027d8:	4b80      	ldr	r3, [pc, #512]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a7f      	ldr	r2, [pc, #508]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e02e      	b.n	8002844 <HAL_RCC_OscConfig+0xd4>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x98>
 80027ee:	4b7b      	ldr	r3, [pc, #492]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a7a      	ldr	r2, [pc, #488]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b78      	ldr	r3, [pc, #480]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a77      	ldr	r2, [pc, #476]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e01d      	b.n	8002844 <HAL_RCC_OscConfig+0xd4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0xbc>
 8002812:	4b72      	ldr	r3, [pc, #456]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a71      	ldr	r2, [pc, #452]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b6f      	ldr	r3, [pc, #444]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6e      	ldr	r2, [pc, #440]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0xd4>
 800282c:	4b6b      	ldr	r3, [pc, #428]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a6a      	ldr	r2, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b68      	ldr	r3, [pc, #416]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a67      	ldr	r2, [pc, #412]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff fbd2 	bl	8001ff4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff fbce 	bl	8001ff4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1fa      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b5d      	ldr	r3, [pc, #372]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0xe4>
 8002872:	e014      	b.n	800289e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fbbe 	bl	8001ff4 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff fbba 	bl	8001ff4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e1e6      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	4b53      	ldr	r3, [pc, #332]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x10c>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d063      	beq.n	8002972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028aa:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028b6:	4b49      	ldr	r3, [pc, #292]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11c      	bne.n	80028fc <HAL_RCC_OscConfig+0x18c>
 80028c2:	4b46      	ldr	r3, [pc, #280]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d116      	bne.n	80028fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	4b43      	ldr	r3, [pc, #268]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_RCC_OscConfig+0x176>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e1ba      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4939      	ldr	r1, [pc, #228]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	e03a      	b.n	8002972 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002904:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <HAL_RCC_OscConfig+0x270>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7ff fb73 	bl	8001ff4 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002912:	f7ff fb6f 	bl	8001ff4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e19b      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4927      	ldr	r1, [pc, #156]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_RCC_OscConfig+0x270>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff fb52 	bl	8001ff4 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002954:	f7ff fb4e 	bl	8001ff4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e17a      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d03a      	beq.n	80029f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d019      	beq.n	80029ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7ff fb32 	bl	8001ff4 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7ff fb2e 	bl	8001ff4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e15a      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_RCC_OscConfig+0x26c>)
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029b2:	2001      	movs	r0, #1
 80029b4:	f000 fad8 	bl	8002f68 <RCC_Delay>
 80029b8:	e01c      	b.n	80029f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_RCC_OscConfig+0x274>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c0:	f7ff fb18 	bl	8001ff4 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c6:	e00f      	b.n	80029e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7ff fb14 	bl	8001ff4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d908      	bls.n	80029e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e140      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	42420000 	.word	0x42420000
 80029e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	4b9e      	ldr	r3, [pc, #632]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e9      	bne.n	80029c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a6 	beq.w	8002b4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a06:	4b97      	ldr	r3, [pc, #604]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	4b94      	ldr	r3, [pc, #592]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	4a93      	ldr	r2, [pc, #588]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	61d3      	str	r3, [r2, #28]
 8002a1e:	4b91      	ldr	r3, [pc, #580]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	4b8e      	ldr	r3, [pc, #568]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3a:	4b8b      	ldr	r3, [pc, #556]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a8a      	ldr	r2, [pc, #552]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a46:	f7ff fad5 	bl	8001ff4 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7ff fad1 	bl	8001ff4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	; 0x64
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e0fd      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	4b81      	ldr	r3, [pc, #516]	; (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x312>
 8002a74:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	4a7a      	ldr	r2, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6213      	str	r3, [r2, #32]
 8002a80:	e02d      	b.n	8002ade <HAL_RCC_OscConfig+0x36e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x334>
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a75      	ldr	r2, [pc, #468]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6213      	str	r3, [r2, #32]
 8002a96:	4b73      	ldr	r3, [pc, #460]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a72      	ldr	r2, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	6213      	str	r3, [r2, #32]
 8002aa2:	e01c      	b.n	8002ade <HAL_RCC_OscConfig+0x36e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x356>
 8002aac:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4a6c      	ldr	r2, [pc, #432]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	f043 0304 	orr.w	r3, r3, #4
 8002ab6:	6213      	str	r3, [r2, #32]
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4a69      	ldr	r2, [pc, #420]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6213      	str	r3, [r2, #32]
 8002ac4:	e00b      	b.n	8002ade <HAL_RCC_OscConfig+0x36e>
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a66      	ldr	r2, [pc, #408]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6213      	str	r3, [r2, #32]
 8002ad2:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4a63      	ldr	r2, [pc, #396]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d015      	beq.n	8002b12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae6:	f7ff fa85 	bl	8001ff4 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7ff fa81 	bl	8001ff4 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e0ab      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b04:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ee      	beq.n	8002aee <HAL_RCC_OscConfig+0x37e>
 8002b10:	e014      	b.n	8002b3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7ff fa6f 	bl	8001ff4 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1a:	f7ff fa6b 	bl	8001ff4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e095      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ee      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d105      	bne.n	8002b4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b42:	4b48      	ldr	r3, [pc, #288]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4a47      	ldr	r2, [pc, #284]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8081 	beq.w	8002c5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b58:	4b42      	ldr	r3, [pc, #264]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d061      	beq.n	8002c28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d146      	bne.n	8002bfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6c:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <HAL_RCC_OscConfig+0x4fc>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7ff fa3f 	bl	8001ff4 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7ff fa3b 	bl	8001ff4 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e067      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ba2:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	492d      	ldr	r1, [pc, #180]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a19      	ldr	r1, [r3, #32]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	4927      	ldr	r1, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x4fc>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7ff fa0f 	bl	8001ff4 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bda:	f7ff fa0b 	bl	8001ff4 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e037      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x46a>
 8002bf8:	e02f      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <HAL_RCC_OscConfig+0x4fc>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff f9f8 	bl	8001ff4 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7ff f9f4 	bl	8001ff4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e020      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x498>
 8002c26:	e018      	b.n	8002c5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e013      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_OscConfig+0x4f4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d001      	beq.n	8002c5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	42420060 	.word	0x42420060

08002c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0d0      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d910      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b67      	ldr	r3, [pc, #412]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4965      	ldr	r1, [pc, #404]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0b8      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ccc:	4b59      	ldr	r3, [pc, #356]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a58      	ldr	r2, [pc, #352]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce4:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf0:	4b50      	ldr	r3, [pc, #320]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	494d      	ldr	r1, [pc, #308]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d040      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d115      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e07f      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e073      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e06b      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4e:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4936      	ldr	r1, [pc, #216]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d60:	f7ff f948 	bl	8001ff4 <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7ff f944 	bl	8001ff4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e053      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 020c 	and.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1eb      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d90:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d210      	bcs.n	8002dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 0207 	bic.w	r2, r3, #7
 8002da6:	4922      	ldr	r1, [pc, #136]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e032      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4916      	ldr	r1, [pc, #88]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	490e      	ldr	r1, [pc, #56]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dfe:	f000 f821 	bl	8002e44 <HAL_RCC_GetSysClockFreq>
 8002e02:	4602      	mov	r2, r0
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	490a      	ldr	r1, [pc, #40]	; (8002e38 <HAL_RCC_ClockConfig+0x1c8>)
 8002e10:	5ccb      	ldrb	r3, [r1, r3]
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x1cc>)
 8002e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_ClockConfig+0x1d0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff f8a6 	bl	8001f70 <HAL_InitTick>

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40022000 	.word	0x40022000
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08009f7c 	.word	0x08009f7c
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	20000004 	.word	0x20000004

08002e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e44:	b490      	push	{r4, r7}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e4c:	1d3c      	adds	r4, r7, #4
 8002e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e54:	f240 2301 	movw	r3, #513	; 0x201
 8002e58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e6e:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x40>
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x46>
 8002e82:	e02d      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e86:	623b      	str	r3, [r7, #32]
      break;
 8002e88:	e02d      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	0c9b      	lsrs	r3, r3, #18
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e96:	4413      	add	r3, r2
 8002e98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d013      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	0c5b      	lsrs	r3, r3, #17
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ebc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec2:	fb02 f203 	mul.w	r2, r2, r3
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ece:	e004      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	623b      	str	r3, [r7, #32]
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee2:	623b      	str	r3, [r7, #32]
      break;
 8002ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3728      	adds	r7, #40	; 0x28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc90      	pop	{r4, r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	08009ee8 	.word	0x08009ee8
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	007a1200 	.word	0x007a1200
 8002f00:	003d0900 	.word	0x003d0900

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b02      	ldr	r3, [pc, #8]	; (8002f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	20000000 	.word	0x20000000

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	f7ff fff2 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	; (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08009f8c 	.word	0x08009f8c

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f44:	f7ff ffde 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0adb      	lsrs	r3, r3, #11
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	08009f8c 	.word	0x08009f8c

08002f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <RCC_Delay+0x34>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <RCC_Delay+0x38>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0a5b      	lsrs	r3, r3, #9
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f84:	bf00      	nop
  }
  while (Delay --);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e5a      	subs	r2, r3, #1
 8002f8a:	60fa      	str	r2, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f9      	bne.n	8002f84 <RCC_Delay+0x1c>
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	10624dd3 	.word	0x10624dd3

08002fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e041      	b.n	800303a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe fdfe 	bl	8001bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f000 fc1c 	bl	8003820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d001      	beq.n	800305c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e032      	b.n	80030c2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_TIM_Base_Start+0x88>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_TIM_Base_Start+0x48>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003076:	d009      	beq.n	800308c <HAL_TIM_Base_Start+0x48>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <HAL_TIM_Base_Start+0x8c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_TIM_Base_Start+0x48>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <HAL_TIM_Base_Start+0x90>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d111      	bne.n	80030b0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b06      	cmp	r3, #6
 800309c:	d010      	beq.n	80030c0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	e007      	b.n	80030c0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800

080030d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e041      	b.n	800316e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe fd0a 	bl	8001b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f000 fb82 	bl	8003820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start+0x24>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e022      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d109      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x3e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e015      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d109      	bne.n	80031d0 <HAL_TIM_PWM_Start+0x58>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e008      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e05e      	b.n	80032a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Start+0x82>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f8:	e013      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d104      	bne.n	800320a <HAL_TIM_PWM_Start+0x92>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003208:	e00b      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d104      	bne.n	800321a <HAL_TIM_PWM_Start+0xa2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003218:	e003      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fd78 	bl	8003d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <HAL_TIM_PWM_Start+0x138>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d107      	bne.n	800324a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_TIM_PWM_Start+0x138>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_TIM_PWM_Start+0xfa>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d009      	beq.n	8003272 <HAL_TIM_PWM_Start+0xfa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <HAL_TIM_PWM_Start+0x13c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_TIM_PWM_Start+0xfa>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <HAL_TIM_PWM_Start+0x140>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b06      	cmp	r3, #6
 8003282:	d010      	beq.n	80032a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	e007      	b.n	80032a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800

080032bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e093      	b.n	80033f8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fe fc33 	bl	8001b50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003300:	f023 0307 	bic.w	r3, r3, #7
 8003304:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f000 fa85 	bl	8003820 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	4313      	orrs	r3, r2
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800335c:	f023 030c 	bic.w	r3, r3, #12
 8003360:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	4313      	orrs	r3, r2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	011a      	lsls	r2, r3, #4
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	031b      	lsls	r3, r3, #12
 800338c:	4313      	orrs	r3, r2
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	4313      	orrs	r3, r2
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003410:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003418:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003420:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003428:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d110      	bne.n	8003452 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003436:	7b7b      	ldrb	r3, [r7, #13]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d001      	beq.n	8003440 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e069      	b.n	8003514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003450:	e031      	b.n	80034b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b04      	cmp	r3, #4
 8003456:	d110      	bne.n	800347a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003458:	7bbb      	ldrb	r3, [r7, #14]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800345e:	7b3b      	ldrb	r3, [r7, #12]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d001      	beq.n	8003468 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e055      	b.n	8003514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003478:	e01d      	b.n	80034b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d108      	bne.n	8003492 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003486:	7b7b      	ldrb	r3, [r7, #13]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d102      	bne.n	8003492 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800348c:	7b3b      	ldrb	r3, [r7, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d001      	beq.n	8003496 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e03e      	b.n	8003514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_TIM_Encoder_Start+0xc4>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d008      	beq.n	80034d4 <HAL_TIM_Encoder_Start+0xd4>
 80034c2:	e00f      	b.n	80034e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fc27 	bl	8003d20 <TIM_CCxChannelCmd>
      break;
 80034d2:	e016      	b.n	8003502 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	2104      	movs	r1, #4
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fc1f 	bl	8003d20 <TIM_CCxChannelCmd>
      break;
 80034e2:	e00e      	b.n	8003502 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fc17 	bl	8003d20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2201      	movs	r2, #1
 80034f8:	2104      	movs	r1, #4
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fc10 	bl	8003d20 <TIM_CCxChannelCmd>
      break;
 8003500:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003532:	2302      	movs	r3, #2
 8003534:	e0ac      	b.n	8003690 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b0c      	cmp	r3, #12
 8003542:	f200 809f 	bhi.w	8003684 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003546:	a201      	add	r2, pc, #4	; (adr r2, 800354c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	08003581 	.word	0x08003581
 8003550:	08003685 	.word	0x08003685
 8003554:	08003685 	.word	0x08003685
 8003558:	08003685 	.word	0x08003685
 800355c:	080035c1 	.word	0x080035c1
 8003560:	08003685 	.word	0x08003685
 8003564:	08003685 	.word	0x08003685
 8003568:	08003685 	.word	0x08003685
 800356c:	08003603 	.word	0x08003603
 8003570:	08003685 	.word	0x08003685
 8003574:	08003685 	.word	0x08003685
 8003578:	08003685 	.word	0x08003685
 800357c:	08003643 	.word	0x08003643
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f9ac 	bl	80038e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0208 	orr.w	r2, r2, #8
 800359a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6999      	ldr	r1, [r3, #24]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	619a      	str	r2, [r3, #24]
      break;
 80035be:	e062      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f9f2 	bl	80039b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6999      	ldr	r1, [r3, #24]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	021a      	lsls	r2, r3, #8
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	619a      	str	r2, [r3, #24]
      break;
 8003600:	e041      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fa3b 	bl	8003a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0208 	orr.w	r2, r2, #8
 800361c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0204 	bic.w	r2, r2, #4
 800362c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69d9      	ldr	r1, [r3, #28]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	61da      	str	r2, [r3, #28]
      break;
 8003640:	e021      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fa85 	bl	8003b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800365c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69d9      	ldr	r1, [r3, #28]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	021a      	lsls	r2, r3, #8
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	61da      	str	r2, [r3, #28]
      break;
 8003682:	e000      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIM_ConfigClockSource+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e0b3      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x180>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e8:	d03e      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0xd0>
 80036ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ee:	f200 8087 	bhi.w	8003800 <HAL_TIM_ConfigClockSource+0x168>
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f6:	f000 8085 	beq.w	8003804 <HAL_TIM_ConfigClockSource+0x16c>
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fe:	d87f      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x168>
 8003700:	2b70      	cmp	r3, #112	; 0x70
 8003702:	d01a      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xa2>
 8003704:	2b70      	cmp	r3, #112	; 0x70
 8003706:	d87b      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x168>
 8003708:	2b60      	cmp	r3, #96	; 0x60
 800370a:	d050      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0x116>
 800370c:	2b60      	cmp	r3, #96	; 0x60
 800370e:	d877      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x168>
 8003710:	2b50      	cmp	r3, #80	; 0x50
 8003712:	d03c      	beq.n	800378e <HAL_TIM_ConfigClockSource+0xf6>
 8003714:	2b50      	cmp	r3, #80	; 0x50
 8003716:	d873      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x168>
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d058      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0x136>
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d86f      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x168>
 8003720:	2b30      	cmp	r3, #48	; 0x30
 8003722:	d064      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x156>
 8003724:	2b30      	cmp	r3, #48	; 0x30
 8003726:	d86b      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x168>
 8003728:	2b20      	cmp	r3, #32
 800372a:	d060      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x156>
 800372c:	2b20      	cmp	r3, #32
 800372e:	d867      	bhi.n	8003800 <HAL_TIM_ConfigClockSource+0x168>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05c      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x156>
 8003734:	2b10      	cmp	r3, #16
 8003736:	d05a      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003738:	e062      	b.n	8003800 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6899      	ldr	r1, [r3, #8]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f000 faca 	bl	8003ce2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800375c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	609a      	str	r2, [r3, #8]
      break;
 8003766:	e04e      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6899      	ldr	r1, [r3, #8]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f000 fab3 	bl	8003ce2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378a:	609a      	str	r2, [r3, #8]
      break;
 800378c:	e03b      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	f000 fa2a 	bl	8003bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2150      	movs	r1, #80	; 0x50
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fa81 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 80037ac:	e02b      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f000 fa48 	bl	8003c50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2160      	movs	r1, #96	; 0x60
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fa71 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 80037cc:	e01b      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	461a      	mov	r2, r3
 80037dc:	f000 fa0a 	bl	8003bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2140      	movs	r1, #64	; 0x40
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fa61 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 80037ec:	e00b      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f000 fa58 	bl	8003cae <TIM_ITRx_SetConfig>
        break;
 80037fe:	e002      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003804:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <TIM_Base_SetConfig+0xb8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00b      	beq.n	8003850 <TIM_Base_SetConfig+0x30>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383e:	d007      	beq.n	8003850 <TIM_Base_SetConfig+0x30>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a26      	ldr	r2, [pc, #152]	; (80038dc <TIM_Base_SetConfig+0xbc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_Base_SetConfig+0x30>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a25      	ldr	r2, [pc, #148]	; (80038e0 <TIM_Base_SetConfig+0xc0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d108      	bne.n	8003862 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <TIM_Base_SetConfig+0xb8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00b      	beq.n	8003882 <TIM_Base_SetConfig+0x62>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003870:	d007      	beq.n	8003882 <TIM_Base_SetConfig+0x62>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <TIM_Base_SetConfig+0xbc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_Base_SetConfig+0x62>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <TIM_Base_SetConfig+0xc0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d108      	bne.n	8003894 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <TIM_Base_SetConfig+0xb8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d103      	bne.n	80038c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	615a      	str	r2, [r3, #20]
}
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40000400 	.word	0x40000400
 80038e0:	40000800 	.word	0x40000800

080038e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f023 0302 	bic.w	r3, r3, #2
 800392c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <TIM_OC1_SetConfig+0xc8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d10c      	bne.n	800395a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 0308 	bic.w	r3, r3, #8
 8003946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f023 0304 	bic.w	r3, r3, #4
 8003958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a13      	ldr	r2, [pc, #76]	; (80039ac <TIM_OC1_SetConfig+0xc8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d111      	bne.n	8003986 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	621a      	str	r2, [r3, #32]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40012c00 	.word	0x40012c00

080039b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0210 	bic.w	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f023 0320 	bic.w	r3, r3, #32
 80039fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <TIM_OC2_SetConfig+0xd0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10d      	bne.n	8003a2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <TIM_OC2_SetConfig+0xd0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d113      	bne.n	8003a5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	40012c00 	.word	0x40012c00

08003a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <TIM_OC3_SetConfig+0xd0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10d      	bne.n	8003afe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <TIM_OC3_SetConfig+0xd0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d113      	bne.n	8003b2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	621a      	str	r2, [r3, #32]
}
 8003b48:	bf00      	nop
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40012c00 	.word	0x40012c00

08003b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	031b      	lsls	r3, r3, #12
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <TIM_OC4_SetConfig+0x98>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d109      	bne.n	8003bcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	019b      	lsls	r3, r3, #6
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	40012c00 	.word	0x40012c00

08003bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f023 0201 	bic.w	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f023 030a 	bic.w	r3, r3, #10
 8003c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f023 0210 	bic.w	r2, r3, #16
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	031b      	lsls	r3, r3, #12
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	621a      	str	r2, [r3, #32]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f043 0307 	orr.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b087      	sub	sp, #28
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	021a      	lsls	r2, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2201      	movs	r2, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	fa01 f303 	lsl.w	r3, r1, r3
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e046      	b.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a10      	ldr	r2, [pc, #64]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10c      	bne.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800

08003e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e03f      	b.n	8003eb6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd ff0c 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	; 0x24
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fc85 	bl	8004778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b08a      	sub	sp, #40	; 0x28
 8003ec2:	af02      	add	r7, sp, #8
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d17c      	bne.n	8003fd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_UART_Transmit+0x2c>
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e075      	b.n	8003fda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_UART_Transmit+0x3e>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e06e      	b.n	8003fda <HAL_UART_Transmit+0x11c>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2221      	movs	r2, #33	; 0x21
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f12:	f7fe f86f 	bl	8001ff4 <HAL_GetTick>
 8003f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d108      	bne.n	8003f40 <HAL_UART_Transmit+0x82>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d104      	bne.n	8003f40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	e003      	b.n	8003f48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f50:	e02a      	b.n	8003fa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2180      	movs	r1, #128	; 0x80
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fa38 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e036      	b.n	8003fda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	3302      	adds	r3, #2
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	e007      	b.n	8003f9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3301      	adds	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1cf      	bne.n	8003f52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fa08 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e006      	b.n	8003fda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	4613      	mov	r3, r2
 8003fee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d11d      	bne.n	8004038 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_UART_Receive_IT+0x26>
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e016      	b.n	800403a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_UART_Receive_IT+0x38>
 8004016:	2302      	movs	r3, #2
 8004018:	e00f      	b.n	800403a <HAL_UART_Receive_IT+0x58>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	461a      	mov	r2, r3
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa19 	bl	8004466 <UART_Start_Receive_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	e000      	b.n	800403a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10d      	bne.n	8004096 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_UART_IRQHandler+0x52>
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fac9 	bl	8004626 <UART_Receive_IT>
      return;
 8004094:	e17b      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80b1 	beq.w	8004200 <HAL_UART_IRQHandler+0x1bc>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <HAL_UART_IRQHandler+0x70>
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80a6 	beq.w	8004200 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_UART_IRQHandler+0x90>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	f043 0201 	orr.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_UART_IRQHandler+0xb0>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	f043 0202 	orr.w	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_UART_IRQHandler+0xd0>
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f043 0204 	orr.w	r2, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00f      	beq.n	800413e <HAL_UART_IRQHandler+0xfa>
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d104      	bne.n	8004132 <HAL_UART_IRQHandler+0xee>
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f043 0208 	orr.w	r2, r3, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 811e 	beq.w	8004384 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <HAL_UART_IRQHandler+0x11e>
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fa62 	bl	8004626 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_UART_IRQHandler+0x146>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d031      	beq.n	80041ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9a4 	bl	80044d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d023      	beq.n	80041e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d013      	beq.n	80041de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	4a76      	ldr	r2, [pc, #472]	; (8004394 <HAL_UART_IRQHandler+0x350>)
 80041bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe f892 	bl	80022ec <HAL_DMA_Abort_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041d8:	4610      	mov	r0, r2
 80041da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	e00e      	b.n	80041fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8e3 	bl	80043aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00a      	b.n	80041fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f8df 	bl	80043aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e006      	b.n	80041fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8db 	bl	80043aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041fa:	e0c3      	b.n	8004384 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	bf00      	nop
    return;
 80041fe:	e0c1      	b.n	8004384 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	f040 80a1 	bne.w	800434c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 809b 	beq.w	800434c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8095 	beq.w	800434c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04e      	beq.n	80042e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004250:	8a3b      	ldrh	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8098 	beq.w	8004388 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800425c:	8a3a      	ldrh	r2, [r7, #16]
 800425e:	429a      	cmp	r2, r3
 8004260:	f080 8092 	bcs.w	8004388 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8a3a      	ldrh	r2, [r7, #16]
 8004268:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b20      	cmp	r3, #32
 8004272:	d02b      	beq.n	80042cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004282:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0210 	bic.w	r2, r2, #16
 80042c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fd ffd5 	bl	8002276 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4619      	mov	r1, r3
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f86d 	bl	80043bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042e2:	e051      	b.n	8004388 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d047      	beq.n	800438c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80042fc:	8a7b      	ldrh	r3, [r7, #18]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d044      	beq.n	800438c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004310:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0210 	bic.w	r2, r2, #16
 800433e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004340:	8a7b      	ldrh	r3, [r7, #18]
 8004342:	4619      	mov	r1, r3
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f839 	bl	80043bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800434a:	e01f      	b.n	800438c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_UART_IRQHandler+0x324>
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8f9 	bl	8004558 <UART_Transmit_IT>
    return;
 8004366:	e012      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <HAL_UART_IRQHandler+0x34a>
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f93a 	bl	80045f6 <UART_EndTransmit_IT>
    return;
 8004382:	e004      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
    return;
 8004384:	bf00      	nop
 8004386:	e002      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
      return;
 8004388:	bf00      	nop
 800438a:	e000      	b.n	800438e <HAL_UART_IRQHandler+0x34a>
      return;
 800438c:	bf00      	nop
  }
}
 800438e:	3728      	adds	r7, #40	; 0x28
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	08004531 	.word	0x08004531

08004398 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e2:	e02c      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	d028      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0x30>
 80043f2:	f7fd fdff 	bl	8001ff4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d21d      	bcs.n	800443e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004410:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695a      	ldr	r2, [r3, #20]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e00f      	b.n	800445e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	429a      	cmp	r2, r3
 800445a:	d0c3      	beq.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2222      	movs	r2, #34	; 0x22
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044aa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0220 	orr.w	r2, r2, #32
 80044ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0210 	bic.w	r2, r2, #16
 8004516:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff ff2d 	bl	80043aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b21      	cmp	r3, #33	; 0x21
 800456a:	d13e      	bne.n	80045ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	d114      	bne.n	80045a0 <UART_Transmit_IT+0x48>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d110      	bne.n	80045a0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004592:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	1c9a      	adds	r2, r3, #2
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]
 800459e:	e008      	b.n	80045b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	1c59      	adds	r1, r3, #1
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6211      	str	r1, [r2, #32]
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	4619      	mov	r1, r3
 80045c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10f      	bne.n	80045e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff febe 	bl	8004398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b22      	cmp	r3, #34	; 0x22
 8004638:	f040 8099 	bne.w	800476e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004644:	d117      	bne.n	8004676 <UART_Receive_IT+0x50>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d113      	bne.n	8004676 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004664:	b29a      	uxth	r2, r3
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	1c9a      	adds	r2, r3, #2
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
 8004674:	e026      	b.n	80046c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004688:	d007      	beq.n	800469a <UART_Receive_IT+0x74>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <UART_Receive_IT+0x82>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e008      	b.n	80046ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4619      	mov	r1, r3
 80046d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d148      	bne.n	800476a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0220 	bic.w	r2, r2, #32
 80046e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	2b01      	cmp	r3, #1
 8004716:	d123      	bne.n	8004760 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0210 	bic.w	r2, r2, #16
 800472c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b10      	cmp	r3, #16
 800473a:	d10a      	bne.n	8004752 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fe2f 	bl	80043bc <HAL_UARTEx_RxEventCallback>
 800475e:	e002      	b.n	8004766 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fd f923 	bl	80019ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e002      	b.n	8004770 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800476e:	2302      	movs	r3, #2
  }
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047b2:	f023 030c 	bic.w	r3, r3, #12
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	68b9      	ldr	r1, [r7, #8]
 80047bc:	430b      	orrs	r3, r1
 80047be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2c      	ldr	r2, [pc, #176]	; (800488c <UART_SetConfig+0x114>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d103      	bne.n	80047e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047e0:	f7fe fbae 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	e002      	b.n	80047ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047e8:	f7fe fb96 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 80047ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009a      	lsls	r2, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	4a22      	ldr	r2, [pc, #136]	; (8004890 <UART_SetConfig+0x118>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	0119      	lsls	r1, r3, #4
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009a      	lsls	r2, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	fbb2 f2f3 	udiv	r2, r2, r3
 8004824:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <UART_SetConfig+0x118>)
 8004826:	fba3 0302 	umull	r0, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	2064      	movs	r0, #100	; 0x64
 800482e:	fb00 f303 	mul.w	r3, r0, r3
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	3332      	adds	r3, #50	; 0x32
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <UART_SetConfig+0x118>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004844:	4419      	add	r1, r3
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	fbb2 f2f3 	udiv	r2, r2, r3
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <UART_SetConfig+0x118>)
 800485e:	fba3 0302 	umull	r0, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2064      	movs	r0, #100	; 0x64
 8004866:	fb00 f303 	mul.w	r3, r0, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	3332      	adds	r3, #50	; 0x32
 8004870:	4a07      	ldr	r2, [pc, #28]	; (8004890 <UART_SetConfig+0x118>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	f003 020f 	and.w	r2, r3, #15
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	440a      	add	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40013800 	.word	0x40013800
 8004890:	51eb851f 	.word	0x51eb851f

08004894 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800489a:	f3ef 8305 	mrs	r3, IPSR
 800489e:	60bb      	str	r3, [r7, #8]
  return(result);
 80048a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a6:	f3ef 8310 	mrs	r3, PRIMASK
 80048aa:	607b      	str	r3, [r7, #4]
  return(result);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <osKernelInitialize+0x32>
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <osKernelInitialize+0x60>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d109      	bne.n	80048ce <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048ba:	f3ef 8311 	mrs	r3, BASEPRI
 80048be:	603b      	str	r3, [r7, #0]
  return(result);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80048c6:	f06f 0305 	mvn.w	r3, #5
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e00c      	b.n	80048e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <osKernelInitialize+0x60>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d105      	bne.n	80048e2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <osKernelInitialize+0x60>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e002      	b.n	80048e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048e8:	68fb      	ldr	r3, [r7, #12]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	2000020c 	.word	0x2000020c

080048f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fe:	f3ef 8305 	mrs	r3, IPSR
 8004902:	60bb      	str	r3, [r7, #8]
  return(result);
 8004904:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10f      	bne.n	800492a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490a:	f3ef 8310 	mrs	r3, PRIMASK
 800490e:	607b      	str	r3, [r7, #4]
  return(result);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <osKernelStart+0x32>
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <osKernelStart+0x64>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d109      	bne.n	8004932 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800491e:	f3ef 8311 	mrs	r3, BASEPRI
 8004922:	603b      	str	r3, [r7, #0]
  return(result);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <osKernelStart+0x3a>
    stat = osErrorISR;
 800492a:	f06f 0305 	mvn.w	r3, #5
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e00e      	b.n	8004950 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <osKernelStart+0x64>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d107      	bne.n	800494a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <osKernelStart+0x64>)
 800493c:	2202      	movs	r2, #2
 800493e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004940:	f001 f8f0 	bl	8005b24 <vTaskStartScheduler>
      stat = osOK;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e002      	b.n	8004950 <osKernelStart+0x58>
    } else {
      stat = osError;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004950:	68fb      	ldr	r3, [r7, #12]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	2000020c 	.word	0x2000020c

08004960 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004966:	f3ef 8305 	mrs	r3, IPSR
 800496a:	60bb      	str	r3, [r7, #8]
  return(result);
 800496c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004972:	f3ef 8310 	mrs	r3, PRIMASK
 8004976:	607b      	str	r3, [r7, #4]
  return(result);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <osKernelGetTickCount+0x32>
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <osKernelGetTickCount+0x4c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d109      	bne.n	800499a <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004986:	f3ef 8311 	mrs	r3, BASEPRI
 800498a:	603b      	str	r3, [r7, #0]
  return(result);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004992:	f001 f9e7 	bl	8005d64 <xTaskGetTickCountFromISR>
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	e002      	b.n	80049a0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800499a:	f001 f9d5 	bl	8005d48 <xTaskGetTickCount>
 800499e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80049a0:	68fb      	ldr	r3, [r7, #12]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	2000020c 	.word	0x2000020c

080049b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b092      	sub	sp, #72	; 0x48
 80049b4:	af04      	add	r7, sp, #16
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c0:	f3ef 8305 	mrs	r3, IPSR
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f040 8094 	bne.w	8004af6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ce:	f3ef 8310 	mrs	r3, PRIMASK
 80049d2:	623b      	str	r3, [r7, #32]
  return(result);
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f040 808d 	bne.w	8004af6 <osThreadNew+0x146>
 80049dc:	4b48      	ldr	r3, [pc, #288]	; (8004b00 <osThreadNew+0x150>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d106      	bne.n	80049f2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049e4:	f3ef 8311 	mrs	r3, BASEPRI
 80049e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 8082 	bne.w	8004af6 <osThreadNew+0x146>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d07e      	beq.n	8004af6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80049fc:	2318      	movs	r3, #24
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004a00:	2300      	movs	r3, #0
 8004a02:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004a04:	f107 031b 	add.w	r3, r7, #27
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d045      	beq.n	8004aa2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <osThreadNew+0x74>
        name = attr->name;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <osThreadNew+0x9a>
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2b38      	cmp	r3, #56	; 0x38
 8004a3c:	d805      	bhi.n	8004a4a <osThreadNew+0x9a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <osThreadNew+0x9e>
        return (NULL);
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e054      	b.n	8004af8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00e      	beq.n	8004a84 <osThreadNew+0xd4>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b5b      	cmp	r3, #91	; 0x5b
 8004a6c:	d90a      	bls.n	8004a84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d006      	beq.n	8004a84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <osThreadNew+0xd4>
        mem = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a82:	e010      	b.n	8004aa6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10c      	bne.n	8004aa6 <osThreadNew+0xf6>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <osThreadNew+0xf6>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <osThreadNew+0xf6>
          mem = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa0:	e001      	b.n	8004aa6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d110      	bne.n	8004ace <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ab4:	9202      	str	r2, [sp, #8]
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fe18 	bl	80056f8 <xTaskCreateStatic>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e013      	b.n	8004af6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d110      	bne.n	8004af6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f107 0314 	add.w	r3, r7, #20
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fe62 	bl	80057b0 <xTaskCreate>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d001      	beq.n	8004af6 <osThreadNew+0x146>
          hTask = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004af6:	697b      	ldr	r3, [r7, #20]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3738      	adds	r7, #56	; 0x38
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	2000020c 	.word	0x2000020c

08004b04 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b0c:	f3ef 8305 	mrs	r3, IPSR
 8004b10:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b12:	69bb      	ldr	r3, [r7, #24]
  TickType_t tcnt;
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10f      	bne.n	8004b38 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b18:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <osDelayUntil+0x34>
 8004b24:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <osDelayUntil+0x64>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d109      	bne.n	8004b40 <osDelayUntil+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b30:	613b      	str	r3, [r7, #16]
  return(result);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8004b38:	f06f 0305 	mvn.w	r3, #5
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	e00e      	b.n	8004b5e <osDelayUntil+0x5a>
  }
  else {
    stat = osOK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8004b44:	f001 f900 	bl	8005d48 <xTaskGetTickCount>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]

    vTaskDelayUntil (&tcnt, (TickType_t)(ticks - tcnt));
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	f107 030c 	add.w	r3, r7, #12
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 ff65 	bl	8005a28 <vTaskDelayUntil>
  }

  return (stat);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	2000020c 	.word	0x2000020c

08004b6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a06      	ldr	r2, [pc, #24]	; (8004b94 <vApplicationGetIdleTaskMemory+0x28>)
 8004b7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2280      	movs	r2, #128	; 0x80
 8004b88:	601a      	str	r2, [r3, #0]
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	20000210 	.word	0x20000210
 8004b98:	2000026c 	.word	0x2000026c

08004b9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4a06      	ldr	r2, [pc, #24]	; (8004bcc <vApplicationGetTimerTaskMemory+0x30>)
 8004bb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	2000046c 	.word	0x2000046c
 8004bcc:	200004c8 	.word	0x200004c8

08004bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f103 0208 	add.w	r2, r3, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f103 0208 	add.w	r2, r3, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f103 0208 	add.w	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d103      	bne.n	8004c8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	e00c      	b.n	8004ca6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e002      	b.n	8004c9a <vListInsert+0x2e>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d2f6      	bcs.n	8004c94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6892      	ldr	r2, [r2, #8]
 8004cf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6852      	ldr	r2, [r2, #4]
 8004cfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d103      	bne.n	8004d10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	1e5a      	subs	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
	...

08004d30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d5a:	f002 f827 	bl	8006dac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	441a      	add	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	441a      	add	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	22ff      	movs	r2, #255	; 0xff
 8004d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	22ff      	movs	r2, #255	; 0xff
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d114      	bne.n	8004dda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01a      	beq.n	8004dee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3310      	adds	r3, #16
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f001 f94d 	bl	800605c <xTaskRemoveFromEventList>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d012      	beq.n	8004dee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <xQueueGenericReset+0xcc>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	e009      	b.n	8004dee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3310      	adds	r3, #16
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fef6 	bl	8004bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3324      	adds	r3, #36	; 0x24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fef1 	bl	8004bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dee:	f002 f80d 	bl	8006e0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004df2:	2301      	movs	r3, #1
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08e      	sub	sp, #56	; 0x38
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <xQueueGenericCreateStatic+0x52>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <xQueueGenericCreateStatic+0x56>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <xQueueGenericCreateStatic+0x58>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	623b      	str	r3, [r7, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <xQueueGenericCreateStatic+0x7e>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <xQueueGenericCreateStatic+0x82>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <xQueueGenericCreateStatic+0x84>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	61fb      	str	r3, [r7, #28]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e9e:	2350      	movs	r3, #80	; 0x50
 8004ea0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b50      	cmp	r3, #80	; 0x50
 8004ea6:	d00a      	beq.n	8004ebe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	61bb      	str	r3, [r7, #24]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00d      	beq.n	8004ee4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ed0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f805 	bl	8004eee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3730      	adds	r7, #48	; 0x30
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e002      	b.n	8004f10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	69b8      	ldr	r0, [r7, #24]
 8004f20:	f7ff ff06 	bl	8004d30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f2c:	bf00      	nop
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08e      	sub	sp, #56	; 0x38
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f42:	2300      	movs	r3, #0
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <xQueueGenericSend+0x32>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <xQueueGenericSend+0x40>
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <xQueueGenericSend+0x44>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <xQueueGenericSend+0x46>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <xQueueGenericSend+0x60>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d103      	bne.n	8004fa2 <xQueueGenericSend+0x6e>
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <xQueueGenericSend+0x72>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <xQueueGenericSend+0x74>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	623b      	str	r3, [r7, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fc2:	f001 fa0d 	bl	80063e0 <xTaskGetSchedulerState>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d102      	bne.n	8004fd2 <xQueueGenericSend+0x9e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <xQueueGenericSend+0xa2>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <xQueueGenericSend+0xa4>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <xQueueGenericSend+0xbe>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	61fb      	str	r3, [r7, #28]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ff2:	f001 fedb 	bl	8006dac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d302      	bcc.n	8005008 <xQueueGenericSend+0xd4>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d129      	bne.n	800505c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800500e:	f000 fa07 	bl	8005420 <prvCopyDataToQueue>
 8005012:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	d010      	beq.n	800503e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	4618      	mov	r0, r3
 8005022:	f001 f81b 	bl	800605c <xTaskRemoveFromEventList>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d013      	beq.n	8005054 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800502c:	4b3f      	ldr	r3, [pc, #252]	; (800512c <xQueueGenericSend+0x1f8>)
 800502e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	e00a      	b.n	8005054 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005044:	4b39      	ldr	r3, [pc, #228]	; (800512c <xQueueGenericSend+0x1f8>)
 8005046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005054:	f001 feda 	bl	8006e0c <vPortExitCritical>
				return pdPASS;
 8005058:	2301      	movs	r3, #1
 800505a:	e063      	b.n	8005124 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005062:	f001 fed3 	bl	8006e0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005066:	2300      	movs	r3, #0
 8005068:	e05c      	b.n	8005124 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	4618      	mov	r0, r3
 8005076:	f001 f855 	bl	8006124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800507a:	2301      	movs	r3, #1
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800507e:	f001 fec5 	bl	8006e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005082:	f000 fdb5 	bl	8005bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005086:	f001 fe91 	bl	8006dac <vPortEnterCritical>
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005090:	b25b      	sxtb	r3, r3
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d103      	bne.n	80050a0 <xQueueGenericSend+0x16c>
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050a6:	b25b      	sxtb	r3, r3
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ac:	d103      	bne.n	80050b6 <xQueueGenericSend+0x182>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050b6:	f001 fea9 	bl	8006e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050ba:	1d3a      	adds	r2, r7, #4
 80050bc:	f107 0314 	add.w	r3, r7, #20
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 f844 	bl	8006150 <xTaskCheckForTimeOut>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d124      	bne.n	8005118 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050d0:	f000 fa9e 	bl	8005610 <prvIsQueueFull>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	3310      	adds	r3, #16
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 ff6a 	bl	8005fbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ea:	f000 fa29 	bl	8005540 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050ee:	f000 fd8d 	bl	8005c0c <xTaskResumeAll>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f47f af7c 	bne.w	8004ff2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <xQueueGenericSend+0x1f8>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	e772      	b.n	8004ff2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800510c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800510e:	f000 fa17 	bl	8005540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005112:	f000 fd7b 	bl	8005c0c <xTaskResumeAll>
 8005116:	e76c      	b.n	8004ff2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511a:	f000 fa11 	bl	8005540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800511e:	f000 fd75 	bl	8005c0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005122:	2300      	movs	r3, #0
		}
	}
}
 8005124:	4618      	mov	r0, r3
 8005126:	3738      	adds	r7, #56	; 0x38
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08e      	sub	sp, #56	; 0x38
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <xQueueGenericSendFromISR+0x3c>
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <xQueueGenericSendFromISR+0x40>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <xQueueGenericSendFromISR+0x42>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	623b      	str	r3, [r7, #32]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d103      	bne.n	800519a <xQueueGenericSendFromISR+0x6a>
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <xQueueGenericSendFromISR+0x6e>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <xQueueGenericSendFromISR+0x70>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	61fb      	str	r3, [r7, #28]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051ba:	f001 feb9 	bl	8006f30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051be:	f3ef 8211 	mrs	r2, BASEPRI
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	61ba      	str	r2, [r7, #24]
 80051d4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051d6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <xQueueGenericSendFromISR+0xbc>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d12c      	bne.n	8005246 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051fc:	f000 f910 	bl	8005420 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005200:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d112      	bne.n	8005230 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d016      	beq.n	8005240 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	3324      	adds	r3, #36	; 0x24
 8005216:	4618      	mov	r0, r3
 8005218:	f000 ff20 	bl	800605c <xTaskRemoveFromEventList>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e007      	b.n	8005240 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005230:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005234:	3301      	adds	r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	b25a      	sxtb	r2, r3
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005240:	2301      	movs	r3, #1
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005244:	e001      	b.n	800524a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005246:	2300      	movs	r3, #0
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005254:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005258:	4618      	mov	r0, r3
 800525a:	3738      	adds	r7, #56	; 0x38
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08c      	sub	sp, #48	; 0x30
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800526c:	2300      	movs	r3, #0
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <xQueueReceive+0x30>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	623b      	str	r3, [r7, #32]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <xQueueReceive+0x3e>
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <xQueueReceive+0x42>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueReceive+0x44>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xQueueReceive+0x5e>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	61fb      	str	r3, [r7, #28]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052be:	f001 f88f 	bl	80063e0 <xTaskGetSchedulerState>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <xQueueReceive+0x6e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <xQueueReceive+0x72>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <xQueueReceive+0x74>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <xQueueReceive+0x8e>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	61bb      	str	r3, [r7, #24]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80052ee:	f001 fd5d 	bl	8006dac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01f      	beq.n	800533e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005302:	f000 f8f7 	bl	80054f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	1e5a      	subs	r2, r3, #1
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00f      	beq.n	8005336 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	3310      	adds	r3, #16
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fe9e 	bl	800605c <xTaskRemoveFromEventList>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005326:	4b3d      	ldr	r3, [pc, #244]	; (800541c <xQueueReceive+0x1bc>)
 8005328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005336:	f001 fd69 	bl	8006e0c <vPortExitCritical>
				return pdPASS;
 800533a:	2301      	movs	r3, #1
 800533c:	e069      	b.n	8005412 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005344:	f001 fd62 	bl	8006e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005348:	2300      	movs	r3, #0
 800534a:	e062      	b.n	8005412 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005352:	f107 0310 	add.w	r3, r7, #16
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fee4 	bl	8006124 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005360:	f001 fd54 	bl	8006e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005364:	f000 fc44 	bl	8005bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005368:	f001 fd20 	bl	8006dac <vPortEnterCritical>
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005372:	b25b      	sxtb	r3, r3
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d103      	bne.n	8005382 <xQueueReceive+0x122>
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005388:	b25b      	sxtb	r3, r3
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d103      	bne.n	8005398 <xQueueReceive+0x138>
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005398:	f001 fd38 	bl	8006e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800539c:	1d3a      	adds	r2, r7, #4
 800539e:	f107 0310 	add.w	r3, r7, #16
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fed3 	bl	8006150 <xTaskCheckForTimeOut>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d123      	bne.n	80053f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b2:	f000 f917 	bl	80055e4 <prvIsQueueEmpty>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d017      	beq.n	80053ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	3324      	adds	r3, #36	; 0x24
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fdf9 	bl	8005fbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053cc:	f000 f8b8 	bl	8005540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053d0:	f000 fc1c 	bl	8005c0c <xTaskResumeAll>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d189      	bne.n	80052ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <xQueueReceive+0x1bc>)
 80053dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	e780      	b.n	80052ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ee:	f000 f8a7 	bl	8005540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053f2:	f000 fc0b 	bl	8005c0c <xTaskResumeAll>
 80053f6:	e77a      	b.n	80052ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053fa:	f000 f8a1 	bl	8005540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053fe:	f000 fc05 	bl	8005c0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005404:	f000 f8ee 	bl	80055e4 <prvIsQueueEmpty>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	f43f af6f 	beq.w	80052ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005410:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005412:	4618      	mov	r0, r3
 8005414:	3730      	adds	r7, #48	; 0x30
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10d      	bne.n	800545a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d14d      	bne.n	80054e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 ffe6 	bl	800641c <xTaskPriorityDisinherit>
 8005450:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	605a      	str	r2, [r3, #4]
 8005458:	e043      	b.n	80054e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d119      	bne.n	8005494 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6898      	ldr	r0, [r3, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	461a      	mov	r2, r3
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	f001 ffa0 	bl	80073b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	441a      	add	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d32b      	bcc.n	80054e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	e026      	b.n	80054e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	68d8      	ldr	r0, [r3, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	461a      	mov	r2, r3
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	f001 ff86 	bl	80073b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	425b      	negs	r3, r3
 80054ae:	441a      	add	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d207      	bcs.n	80054d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	425b      	negs	r3, r3
 80054ca:	441a      	add	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d105      	bne.n	80054e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	3b01      	subs	r3, #1
 80054e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054ea:	697b      	ldr	r3, [r7, #20]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d018      	beq.n	8005538 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	441a      	add	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d303      	bcc.n	8005528 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68d9      	ldr	r1, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	461a      	mov	r2, r3
 8005532:	6838      	ldr	r0, [r7, #0]
 8005534:	f001 ff3c 	bl	80073b0 <memcpy>
	}
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005548:	f001 fc30 	bl	8006dac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005552:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005554:	e011      	b.n	800557a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	d012      	beq.n	8005584 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3324      	adds	r3, #36	; 0x24
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fd7a 	bl	800605c <xTaskRemoveFromEventList>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800556e:	f000 fe51 	bl	8006214 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	3b01      	subs	r3, #1
 8005576:	b2db      	uxtb	r3, r3
 8005578:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800557a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	dce9      	bgt.n	8005556 <prvUnlockQueue+0x16>
 8005582:	e000      	b.n	8005586 <prvUnlockQueue+0x46>
					break;
 8005584:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	22ff      	movs	r2, #255	; 0xff
 800558a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800558e:	f001 fc3d 	bl	8006e0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005592:	f001 fc0b 	bl	8006dac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800559c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800559e:	e011      	b.n	80055c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d012      	beq.n	80055ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3310      	adds	r3, #16
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fd55 	bl	800605c <xTaskRemoveFromEventList>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055b8:	f000 fe2c 	bl	8006214 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055bc:	7bbb      	ldrb	r3, [r7, #14]
 80055be:	3b01      	subs	r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	dce9      	bgt.n	80055a0 <prvUnlockQueue+0x60>
 80055cc:	e000      	b.n	80055d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	22ff      	movs	r2, #255	; 0xff
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055d8:	f001 fc18 	bl	8006e0c <vPortExitCritical>
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055ec:	f001 fbde 	bl	8006dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055f8:	2301      	movs	r3, #1
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	e001      	b.n	8005602 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005602:	f001 fc03 	bl	8006e0c <vPortExitCritical>

	return xReturn;
 8005606:	68fb      	ldr	r3, [r7, #12]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005618:	f001 fbc8 	bl	8006dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005624:	429a      	cmp	r2, r3
 8005626:	d102      	bne.n	800562e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e001      	b.n	8005632 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005632:	f001 fbeb 	bl	8006e0c <vPortExitCritical>

	return xReturn;
 8005636:	68fb      	ldr	r3, [r7, #12]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e014      	b.n	800567a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005650:	4a0e      	ldr	r2, [pc, #56]	; (800568c <vQueueAddToRegistry+0x4c>)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800565c:	490b      	ldr	r1, [pc, #44]	; (800568c <vQueueAddToRegistry+0x4c>)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005666:	4a09      	ldr	r2, [pc, #36]	; (800568c <vQueueAddToRegistry+0x4c>)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005672:	e006      	b.n	8005682 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b07      	cmp	r3, #7
 800567e:	d9e7      	bls.n	8005650 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	20001c74 	.word	0x20001c74

08005690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056a0:	f001 fb84 	bl	8006dac <vPortEnterCritical>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056aa:	b25b      	sxtb	r3, r3
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d103      	bne.n	80056ba <vQueueWaitForMessageRestricted+0x2a>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c0:	b25b      	sxtb	r3, r3
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d103      	bne.n	80056d0 <vQueueWaitForMessageRestricted+0x40>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d0:	f001 fb9c 	bl	8006e0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fc8d 	bl	8006004 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056ea:	6978      	ldr	r0, [r7, #20]
 80056ec:	f7ff ff28 	bl	8005540 <prvUnlockQueue>
	}
 80056f0:	bf00      	nop
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08e      	sub	sp, #56	; 0x38
 80056fc:	af04      	add	r7, sp, #16
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xTaskCreateStatic+0x2a>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	623b      	str	r3, [r7, #32]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xTaskCreateStatic+0x46>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	61fb      	str	r3, [r7, #28]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800573e:	235c      	movs	r3, #92	; 0x5c
 8005740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b5c      	cmp	r3, #92	; 0x5c
 8005746:	d00a      	beq.n	800575e <xTaskCreateStatic+0x66>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	61bb      	str	r3, [r7, #24]
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01e      	beq.n	80057a2 <xTaskCreateStatic+0xaa>
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01b      	beq.n	80057a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005772:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	2202      	movs	r2, #2
 8005778:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800577c:	2300      	movs	r3, #0
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f850 	bl	800583a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579c:	f000 f8d4 	bl	8005948 <prvAddNewTaskToReadyList>
 80057a0:	e001      	b.n	80057a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057a6:	697b      	ldr	r3, [r7, #20]
	}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3728      	adds	r7, #40	; 0x28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08c      	sub	sp, #48	; 0x30
 80057b4:	af04      	add	r7, sp, #16
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	4613      	mov	r3, r2
 80057be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fbf1 	bl	8006fac <pvPortMalloc>
 80057ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80057d2:	205c      	movs	r0, #92	; 0x5c
 80057d4:	f001 fbea 	bl	8006fac <pvPortMalloc>
 80057d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
 80057e6:	e005      	b.n	80057f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057e8:	6978      	ldr	r0, [r7, #20]
 80057ea:	f001 fca3 	bl	8007134 <vPortFree>
 80057ee:	e001      	b.n	80057f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	2300      	movs	r3, #0
 8005806:	9303      	str	r3, [sp, #12]
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f80e 	bl	800583a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800581e:	69f8      	ldr	r0, [r7, #28]
 8005820:	f000 f892 	bl	8005948 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005824:	2301      	movs	r3, #1
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e002      	b.n	8005830 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295
 800582e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005830:	69bb      	ldr	r3, [r7, #24]
	}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b088      	sub	sp, #32
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	461a      	mov	r2, r3
 8005852:	21a5      	movs	r1, #165	; 0xa5
 8005854:	f001 fdba 	bl	80073cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005862:	3b01      	subs	r3, #1
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	f023 0307 	bic.w	r3, r3, #7
 8005870:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <prvInitialiseNewTask+0x58>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	617b      	str	r3, [r7, #20]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e012      	b.n	80058be <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	7819      	ldrb	r1, [r3, #0]
 80058a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	3334      	adds	r3, #52	; 0x34
 80058a8:	460a      	mov	r2, r1
 80058aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d006      	beq.n	80058c6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	2b0f      	cmp	r3, #15
 80058c2:	d9e9      	bls.n	8005898 <prvInitialiseNewTask+0x5e>
 80058c4:	e000      	b.n	80058c8 <prvInitialiseNewTask+0x8e>
		{
			break;
 80058c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	2b37      	cmp	r3, #55	; 0x37
 80058d4:	d901      	bls.n	80058da <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058d6:	2337      	movs	r3, #55	; 0x37
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	2200      	movs	r2, #0
 80058ea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	3304      	adds	r3, #4
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff f98c 	bl	8004c0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	3318      	adds	r3, #24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff f987 	bl	8004c0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005904:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005914:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	2200      	movs	r2, #0
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	69b8      	ldr	r0, [r7, #24]
 800592a:	f001 f94b 	bl	8006bc4 <pxPortInitialiseStack>
 800592e:	4602      	mov	r2, r0
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005940:	bf00      	nop
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005950:	f001 fa2c 	bl	8006dac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005954:	4b2d      	ldr	r3, [pc, #180]	; (8005a0c <prvAddNewTaskToReadyList+0xc4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	4a2c      	ldr	r2, [pc, #176]	; (8005a0c <prvAddNewTaskToReadyList+0xc4>)
 800595c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800595e:	4b2c      	ldr	r3, [pc, #176]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005966:	4a2a      	ldr	r2, [pc, #168]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800596c:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <prvAddNewTaskToReadyList+0xc4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d110      	bne.n	8005996 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005974:	f000 fc72 	bl	800625c <prvInitialiseTaskLists>
 8005978:	e00d      	b.n	8005996 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800597a:	4b26      	ldr	r3, [pc, #152]	; (8005a14 <prvAddNewTaskToReadyList+0xcc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005982:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	429a      	cmp	r2, r3
 800598e:	d802      	bhi.n	8005996 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005990:	4a1f      	ldr	r2, [pc, #124]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005996:	4b20      	ldr	r3, [pc, #128]	; (8005a18 <prvAddNewTaskToReadyList+0xd0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3301      	adds	r3, #1
 800599c:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <prvAddNewTaskToReadyList+0xd0>)
 800599e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <prvAddNewTaskToReadyList+0xd0>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <prvAddNewTaskToReadyList+0xd4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d903      	bls.n	80059bc <prvAddNewTaskToReadyList+0x74>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <prvAddNewTaskToReadyList+0xd4>)
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <prvAddNewTaskToReadyList+0xd8>)
 80059ca:	441a      	add	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f7ff f927 	bl	8004c26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059d8:	f001 fa18 	bl	8006e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <prvAddNewTaskToReadyList+0xcc>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00e      	beq.n	8005a02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059e4:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <prvAddNewTaskToReadyList+0xc8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d207      	bcs.n	8005a02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <prvAddNewTaskToReadyList+0xdc>)
 80059f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000d9c 	.word	0x20000d9c
 8005a10:	200008c8 	.word	0x200008c8
 8005a14:	20000da8 	.word	0x20000da8
 8005a18:	20000db8 	.word	0x20000db8
 8005a1c:	20000da4 	.word	0x20000da4
 8005a20:	200008cc 	.word	0x200008cc
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <vTaskDelayUntil+0x2a>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	617b      	str	r3, [r7, #20]
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <vTaskDelayUntil+0x46>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	613b      	str	r3, [r7, #16]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005a6e:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <vTaskDelayUntil+0xf0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <vTaskDelayUntil+0x64>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60fb      	str	r3, [r7, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005a8c:	f000 f8b0 	bl	8005bf0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005a90:	4b22      	ldr	r3, [pc, #136]	; (8005b1c <vTaskDelayUntil+0xf4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6a3a      	ldr	r2, [r7, #32]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d20b      	bcs.n	8005ac2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d211      	bcs.n	8005ad8 <vTaskDelayUntil+0xb0>
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d90d      	bls.n	8005ad8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac0:	e00a      	b.n	8005ad8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d303      	bcc.n	8005ad4 <vTaskDelayUntil+0xac>
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d901      	bls.n	8005ad8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d006      	beq.n	8005af2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fd03 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005af2:	f000 f88b 	bl	8005c0c <xTaskResumeAll>
 8005af6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005afe:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <vTaskDelayUntil+0xf8>)
 8005b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b0e:	bf00      	nop
 8005b10:	3728      	adds	r7, #40	; 0x28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000dc4 	.word	0x20000dc4
 8005b1c:	20000da0 	.word	0x20000da0
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b32:	463a      	mov	r2, r7
 8005b34:	1d39      	adds	r1, r7, #4
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff f816 	bl	8004b6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	9202      	str	r2, [sp, #8]
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	460a      	mov	r2, r1
 8005b52:	4921      	ldr	r1, [pc, #132]	; (8005bd8 <vTaskStartScheduler+0xb4>)
 8005b54:	4821      	ldr	r0, [pc, #132]	; (8005bdc <vTaskStartScheduler+0xb8>)
 8005b56:	f7ff fdcf 	bl	80056f8 <xTaskCreateStatic>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4a20      	ldr	r2, [pc, #128]	; (8005be0 <vTaskStartScheduler+0xbc>)
 8005b5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b60:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <vTaskStartScheduler+0xbc>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e001      	b.n	8005b72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d102      	bne.n	8005b7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b78:	f000 fd12 	bl	80065a0 <xTimerCreateTimerTask>
 8005b7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d116      	bne.n	8005bb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	613b      	str	r3, [r7, #16]
}
 8005b96:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b98:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <vTaskStartScheduler+0xc0>)
 8005b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <vTaskStartScheduler+0xc4>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ba6:	4b11      	ldr	r3, [pc, #68]	; (8005bec <vTaskStartScheduler+0xc8>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bac:	f001 f88c 	bl	8006cc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bb0:	e00e      	b.n	8005bd0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d10a      	bne.n	8005bd0 <vTaskStartScheduler+0xac>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	60fb      	str	r3, [r7, #12]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <vTaskStartScheduler+0xaa>
}
 8005bd0:	bf00      	nop
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	08009ef8 	.word	0x08009ef8
 8005bdc:	0800622d 	.word	0x0800622d
 8005be0:	20000dc0 	.word	0x20000dc0
 8005be4:	20000dbc 	.word	0x20000dbc
 8005be8:	20000da8 	.word	0x20000da8
 8005bec:	20000da0 	.word	0x20000da0

08005bf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005bf4:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <vTaskSuspendAll+0x18>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	4a03      	ldr	r2, [pc, #12]	; (8005c08 <vTaskSuspendAll+0x18>)
 8005bfc:	6013      	str	r3, [r2, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000dc4 	.word	0x20000dc4

08005c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c1a:	4b42      	ldr	r3, [pc, #264]	; (8005d24 <xTaskResumeAll+0x118>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	603b      	str	r3, [r7, #0]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c38:	f001 f8b8 	bl	8006dac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c3c:	4b39      	ldr	r3, [pc, #228]	; (8005d24 <xTaskResumeAll+0x118>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	4a38      	ldr	r2, [pc, #224]	; (8005d24 <xTaskResumeAll+0x118>)
 8005c44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c46:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <xTaskResumeAll+0x118>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d162      	bne.n	8005d14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c4e:	4b36      	ldr	r3, [pc, #216]	; (8005d28 <xTaskResumeAll+0x11c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d05e      	beq.n	8005d14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c56:	e02f      	b.n	8005cb8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c58:	4b34      	ldr	r3, [pc, #208]	; (8005d2c <xTaskResumeAll+0x120>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3318      	adds	r3, #24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff f839 	bl	8004cdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff f834 	bl	8004cdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c78:	4b2d      	ldr	r3, [pc, #180]	; (8005d30 <xTaskResumeAll+0x124>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d903      	bls.n	8005c88 <xTaskResumeAll+0x7c>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <xTaskResumeAll+0x124>)
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <xTaskResumeAll+0x128>)
 8005c96:	441a      	add	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f7fe ffc1 	bl	8004c26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <xTaskResumeAll+0x12c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005cb2:	4b22      	ldr	r3, [pc, #136]	; (8005d3c <xTaskResumeAll+0x130>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <xTaskResumeAll+0x120>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1cb      	bne.n	8005c58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cc6:	f000 fb67 	bl	8006398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cca:	4b1d      	ldr	r3, [pc, #116]	; (8005d40 <xTaskResumeAll+0x134>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d010      	beq.n	8005cf8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cd6:	f000 f857 	bl	8005d88 <xTaskIncrementTick>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ce0:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <xTaskResumeAll+0x130>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f1      	bne.n	8005cd6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005cf2:	4b13      	ldr	r3, [pc, #76]	; (8005d40 <xTaskResumeAll+0x134>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cf8:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <xTaskResumeAll+0x130>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d00:	2301      	movs	r3, #1
 8005d02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d04:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <xTaskResumeAll+0x138>)
 8005d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d14:	f001 f87a 	bl	8006e0c <vPortExitCritical>

	return xAlreadyYielded;
 8005d18:	68bb      	ldr	r3, [r7, #8]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000dc4 	.word	0x20000dc4
 8005d28:	20000d9c 	.word	0x20000d9c
 8005d2c:	20000d5c 	.word	0x20000d5c
 8005d30:	20000da4 	.word	0x20000da4
 8005d34:	200008cc 	.word	0x200008cc
 8005d38:	200008c8 	.word	0x200008c8
 8005d3c:	20000db0 	.word	0x20000db0
 8005d40:	20000dac 	.word	0x20000dac
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d4e:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <xTaskGetTickCount+0x18>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d54:	687b      	ldr	r3, [r7, #4]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr
 8005d60:	20000da0 	.word	0x20000da0

08005d64 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d6a:	f001 f8e1 	bl	8006f30 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005d72:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <xTaskGetTickCountFromISR+0x20>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d78:	683b      	ldr	r3, [r7, #0]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000da0 	.word	0x20000da0

08005d88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d92:	4b51      	ldr	r3, [pc, #324]	; (8005ed8 <xTaskIncrementTick+0x150>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f040 808e 	bne.w	8005eb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d9c:	4b4f      	ldr	r3, [pc, #316]	; (8005edc <xTaskIncrementTick+0x154>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3301      	adds	r3, #1
 8005da2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005da4:	4a4d      	ldr	r2, [pc, #308]	; (8005edc <xTaskIncrementTick+0x154>)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d120      	bne.n	8005df2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005db0:	4b4b      	ldr	r3, [pc, #300]	; (8005ee0 <xTaskIncrementTick+0x158>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	603b      	str	r3, [r7, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <xTaskIncrementTick+0x46>
 8005dd0:	4b43      	ldr	r3, [pc, #268]	; (8005ee0 <xTaskIncrementTick+0x158>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	4b43      	ldr	r3, [pc, #268]	; (8005ee4 <xTaskIncrementTick+0x15c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a41      	ldr	r2, [pc, #260]	; (8005ee0 <xTaskIncrementTick+0x158>)
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	4a41      	ldr	r2, [pc, #260]	; (8005ee4 <xTaskIncrementTick+0x15c>)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	4b40      	ldr	r3, [pc, #256]	; (8005ee8 <xTaskIncrementTick+0x160>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	4a3f      	ldr	r2, [pc, #252]	; (8005ee8 <xTaskIncrementTick+0x160>)
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	f000 fad3 	bl	8006398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005df2:	4b3e      	ldr	r3, [pc, #248]	; (8005eec <xTaskIncrementTick+0x164>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d34e      	bcc.n	8005e9a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dfc:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <xTaskIncrementTick+0x158>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <xTaskIncrementTick+0x82>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <xTaskIncrementTick+0x84>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e10:	4b36      	ldr	r3, [pc, #216]	; (8005eec <xTaskIncrementTick+0x164>)
 8005e12:	f04f 32ff 	mov.w	r2, #4294967295
 8005e16:	601a      	str	r2, [r3, #0]
					break;
 8005e18:	e03f      	b.n	8005e9a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <xTaskIncrementTick+0x158>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d203      	bcs.n	8005e3a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e32:	4a2e      	ldr	r2, [pc, #184]	; (8005eec <xTaskIncrementTick+0x164>)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6013      	str	r3, [r2, #0]
						break;
 8005e38:	e02f      	b.n	8005e9a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe ff4c 	bl	8004cdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	3318      	adds	r3, #24
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe ff43 	bl	8004cdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5a:	4b25      	ldr	r3, [pc, #148]	; (8005ef0 <xTaskIncrementTick+0x168>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d903      	bls.n	8005e6a <xTaskIncrementTick+0xe2>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <xTaskIncrementTick+0x168>)
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a1f      	ldr	r2, [pc, #124]	; (8005ef4 <xTaskIncrementTick+0x16c>)
 8005e78:	441a      	add	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f7fe fed0 	bl	8004c26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <xTaskIncrementTick+0x170>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d3b3      	bcc.n	8005dfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e98:	e7b0      	b.n	8005dfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e9a:	4b17      	ldr	r3, [pc, #92]	; (8005ef8 <xTaskIncrementTick+0x170>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea0:	4914      	ldr	r1, [pc, #80]	; (8005ef4 <xTaskIncrementTick+0x16c>)
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d907      	bls.n	8005ec2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e004      	b.n	8005ec2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <xTaskIncrementTick+0x174>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	4a0f      	ldr	r2, [pc, #60]	; (8005efc <xTaskIncrementTick+0x174>)
 8005ec0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <xTaskIncrementTick+0x178>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ece:	697b      	ldr	r3, [r7, #20]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000dc4 	.word	0x20000dc4
 8005edc:	20000da0 	.word	0x20000da0
 8005ee0:	20000d54 	.word	0x20000d54
 8005ee4:	20000d58 	.word	0x20000d58
 8005ee8:	20000db4 	.word	0x20000db4
 8005eec:	20000dbc 	.word	0x20000dbc
 8005ef0:	20000da4 	.word	0x20000da4
 8005ef4:	200008cc 	.word	0x200008cc
 8005ef8:	200008c8 	.word	0x200008c8
 8005efc:	20000dac 	.word	0x20000dac
 8005f00:	20000db0 	.word	0x20000db0

08005f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f0a:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <vTaskSwitchContext+0xa4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f12:	4b26      	ldr	r3, [pc, #152]	; (8005fac <vTaskSwitchContext+0xa8>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f18:	e041      	b.n	8005f9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005f1a:	4b24      	ldr	r3, [pc, #144]	; (8005fac <vTaskSwitchContext+0xa8>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f20:	4b23      	ldr	r3, [pc, #140]	; (8005fb0 <vTaskSwitchContext+0xac>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e010      	b.n	8005f4a <vTaskSwitchContext+0x46>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <vTaskSwitchContext+0x40>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <vTaskSwitchContext+0x3e>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	491a      	ldr	r1, [pc, #104]	; (8005fb4 <vTaskSwitchContext+0xb0>)
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0e4      	beq.n	8005f28 <vTaskSwitchContext+0x24>
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4a12      	ldr	r2, [pc, #72]	; (8005fb4 <vTaskSwitchContext+0xb0>)
 8005f6a:	4413      	add	r3, r2
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	605a      	str	r2, [r3, #4]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d104      	bne.n	8005f8e <vTaskSwitchContext+0x8a>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <vTaskSwitchContext+0xb4>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	4a05      	ldr	r2, [pc, #20]	; (8005fb0 <vTaskSwitchContext+0xac>)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6013      	str	r3, [r2, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr
 8005fa8:	20000dc4 	.word	0x20000dc4
 8005fac:	20000db0 	.word	0x20000db0
 8005fb0:	20000da4 	.word	0x20000da4
 8005fb4:	200008cc 	.word	0x200008cc
 8005fb8:	200008c8 	.word	0x200008c8

08005fbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	60fb      	str	r3, [r7, #12]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fe2:	4b07      	ldr	r3, [pc, #28]	; (8006000 <vTaskPlaceOnEventList+0x44>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3318      	adds	r3, #24
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fe fe3e 	bl	8004c6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	6838      	ldr	r0, [r7, #0]
 8005ff4:	f000 fa80 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	200008c8 	.word	0x200008c8

08006004 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	617b      	str	r3, [r7, #20]
}
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <vTaskPlaceOnEventListRestricted+0x54>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3318      	adds	r3, #24
 8006032:	4619      	mov	r1, r3
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7fe fdf6 	bl	8004c26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006040:	f04f 33ff 	mov.w	r3, #4294967295
 8006044:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	68b8      	ldr	r0, [r7, #8]
 800604a:	f000 fa55 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
	}
 800604e:	bf00      	nop
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	200008c8 	.word	0x200008c8

0800605c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60fb      	str	r3, [r7, #12]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	3318      	adds	r3, #24
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fe25 	bl	8004cdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006092:	4b1e      	ldr	r3, [pc, #120]	; (800610c <xTaskRemoveFromEventList+0xb0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d11d      	bne.n	80060d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3304      	adds	r3, #4
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fe1c 	bl	8004cdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	4b19      	ldr	r3, [pc, #100]	; (8006110 <xTaskRemoveFromEventList+0xb4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d903      	bls.n	80060b8 <xTaskRemoveFromEventList+0x5c>
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a16      	ldr	r2, [pc, #88]	; (8006110 <xTaskRemoveFromEventList+0xb4>)
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4a13      	ldr	r2, [pc, #76]	; (8006114 <xTaskRemoveFromEventList+0xb8>)
 80060c6:	441a      	add	r2, r3
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f7fe fda9 	bl	8004c26 <vListInsertEnd>
 80060d4:	e005      	b.n	80060e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	3318      	adds	r3, #24
 80060da:	4619      	mov	r1, r3
 80060dc:	480e      	ldr	r0, [pc, #56]	; (8006118 <xTaskRemoveFromEventList+0xbc>)
 80060de:	f7fe fda2 	bl	8004c26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <xTaskRemoveFromEventList+0xc0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d905      	bls.n	80060fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060f4:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <xTaskRemoveFromEventList+0xc4>)
 80060f6:	2201      	movs	r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	e001      	b.n	8006100 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006100:	697b      	ldr	r3, [r7, #20]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000dc4 	.word	0x20000dc4
 8006110:	20000da4 	.word	0x20000da4
 8006114:	200008cc 	.word	0x200008cc
 8006118:	20000d5c 	.word	0x20000d5c
 800611c:	200008c8 	.word	0x200008c8
 8006120:	20000db0 	.word	0x20000db0

08006124 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <vTaskInternalSetTimeOutState+0x24>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006134:	4b05      	ldr	r3, [pc, #20]	; (800614c <vTaskInternalSetTimeOutState+0x28>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000db4 	.word	0x20000db4
 800614c:	20000da0 	.word	0x20000da0

08006150 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	613b      	str	r3, [r7, #16]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60fb      	str	r3, [r7, #12]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006192:	f000 fe0b 	bl	8006dac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006196:	4b1d      	ldr	r3, [pc, #116]	; (800620c <xTaskCheckForTimeOut+0xbc>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d102      	bne.n	80061b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	e023      	b.n	80061fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b15      	ldr	r3, [pc, #84]	; (8006210 <xTaskCheckForTimeOut+0xc0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d007      	beq.n	80061d2 <xTaskCheckForTimeOut+0x82>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e015      	b.n	80061fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d20b      	bcs.n	80061f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff9b 	bl	8006124 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e004      	b.n	80061fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061fe:	f000 fe05 	bl	8006e0c <vPortExitCritical>

	return xReturn;
 8006202:	69fb      	ldr	r3, [r7, #28]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000da0 	.word	0x20000da0
 8006210:	20000db4 	.word	0x20000db4

08006214 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006218:	4b03      	ldr	r3, [pc, #12]	; (8006228 <vTaskMissedYield+0x14>)
 800621a:	2201      	movs	r2, #1
 800621c:	601a      	str	r2, [r3, #0]
}
 800621e:	bf00      	nop
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	20000db0 	.word	0x20000db0

0800622c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006234:	f000 f852 	bl	80062dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <prvIdleTask+0x28>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d9f9      	bls.n	8006234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <prvIdleTask+0x2c>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006250:	e7f0      	b.n	8006234 <prvIdleTask+0x8>
 8006252:	bf00      	nop
 8006254:	200008cc 	.word	0x200008cc
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	e00c      	b.n	8006282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4a12      	ldr	r2, [pc, #72]	; (80062bc <prvInitialiseTaskLists+0x60>)
 8006274:	4413      	add	r3, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fcaa 	bl	8004bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3301      	adds	r3, #1
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b37      	cmp	r3, #55	; 0x37
 8006286:	d9ef      	bls.n	8006268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006288:	480d      	ldr	r0, [pc, #52]	; (80062c0 <prvInitialiseTaskLists+0x64>)
 800628a:	f7fe fca1 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800628e:	480d      	ldr	r0, [pc, #52]	; (80062c4 <prvInitialiseTaskLists+0x68>)
 8006290:	f7fe fc9e 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006294:	480c      	ldr	r0, [pc, #48]	; (80062c8 <prvInitialiseTaskLists+0x6c>)
 8006296:	f7fe fc9b 	bl	8004bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800629a:	480c      	ldr	r0, [pc, #48]	; (80062cc <prvInitialiseTaskLists+0x70>)
 800629c:	f7fe fc98 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062a0:	480b      	ldr	r0, [pc, #44]	; (80062d0 <prvInitialiseTaskLists+0x74>)
 80062a2:	f7fe fc95 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <prvInitialiseTaskLists+0x78>)
 80062a8:	4a05      	ldr	r2, [pc, #20]	; (80062c0 <prvInitialiseTaskLists+0x64>)
 80062aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <prvInitialiseTaskLists+0x7c>)
 80062ae:	4a05      	ldr	r2, [pc, #20]	; (80062c4 <prvInitialiseTaskLists+0x68>)
 80062b0:	601a      	str	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	200008cc 	.word	0x200008cc
 80062c0:	20000d2c 	.word	0x20000d2c
 80062c4:	20000d40 	.word	0x20000d40
 80062c8:	20000d5c 	.word	0x20000d5c
 80062cc:	20000d70 	.word	0x20000d70
 80062d0:	20000d88 	.word	0x20000d88
 80062d4:	20000d54 	.word	0x20000d54
 80062d8:	20000d58 	.word	0x20000d58

080062dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062e2:	e019      	b.n	8006318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062e4:	f000 fd62 	bl	8006dac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80062e8:	4b10      	ldr	r3, [pc, #64]	; (800632c <prvCheckTasksWaitingTermination+0x50>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe fcf1 	bl	8004cdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062fa:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <prvCheckTasksWaitingTermination+0x54>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3b01      	subs	r3, #1
 8006300:	4a0b      	ldr	r2, [pc, #44]	; (8006330 <prvCheckTasksWaitingTermination+0x54>)
 8006302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006304:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <prvCheckTasksWaitingTermination+0x58>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <prvCheckTasksWaitingTermination+0x58>)
 800630c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800630e:	f000 fd7d 	bl	8006e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f810 	bl	8006338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <prvCheckTasksWaitingTermination+0x58>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e1      	bne.n	80062e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000d70 	.word	0x20000d70
 8006330:	20000d9c 	.word	0x20000d9c
 8006334:	20000d84 	.word	0x20000d84

08006338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006346:	2b00      	cmp	r3, #0
 8006348:	d108      	bne.n	800635c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fef0 	bl	8007134 <vPortFree>
				vPortFree( pxTCB );
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 feed 	bl	8007134 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800635a:	e018      	b.n	800638e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006362:	2b01      	cmp	r3, #1
 8006364:	d103      	bne.n	800636e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fee4 	bl	8007134 <vPortFree>
	}
 800636c:	e00f      	b.n	800638e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006374:	2b02      	cmp	r3, #2
 8006376:	d00a      	beq.n	800638e <prvDeleteTCB+0x56>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	60fb      	str	r3, [r7, #12]
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <prvDeleteTCB+0x54>
	}
 800638e:	bf00      	nop
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800639e:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <prvResetNextTaskUnblockTime+0x40>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <prvResetNextTaskUnblockTime+0x14>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <prvResetNextTaskUnblockTime+0x16>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <prvResetNextTaskUnblockTime+0x44>)
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063ba:	e008      	b.n	80063ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063bc:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <prvResetNextTaskUnblockTime+0x40>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	4a04      	ldr	r2, [pc, #16]	; (80063dc <prvResetNextTaskUnblockTime+0x44>)
 80063cc:	6013      	str	r3, [r2, #0]
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr
 80063d8:	20000d54 	.word	0x20000d54
 80063dc:	20000dbc 	.word	0x20000dbc

080063e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <xTaskGetSchedulerState+0x34>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063ee:	2301      	movs	r3, #1
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	e008      	b.n	8006406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <xTaskGetSchedulerState+0x38>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063fc:	2302      	movs	r3, #2
 80063fe:	607b      	str	r3, [r7, #4]
 8006400:	e001      	b.n	8006406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006406:	687b      	ldr	r3, [r7, #4]
	}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000da8 	.word	0x20000da8
 8006418:	20000dc4 	.word	0x20000dc4

0800641c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d056      	beq.n	80064e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006432:	4b2e      	ldr	r3, [pc, #184]	; (80064ec <xTaskPriorityDisinherit+0xd0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	429a      	cmp	r2, r3
 800643a:	d00a      	beq.n	8006452 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60fb      	str	r3, [r7, #12]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	60bb      	str	r3, [r7, #8]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006474:	1e5a      	subs	r2, r3, #1
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006482:	429a      	cmp	r2, r3
 8006484:	d02c      	beq.n	80064e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648a:	2b00      	cmp	r3, #0
 800648c:	d128      	bne.n	80064e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3304      	adds	r3, #4
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fc22 	bl	8004cdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b0:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <xTaskPriorityDisinherit+0xd4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d903      	bls.n	80064c0 <xTaskPriorityDisinherit+0xa4>
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	4a0c      	ldr	r2, [pc, #48]	; (80064f0 <xTaskPriorityDisinherit+0xd4>)
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <xTaskPriorityDisinherit+0xd8>)
 80064ce:	441a      	add	r2, r3
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f7fe fba5 	bl	8004c26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064e0:	697b      	ldr	r3, [r7, #20]
	}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200008c8 	.word	0x200008c8
 80064f0:	20000da4 	.word	0x20000da4
 80064f4:	200008cc 	.word	0x200008cc

080064f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006502:	4b21      	ldr	r3, [pc, #132]	; (8006588 <prvAddCurrentTaskToDelayedList+0x90>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006508:	4b20      	ldr	r3, [pc, #128]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3304      	adds	r3, #4
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe fbe4 	bl	8004cdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d10a      	bne.n	8006532 <prvAddCurrentTaskToDelayedList+0x3a>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006522:	4b1a      	ldr	r3, [pc, #104]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3304      	adds	r3, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4819      	ldr	r0, [pc, #100]	; (8006590 <prvAddCurrentTaskToDelayedList+0x98>)
 800652c:	f7fe fb7b 	bl	8004c26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006530:	e026      	b.n	8006580 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	d209      	bcs.n	800655e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <prvAddCurrentTaskToDelayedList+0x9c>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b0f      	ldr	r3, [pc, #60]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7fe fb88 	bl	8004c6c <vListInsert>
}
 800655c:	e010      	b.n	8006580 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800655e:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3304      	adds	r3, #4
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f7fe fb7e 	bl	8004c6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	d202      	bcs.n	8006580 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800657a:	4a08      	ldr	r2, [pc, #32]	; (800659c <prvAddCurrentTaskToDelayedList+0xa4>)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6013      	str	r3, [r2, #0]
}
 8006580:	bf00      	nop
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000da0 	.word	0x20000da0
 800658c:	200008c8 	.word	0x200008c8
 8006590:	20000d88 	.word	0x20000d88
 8006594:	20000d58 	.word	0x20000d58
 8006598:	20000d54 	.word	0x20000d54
 800659c:	20000dbc 	.word	0x20000dbc

080065a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065aa:	f000 facb 	bl	8006b44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065ae:	4b1c      	ldr	r3, [pc, #112]	; (8006620 <xTimerCreateTimerTask+0x80>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d021      	beq.n	80065fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065be:	1d3a      	adds	r2, r7, #4
 80065c0:	f107 0108 	add.w	r1, r7, #8
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fae7 	bl	8004b9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	9202      	str	r2, [sp, #8]
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	2302      	movs	r3, #2
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	2300      	movs	r3, #0
 80065de:	460a      	mov	r2, r1
 80065e0:	4910      	ldr	r1, [pc, #64]	; (8006624 <xTimerCreateTimerTask+0x84>)
 80065e2:	4811      	ldr	r0, [pc, #68]	; (8006628 <xTimerCreateTimerTask+0x88>)
 80065e4:	f7ff f888 	bl	80056f8 <xTaskCreateStatic>
 80065e8:	4603      	mov	r3, r0
 80065ea:	4a10      	ldr	r2, [pc, #64]	; (800662c <xTimerCreateTimerTask+0x8c>)
 80065ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065ee:	4b0f      	ldr	r3, [pc, #60]	; (800662c <xTimerCreateTimerTask+0x8c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065f6:	2301      	movs	r3, #1
 80065f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	613b      	str	r3, [r7, #16]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006616:	697b      	ldr	r3, [r7, #20]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20000df8 	.word	0x20000df8
 8006624:	08009f00 	.word	0x08009f00
 8006628:	0800674d 	.word	0x0800674d
 800662c:	20000dfc 	.word	0x20000dfc

08006630 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800663e:	2300      	movs	r3, #0
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	623b      	str	r3, [r7, #32]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800665e:	4b1a      	ldr	r3, [pc, #104]	; (80066c8 <xTimerGenericCommand+0x98>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d02a      	beq.n	80066bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b05      	cmp	r3, #5
 8006676:	dc18      	bgt.n	80066aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006678:	f7ff feb2 	bl	80063e0 <xTaskGetSchedulerState>
 800667c:	4603      	mov	r3, r0
 800667e:	2b02      	cmp	r3, #2
 8006680:	d109      	bne.n	8006696 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006682:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <xTimerGenericCommand+0x98>)
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	f107 0110 	add.w	r1, r7, #16
 800668a:	2300      	movs	r3, #0
 800668c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668e:	f7fe fc51 	bl	8004f34 <xQueueGenericSend>
 8006692:	6278      	str	r0, [r7, #36]	; 0x24
 8006694:	e012      	b.n	80066bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <xTimerGenericCommand+0x98>)
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	f107 0110 	add.w	r1, r7, #16
 800669e:	2300      	movs	r3, #0
 80066a0:	2200      	movs	r2, #0
 80066a2:	f7fe fc47 	bl	8004f34 <xQueueGenericSend>
 80066a6:	6278      	str	r0, [r7, #36]	; 0x24
 80066a8:	e008      	b.n	80066bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066aa:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <xTimerGenericCommand+0x98>)
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	f107 0110 	add.w	r1, r7, #16
 80066b2:	2300      	movs	r3, #0
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	f7fe fd3b 	bl	8005130 <xQueueGenericSendFromISR>
 80066ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3728      	adds	r7, #40	; 0x28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000df8 	.word	0x20000df8

080066cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066d6:	4b1c      	ldr	r3, [pc, #112]	; (8006748 <prvProcessExpiredTimer+0x7c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe faf9 	bl	8004cdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d122      	bne.n	8006738 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	18d1      	adds	r1, r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	6978      	ldr	r0, [r7, #20]
 8006700:	f000 f8c8 	bl	8006894 <prvInsertTimerInActiveList>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d016      	beq.n	8006738 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800670a:	2300      	movs	r3, #0
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	2300      	movs	r3, #0
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	2100      	movs	r1, #0
 8006714:	6978      	ldr	r0, [r7, #20]
 8006716:	f7ff ff8b 	bl	8006630 <xTimerGenericCommand>
 800671a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	60fb      	str	r3, [r7, #12]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	6978      	ldr	r0, [r7, #20]
 800673e:	4798      	blx	r3
}
 8006740:	bf00      	nop
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20000df0 	.word	0x20000df0

0800674c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006754:	f107 0308 	add.w	r3, r7, #8
 8006758:	4618      	mov	r0, r3
 800675a:	f000 f857 	bl	800680c <prvGetNextExpireTime>
 800675e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4619      	mov	r1, r3
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f803 	bl	8006770 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800676a:	f000 f8d5 	bl	8006918 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800676e:	e7f1      	b.n	8006754 <prvTimerTask+0x8>

08006770 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800677a:	f7ff fa39 	bl	8005bf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f866 	bl	8006854 <prvSampleTimeNow>
 8006788:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d130      	bne.n	80067f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10a      	bne.n	80067ac <prvProcessTimerOrBlockTask+0x3c>
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	429a      	cmp	r2, r3
 800679c:	d806      	bhi.n	80067ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800679e:	f7ff fa35 	bl	8005c0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff ff91 	bl	80066cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067aa:	e024      	b.n	80067f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d008      	beq.n	80067c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067b2:	4b13      	ldr	r3, [pc, #76]	; (8006800 <prvProcessTimerOrBlockTask+0x90>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067c4:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <prvProcessTimerOrBlockTask+0x94>)
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	f7fe ff5d 	bl	8005690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067d6:	f7ff fa19 	bl	8005c0c <xTaskResumeAll>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067e0:	4b09      	ldr	r3, [pc, #36]	; (8006808 <prvProcessTimerOrBlockTask+0x98>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
}
 80067f0:	e001      	b.n	80067f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067f2:	f7ff fa0b 	bl	8005c0c <xTaskResumeAll>
}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000df4 	.word	0x20000df4
 8006804:	20000df8 	.word	0x20000df8
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006814:	4b0e      	ldr	r3, [pc, #56]	; (8006850 <prvGetNextExpireTime+0x44>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	bf0c      	ite	eq
 800681e:	2301      	moveq	r3, #1
 8006820:	2300      	movne	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d105      	bne.n	800683e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006832:	4b07      	ldr	r3, [pc, #28]	; (8006850 <prvGetNextExpireTime+0x44>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	e001      	b.n	8006842 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000df0 	.word	0x20000df0

08006854 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800685c:	f7ff fa74 	bl	8005d48 <xTaskGetTickCount>
 8006860:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006862:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <prvSampleTimeNow+0x3c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	429a      	cmp	r2, r3
 800686a:	d205      	bcs.n	8006878 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800686c:	f000 f908 	bl	8006a80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e002      	b.n	800687e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800687e:	4a04      	ldr	r2, [pc, #16]	; (8006890 <prvSampleTimeNow+0x3c>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006884:	68fb      	ldr	r3, [r7, #12]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000e00 	.word	0x20000e00

08006894 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d812      	bhi.n	80068e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	1ad2      	subs	r2, r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d302      	bcc.n	80068ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068c8:	2301      	movs	r3, #1
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e01b      	b.n	8006906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068ce:	4b10      	ldr	r3, [pc, #64]	; (8006910 <prvInsertTimerInActiveList+0x7c>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f7fe f9c7 	bl	8004c6c <vListInsert>
 80068de:	e012      	b.n	8006906 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d206      	bcs.n	80068f6 <prvInsertTimerInActiveList+0x62>
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d302      	bcc.n	80068f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068f0:	2301      	movs	r3, #1
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e007      	b.n	8006906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068f6:	4b07      	ldr	r3, [pc, #28]	; (8006914 <prvInsertTimerInActiveList+0x80>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3304      	adds	r3, #4
 80068fe:	4619      	mov	r1, r3
 8006900:	4610      	mov	r0, r2
 8006902:	f7fe f9b3 	bl	8004c6c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006906:	697b      	ldr	r3, [r7, #20]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	20000df4 	.word	0x20000df4
 8006914:	20000df0 	.word	0x20000df0

08006918 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08e      	sub	sp, #56	; 0x38
 800691c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800691e:	e09d      	b.n	8006a5c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	da18      	bge.n	8006958 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006926:	1d3b      	adds	r3, r7, #4
 8006928:	3304      	adds	r3, #4
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	61fb      	str	r3, [r7, #28]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694e:	6850      	ldr	r0, [r2, #4]
 8006950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006952:	6892      	ldr	r2, [r2, #8]
 8006954:	4611      	mov	r1, r2
 8006956:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	db7d      	blt.n	8006a5a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d004      	beq.n	8006974 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	3304      	adds	r3, #4
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe f9b4 	bl	8004cdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006974:	463b      	mov	r3, r7
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff ff6c 	bl	8006854 <prvSampleTimeNow>
 800697c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b09      	cmp	r3, #9
 8006982:	d86b      	bhi.n	8006a5c <prvProcessReceivedCommands+0x144>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <prvProcessReceivedCommands+0x74>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069b5 	.word	0x080069b5
 8006990:	080069b5 	.word	0x080069b5
 8006994:	080069b5 	.word	0x080069b5
 8006998:	08006a5d 	.word	0x08006a5d
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	08006a49 	.word	0x08006a49
 80069a4:	080069b5 	.word	0x080069b5
 80069a8:	080069b5 	.word	0x080069b5
 80069ac:	08006a5d 	.word	0x08006a5d
 80069b0:	08006a11 	.word	0x08006a11
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	18d1      	adds	r1, r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069c2:	f7ff ff67 	bl	8006894 <prvInsertTimerInActiveList>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d047      	beq.n	8006a5c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d13f      	bne.n	8006a5c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	441a      	add	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	2300      	movs	r3, #0
 80069ea:	2100      	movs	r1, #0
 80069ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ee:	f7ff fe1f 	bl	8006630 <xTimerGenericCommand>
 80069f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d130      	bne.n	8006a5c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	61bb      	str	r3, [r7, #24]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	617b      	str	r3, [r7, #20]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	699a      	ldr	r2, [r3, #24]
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	18d1      	adds	r1, r2, r3
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a42:	f7ff ff27 	bl	8006894 <prvInsertTimerInActiveList>
					break;
 8006a46:	e009      	b.n	8006a5c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d104      	bne.n	8006a5c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a54:	f000 fb6e 	bl	8007134 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a58:	e000      	b.n	8006a5c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a5a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a5c:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <prvProcessReceivedCommands+0x164>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	1d39      	adds	r1, r7, #4
 8006a62:	2200      	movs	r2, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fe fbfb 	bl	8005260 <xQueueReceive>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f47f af57 	bne.w	8006920 <prvProcessReceivedCommands+0x8>
	}
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	3730      	adds	r7, #48	; 0x30
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000df8 	.word	0x20000df8

08006a80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a86:	e045      	b.n	8006b14 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a88:	4b2c      	ldr	r3, [pc, #176]	; (8006b3c <prvSwitchTimerLists+0xbc>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a92:	4b2a      	ldr	r3, [pc, #168]	; (8006b3c <prvSwitchTimerLists+0xbc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fe f91b 	bl	8004cdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d12e      	bne.n	8006b14 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4413      	add	r3, r2
 8006abe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d90e      	bls.n	8006ae6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ad4:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <prvSwitchTimerLists+0xbc>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7fe f8c4 	bl	8004c6c <vListInsert>
 8006ae4:	e016      	b.n	8006b14 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	2300      	movs	r3, #0
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	2100      	movs	r1, #0
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff fd9d 	bl	8006630 <xTimerGenericCommand>
 8006af6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	603b      	str	r3, [r7, #0]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <prvSwitchTimerLists+0xbc>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1b4      	bne.n	8006a88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b1e:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <prvSwitchTimerLists+0xbc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <prvSwitchTimerLists+0xc0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a04      	ldr	r2, [pc, #16]	; (8006b3c <prvSwitchTimerLists+0xbc>)
 8006b2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b2c:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <prvSwitchTimerLists+0xc0>)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	6013      	str	r3, [r2, #0]
}
 8006b32:	bf00      	nop
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20000df0 	.word	0x20000df0
 8006b40:	20000df4 	.word	0x20000df4

08006b44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b4a:	f000 f92f 	bl	8006dac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b4e:	4b15      	ldr	r3, [pc, #84]	; (8006ba4 <prvCheckForValidListAndQueue+0x60>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d120      	bne.n	8006b98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b56:	4814      	ldr	r0, [pc, #80]	; (8006ba8 <prvCheckForValidListAndQueue+0x64>)
 8006b58:	f7fe f83a 	bl	8004bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b5c:	4813      	ldr	r0, [pc, #76]	; (8006bac <prvCheckForValidListAndQueue+0x68>)
 8006b5e:	f7fe f837 	bl	8004bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <prvCheckForValidListAndQueue+0x6c>)
 8006b64:	4a10      	ldr	r2, [pc, #64]	; (8006ba8 <prvCheckForValidListAndQueue+0x64>)
 8006b66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b68:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <prvCheckForValidListAndQueue+0x70>)
 8006b6a:	4a10      	ldr	r2, [pc, #64]	; (8006bac <prvCheckForValidListAndQueue+0x68>)
 8006b6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <prvCheckForValidListAndQueue+0x74>)
 8006b74:	4a11      	ldr	r2, [pc, #68]	; (8006bbc <prvCheckForValidListAndQueue+0x78>)
 8006b76:	2110      	movs	r1, #16
 8006b78:	200a      	movs	r0, #10
 8006b7a:	f7fe f941 	bl	8004e00 <xQueueGenericCreateStatic>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <prvCheckForValidListAndQueue+0x60>)
 8006b82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b84:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <prvCheckForValidListAndQueue+0x60>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <prvCheckForValidListAndQueue+0x60>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	490b      	ldr	r1, [pc, #44]	; (8006bc0 <prvCheckForValidListAndQueue+0x7c>)
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fd54 	bl	8005640 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b98:	f000 f938 	bl	8006e0c <vPortExitCritical>
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20000df8 	.word	0x20000df8
 8006ba8:	20000dc8 	.word	0x20000dc8
 8006bac:	20000ddc 	.word	0x20000ddc
 8006bb0:	20000df0 	.word	0x20000df0
 8006bb4:	20000df4 	.word	0x20000df4
 8006bb8:	20000ea4 	.word	0x20000ea4
 8006bbc:	20000e04 	.word	0x20000e04
 8006bc0:	08009f08 	.word	0x08009f08

08006bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3b04      	subs	r3, #4
 8006bd4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b04      	subs	r3, #4
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f023 0201 	bic.w	r2, r3, #1
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3b04      	subs	r3, #4
 8006bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bf4:	4a08      	ldr	r2, [pc, #32]	; (8006c18 <pxPortInitialiseStack+0x54>)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3b14      	subs	r3, #20
 8006bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3b20      	subs	r3, #32
 8006c0a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr
 8006c18:	08006c1d 	.word	0x08006c1d

08006c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c26:	4b12      	ldr	r3, [pc, #72]	; (8006c70 <prvTaskExitError+0x54>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2e:	d00a      	beq.n	8006c46 <prvTaskExitError+0x2a>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	60fb      	str	r3, [r7, #12]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <prvTaskExitError+0x28>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60bb      	str	r3, [r7, #8]
}
 8006c58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c5a:	bf00      	nop
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0fc      	beq.n	8006c5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	2000000c 	.word	0x2000000c
	...

08006c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <pxCurrentTCBConst2>)
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	6808      	ldr	r0, [r1, #0]
 8006c86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c8a:	f380 8809 	msr	PSP, r0
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8811 	msr	BASEPRI, r0
 8006c9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c9e:	4770      	bx	lr

08006ca0 <pxCurrentTCBConst2>:
 8006ca0:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ca8:	4806      	ldr	r0, [pc, #24]	; (8006cc4 <prvPortStartFirstTask+0x1c>)
 8006caa:	6800      	ldr	r0, [r0, #0]
 8006cac:	6800      	ldr	r0, [r0, #0]
 8006cae:	f380 8808 	msr	MSP, r0
 8006cb2:	b662      	cpsie	i
 8006cb4:	b661      	cpsie	f
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	df00      	svc	0
 8006cc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed08 	.word	0xe000ed08

08006cc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cce:	4b32      	ldr	r3, [pc, #200]	; (8006d98 <xPortStartScheduler+0xd0>)
 8006cd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	4b2a      	ldr	r3, [pc, #168]	; (8006d9c <xPortStartScheduler+0xd4>)
 8006cf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cf6:	4b2a      	ldr	r3, [pc, #168]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006cf8:	2207      	movs	r2, #7
 8006cfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cfc:	e009      	b.n	8006d12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cfe:	4b28      	ldr	r3, [pc, #160]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b80      	cmp	r3, #128	; 0x80
 8006d1c:	d0ef      	beq.n	8006cfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d1e:	4b20      	ldr	r3, [pc, #128]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f1c3 0307 	rsb	r3, r3, #7
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d00a      	beq.n	8006d40 <xPortStartScheduler+0x78>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	60bb      	str	r3, [r7, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d40:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d4a:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d52:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d5e:	4b11      	ldr	r3, [pc, #68]	; (8006da4 <xPortStartScheduler+0xdc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <xPortStartScheduler+0xdc>)
 8006d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d6a:	4b0e      	ldr	r3, [pc, #56]	; (8006da4 <xPortStartScheduler+0xdc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a0d      	ldr	r2, [pc, #52]	; (8006da4 <xPortStartScheduler+0xdc>)
 8006d70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d76:	f000 f8b9 	bl	8006eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <xPortStartScheduler+0xe0>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d80:	f7ff ff92 	bl	8006ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d84:	f7ff f8be 	bl	8005f04 <vTaskSwitchContext>
	prvTaskExitError();
 8006d88:	f7ff ff48 	bl	8006c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	e000e400 	.word	0xe000e400
 8006d9c:	20000ef4 	.word	0x20000ef4
 8006da0:	20000ef8 	.word	0x20000ef8
 8006da4:	e000ed20 	.word	0xe000ed20
 8006da8:	2000000c 	.word	0x2000000c

08006dac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	607b      	str	r3, [r7, #4]
}
 8006dc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dc6:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <vPortEnterCritical+0x58>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	4a0d      	ldr	r2, [pc, #52]	; (8006e04 <vPortEnterCritical+0x58>)
 8006dce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <vPortEnterCritical+0x58>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d10f      	bne.n	8006df8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <vPortEnterCritical+0x5c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	603b      	str	r3, [r7, #0]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <vPortEnterCritical+0x4a>
	}
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	2000000c 	.word	0x2000000c
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <vPortExitCritical+0x4c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <vPortExitCritical+0x24>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	607b      	str	r3, [r7, #4]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <vPortExitCritical+0x4c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <vPortExitCritical+0x4c>)
 8006e38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e3a:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <vPortExitCritical+0x4c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <vPortExitCritical+0x42>
 8006e42:	2300      	movs	r3, #0
 8006e44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	f383 8811 	msr	BASEPRI, r3
}
 8006e4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr
 8006e58:	2000000c 	.word	0x2000000c
 8006e5c:	00000000 	.word	0x00000000

08006e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e60:	f3ef 8009 	mrs	r0, PSP
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <pxCurrentTCBConst>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e70:	6010      	str	r0, [r2, #0]
 8006e72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e7a:	f380 8811 	msr	BASEPRI, r0
 8006e7e:	f7ff f841 	bl	8005f04 <vTaskSwitchContext>
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f380 8811 	msr	BASEPRI, r0
 8006e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e8e:	6819      	ldr	r1, [r3, #0]
 8006e90:	6808      	ldr	r0, [r1, #0]
 8006e92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e96:	f380 8809 	msr	PSP, r0
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	4770      	bx	lr

08006ea0 <pxCurrentTCBConst>:
 8006ea0:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop

08006ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	607b      	str	r3, [r7, #4]
}
 8006ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ec2:	f7fe ff61 	bl	8005d88 <xTaskIncrementTick>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <xPortSysTickHandler+0x40>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	f383 8811 	msr	BASEPRI, r3
}
 8006ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <vPortSetupTimerInterrupt+0x30>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <vPortSetupTimerInterrupt+0x34>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006efc:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <vPortSetupTimerInterrupt+0x38>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a09      	ldr	r2, [pc, #36]	; (8006f28 <vPortSetupTimerInterrupt+0x3c>)
 8006f02:	fba2 2303 	umull	r2, r3, r2, r3
 8006f06:	099b      	lsrs	r3, r3, #6
 8006f08:	4a08      	ldr	r2, [pc, #32]	; (8006f2c <vPortSetupTimerInterrupt+0x40>)
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f0e:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <vPortSetupTimerInterrupt+0x30>)
 8006f10:	2207      	movs	r2, #7
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr
 8006f1c:	e000e010 	.word	0xe000e010
 8006f20:	e000e018 	.word	0xe000e018
 8006f24:	20000000 	.word	0x20000000
 8006f28:	10624dd3 	.word	0x10624dd3
 8006f2c:	e000e014 	.word	0xe000e014

08006f30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f36:	f3ef 8305 	mrs	r3, IPSR
 8006f3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b0f      	cmp	r3, #15
 8006f40:	d914      	bls.n	8006f6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f42:	4a16      	ldr	r2, [pc, #88]	; (8006f9c <vPortValidateInterruptPriority+0x6c>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f4c:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <vPortValidateInterruptPriority+0x70>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	7afa      	ldrb	r2, [r7, #11]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d20a      	bcs.n	8006f6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	607b      	str	r3, [r7, #4]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <vPortValidateInterruptPriority+0x74>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <vPortValidateInterruptPriority+0x78>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d90a      	bls.n	8006f92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	603b      	str	r3, [r7, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <vPortValidateInterruptPriority+0x60>
	}
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr
 8006f9c:	e000e3f0 	.word	0xe000e3f0
 8006fa0:	20000ef4 	.word	0x20000ef4
 8006fa4:	e000ed0c 	.word	0xe000ed0c
 8006fa8:	20000ef8 	.word	0x20000ef8

08006fac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fb8:	f7fe fe1a 	bl	8005bf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fbc:	4b58      	ldr	r3, [pc, #352]	; (8007120 <pvPortMalloc+0x174>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fc4:	f000 f910 	bl	80071e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fc8:	4b56      	ldr	r3, [pc, #344]	; (8007124 <pvPortMalloc+0x178>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f040 808e 	bne.w	80070f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01d      	beq.n	8007018 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006fdc:	2208      	movs	r2, #8
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d014      	beq.n	8007018 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f023 0307 	bic.w	r3, r3, #7
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <pvPortMalloc+0x6c>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	617b      	str	r3, [r7, #20]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d069      	beq.n	80070f2 <pvPortMalloc+0x146>
 800701e:	4b42      	ldr	r3, [pc, #264]	; (8007128 <pvPortMalloc+0x17c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	429a      	cmp	r2, r3
 8007026:	d864      	bhi.n	80070f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007028:	4b40      	ldr	r3, [pc, #256]	; (800712c <pvPortMalloc+0x180>)
 800702a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800702c:	4b3f      	ldr	r3, [pc, #252]	; (800712c <pvPortMalloc+0x180>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007032:	e004      	b.n	800703e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d903      	bls.n	8007050 <pvPortMalloc+0xa4>
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1f1      	bne.n	8007034 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007050:	4b33      	ldr	r3, [pc, #204]	; (8007120 <pvPortMalloc+0x174>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007056:	429a      	cmp	r2, r3
 8007058:	d04b      	beq.n	80070f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2208      	movs	r2, #8
 8007060:	4413      	add	r3, r2
 8007062:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	2308      	movs	r3, #8
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	429a      	cmp	r2, r3
 800707a:	d91f      	bls.n	80070bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800707c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4413      	add	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <pvPortMalloc+0xf8>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	613b      	str	r3, [r7, #16]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070b6:	69b8      	ldr	r0, [r7, #24]
 80070b8:	f000 f8f8 	bl	80072ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070bc:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <pvPortMalloc+0x17c>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	4a18      	ldr	r2, [pc, #96]	; (8007128 <pvPortMalloc+0x17c>)
 80070c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ca:	4b17      	ldr	r3, [pc, #92]	; (8007128 <pvPortMalloc+0x17c>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b18      	ldr	r3, [pc, #96]	; (8007130 <pvPortMalloc+0x184>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d203      	bcs.n	80070de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <pvPortMalloc+0x17c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a15      	ldr	r2, [pc, #84]	; (8007130 <pvPortMalloc+0x184>)
 80070dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	4b10      	ldr	r3, [pc, #64]	; (8007124 <pvPortMalloc+0x178>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070f2:	f7fe fd8b 	bl	8005c0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <pvPortMalloc+0x16a>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60fb      	str	r3, [r7, #12]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <pvPortMalloc+0x168>
	return pvReturn;
 8007116:	69fb      	ldr	r3, [r7, #28]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	; 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20001b04 	.word	0x20001b04
 8007124:	20001b10 	.word	0x20001b10
 8007128:	20001b08 	.word	0x20001b08
 800712c:	20001afc 	.word	0x20001afc
 8007130:	20001b0c 	.word	0x20001b0c

08007134 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d048      	beq.n	80071d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007146:	2308      	movs	r3, #8
 8007148:	425b      	negs	r3, r3
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4413      	add	r3, r2
 800714e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	4b21      	ldr	r3, [pc, #132]	; (80071e0 <vPortFree+0xac>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4013      	ands	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <vPortFree+0x44>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	60fb      	str	r3, [r7, #12]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <vPortFree+0x62>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60bb      	str	r3, [r7, #8]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <vPortFree+0xac>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d019      	beq.n	80071d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d115      	bne.n	80071d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <vPortFree+0xac>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	43db      	mvns	r3, r3
 80071b6:	401a      	ands	r2, r3
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071bc:	f7fe fd18 	bl	8005bf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <vPortFree+0xb0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	4a06      	ldr	r2, [pc, #24]	; (80071e4 <vPortFree+0xb0>)
 80071cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ce:	6938      	ldr	r0, [r7, #16]
 80071d0:	f000 f86c 	bl	80072ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071d4:	f7fe fd1a 	bl	8005c0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071d8:	bf00      	nop
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20001b10 	.word	0x20001b10
 80071e4:	20001b08 	.word	0x20001b08

080071e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <prvHeapInit+0xac>)
 80071f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3307      	adds	r3, #7
 8007206:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0307 	bic.w	r3, r3, #7
 800720e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	4a1f      	ldr	r2, [pc, #124]	; (8007294 <prvHeapInit+0xac>)
 8007218:	4413      	add	r3, r2
 800721a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007220:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <prvHeapInit+0xb0>)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007226:	4b1c      	ldr	r3, [pc, #112]	; (8007298 <prvHeapInit+0xb0>)
 8007228:	2200      	movs	r2, #0
 800722a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	4413      	add	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007234:	2208      	movs	r2, #8
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0307 	bic.w	r3, r3, #7
 8007242:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a15      	ldr	r2, [pc, #84]	; (800729c <prvHeapInit+0xb4>)
 8007248:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800724a:	4b14      	ldr	r3, [pc, #80]	; (800729c <prvHeapInit+0xb4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2200      	movs	r2, #0
 8007250:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007252:	4b12      	ldr	r3, [pc, #72]	; (800729c <prvHeapInit+0xb4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	1ad2      	subs	r2, r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007268:	4b0c      	ldr	r3, [pc, #48]	; (800729c <prvHeapInit+0xb4>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	4a0a      	ldr	r2, [pc, #40]	; (80072a0 <prvHeapInit+0xb8>)
 8007276:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <prvHeapInit+0xbc>)
 800727e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007280:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <prvHeapInit+0xc0>)
 8007282:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007286:	601a      	str	r2, [r3, #0]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000efc 	.word	0x20000efc
 8007298:	20001afc 	.word	0x20001afc
 800729c:	20001b04 	.word	0x20001b04
 80072a0:	20001b0c 	.word	0x20001b0c
 80072a4:	20001b08 	.word	0x20001b08
 80072a8:	20001b10 	.word	0x20001b10

080072ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072b4:	4b27      	ldr	r3, [pc, #156]	; (8007354 <prvInsertBlockIntoFreeList+0xa8>)
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	e002      	b.n	80072c0 <prvInsertBlockIntoFreeList+0x14>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d8f7      	bhi.n	80072ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	4413      	add	r3, r2
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d108      	bne.n	80072ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	441a      	add	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	441a      	add	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d118      	bne.n	8007334 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <prvInsertBlockIntoFreeList+0xac>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d00d      	beq.n	800732a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	441a      	add	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e008      	b.n	800733c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <prvInsertBlockIntoFreeList+0xac>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	e003      	b.n	800733c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d002      	beq.n	800734a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr
 8007354:	20001afc 	.word	0x20001afc
 8007358:	20001b04 	.word	0x20001b04

0800735c <__errno>:
 800735c:	4b01      	ldr	r3, [pc, #4]	; (8007364 <__errno+0x8>)
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000010 	.word	0x20000010

08007368 <__libc_init_array>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	2600      	movs	r6, #0
 800736c:	4d0c      	ldr	r5, [pc, #48]	; (80073a0 <__libc_init_array+0x38>)
 800736e:	4c0d      	ldr	r4, [pc, #52]	; (80073a4 <__libc_init_array+0x3c>)
 8007370:	1b64      	subs	r4, r4, r5
 8007372:	10a4      	asrs	r4, r4, #2
 8007374:	42a6      	cmp	r6, r4
 8007376:	d109      	bne.n	800738c <__libc_init_array+0x24>
 8007378:	f002 fd86 	bl	8009e88 <_init>
 800737c:	2600      	movs	r6, #0
 800737e:	4d0a      	ldr	r5, [pc, #40]	; (80073a8 <__libc_init_array+0x40>)
 8007380:	4c0a      	ldr	r4, [pc, #40]	; (80073ac <__libc_init_array+0x44>)
 8007382:	1b64      	subs	r4, r4, r5
 8007384:	10a4      	asrs	r4, r4, #2
 8007386:	42a6      	cmp	r6, r4
 8007388:	d105      	bne.n	8007396 <__libc_init_array+0x2e>
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007390:	4798      	blx	r3
 8007392:	3601      	adds	r6, #1
 8007394:	e7ee      	b.n	8007374 <__libc_init_array+0xc>
 8007396:	f855 3b04 	ldr.w	r3, [r5], #4
 800739a:	4798      	blx	r3
 800739c:	3601      	adds	r6, #1
 800739e:	e7f2      	b.n	8007386 <__libc_init_array+0x1e>
 80073a0:	0800a374 	.word	0x0800a374
 80073a4:	0800a374 	.word	0x0800a374
 80073a8:	0800a374 	.word	0x0800a374
 80073ac:	0800a378 	.word	0x0800a378

080073b0 <memcpy>:
 80073b0:	440a      	add	r2, r1
 80073b2:	4291      	cmp	r1, r2
 80073b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073b8:	d100      	bne.n	80073bc <memcpy+0xc>
 80073ba:	4770      	bx	lr
 80073bc:	b510      	push	{r4, lr}
 80073be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073c2:	4291      	cmp	r1, r2
 80073c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073c8:	d1f9      	bne.n	80073be <memcpy+0xe>
 80073ca:	bd10      	pop	{r4, pc}

080073cc <memset>:
 80073cc:	4603      	mov	r3, r0
 80073ce:	4402      	add	r2, r0
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d100      	bne.n	80073d6 <memset+0xa>
 80073d4:	4770      	bx	lr
 80073d6:	f803 1b01 	strb.w	r1, [r3], #1
 80073da:	e7f9      	b.n	80073d0 <memset+0x4>

080073dc <__cvt>:
 80073dc:	2b00      	cmp	r3, #0
 80073de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e2:	461f      	mov	r7, r3
 80073e4:	bfbb      	ittet	lt
 80073e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80073ea:	461f      	movlt	r7, r3
 80073ec:	2300      	movge	r3, #0
 80073ee:	232d      	movlt	r3, #45	; 0x2d
 80073f0:	b088      	sub	sp, #32
 80073f2:	4614      	mov	r4, r2
 80073f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80073f8:	7013      	strb	r3, [r2, #0]
 80073fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80073fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007400:	f023 0820 	bic.w	r8, r3, #32
 8007404:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007408:	d005      	beq.n	8007416 <__cvt+0x3a>
 800740a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800740e:	d100      	bne.n	8007412 <__cvt+0x36>
 8007410:	3501      	adds	r5, #1
 8007412:	2302      	movs	r3, #2
 8007414:	e000      	b.n	8007418 <__cvt+0x3c>
 8007416:	2303      	movs	r3, #3
 8007418:	aa07      	add	r2, sp, #28
 800741a:	9204      	str	r2, [sp, #16]
 800741c:	aa06      	add	r2, sp, #24
 800741e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007422:	e9cd 3500 	strd	r3, r5, [sp]
 8007426:	4622      	mov	r2, r4
 8007428:	463b      	mov	r3, r7
 800742a:	f000 fe15 	bl	8008058 <_dtoa_r>
 800742e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007432:	4606      	mov	r6, r0
 8007434:	d102      	bne.n	800743c <__cvt+0x60>
 8007436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007438:	07db      	lsls	r3, r3, #31
 800743a:	d522      	bpl.n	8007482 <__cvt+0xa6>
 800743c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007440:	eb06 0905 	add.w	r9, r6, r5
 8007444:	d110      	bne.n	8007468 <__cvt+0x8c>
 8007446:	7833      	ldrb	r3, [r6, #0]
 8007448:	2b30      	cmp	r3, #48	; 0x30
 800744a:	d10a      	bne.n	8007462 <__cvt+0x86>
 800744c:	2200      	movs	r2, #0
 800744e:	2300      	movs	r3, #0
 8007450:	4620      	mov	r0, r4
 8007452:	4639      	mov	r1, r7
 8007454:	f7f9 faa8 	bl	80009a8 <__aeabi_dcmpeq>
 8007458:	b918      	cbnz	r0, 8007462 <__cvt+0x86>
 800745a:	f1c5 0501 	rsb	r5, r5, #1
 800745e:	f8ca 5000 	str.w	r5, [sl]
 8007462:	f8da 3000 	ldr.w	r3, [sl]
 8007466:	4499      	add	r9, r3
 8007468:	2200      	movs	r2, #0
 800746a:	2300      	movs	r3, #0
 800746c:	4620      	mov	r0, r4
 800746e:	4639      	mov	r1, r7
 8007470:	f7f9 fa9a 	bl	80009a8 <__aeabi_dcmpeq>
 8007474:	b108      	cbz	r0, 800747a <__cvt+0x9e>
 8007476:	f8cd 901c 	str.w	r9, [sp, #28]
 800747a:	2230      	movs	r2, #48	; 0x30
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	454b      	cmp	r3, r9
 8007480:	d307      	bcc.n	8007492 <__cvt+0xb6>
 8007482:	4630      	mov	r0, r6
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007488:	1b9b      	subs	r3, r3, r6
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	b008      	add	sp, #32
 800748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007492:	1c59      	adds	r1, r3, #1
 8007494:	9107      	str	r1, [sp, #28]
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	e7f0      	b.n	800747c <__cvt+0xa0>

0800749a <__exponent>:
 800749a:	4603      	mov	r3, r0
 800749c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800749e:	2900      	cmp	r1, #0
 80074a0:	f803 2b02 	strb.w	r2, [r3], #2
 80074a4:	bfb6      	itet	lt
 80074a6:	222d      	movlt	r2, #45	; 0x2d
 80074a8:	222b      	movge	r2, #43	; 0x2b
 80074aa:	4249      	neglt	r1, r1
 80074ac:	2909      	cmp	r1, #9
 80074ae:	7042      	strb	r2, [r0, #1]
 80074b0:	dd2b      	ble.n	800750a <__exponent+0x70>
 80074b2:	f10d 0407 	add.w	r4, sp, #7
 80074b6:	46a4      	mov	ip, r4
 80074b8:	270a      	movs	r7, #10
 80074ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80074be:	460a      	mov	r2, r1
 80074c0:	46a6      	mov	lr, r4
 80074c2:	fb07 1516 	mls	r5, r7, r6, r1
 80074c6:	2a63      	cmp	r2, #99	; 0x63
 80074c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80074cc:	4631      	mov	r1, r6
 80074ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80074d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80074d6:	dcf0      	bgt.n	80074ba <__exponent+0x20>
 80074d8:	3130      	adds	r1, #48	; 0x30
 80074da:	f1ae 0502 	sub.w	r5, lr, #2
 80074de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80074e2:	4629      	mov	r1, r5
 80074e4:	1c44      	adds	r4, r0, #1
 80074e6:	4561      	cmp	r1, ip
 80074e8:	d30a      	bcc.n	8007500 <__exponent+0x66>
 80074ea:	f10d 0209 	add.w	r2, sp, #9
 80074ee:	eba2 020e 	sub.w	r2, r2, lr
 80074f2:	4565      	cmp	r5, ip
 80074f4:	bf88      	it	hi
 80074f6:	2200      	movhi	r2, #0
 80074f8:	4413      	add	r3, r2
 80074fa:	1a18      	subs	r0, r3, r0
 80074fc:	b003      	add	sp, #12
 80074fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007500:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007504:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007508:	e7ed      	b.n	80074e6 <__exponent+0x4c>
 800750a:	2330      	movs	r3, #48	; 0x30
 800750c:	3130      	adds	r1, #48	; 0x30
 800750e:	7083      	strb	r3, [r0, #2]
 8007510:	70c1      	strb	r1, [r0, #3]
 8007512:	1d03      	adds	r3, r0, #4
 8007514:	e7f1      	b.n	80074fa <__exponent+0x60>
	...

08007518 <_printf_float>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	b091      	sub	sp, #68	; 0x44
 800751e:	460c      	mov	r4, r1
 8007520:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007524:	4616      	mov	r6, r2
 8007526:	461f      	mov	r7, r3
 8007528:	4605      	mov	r5, r0
 800752a:	f001 fd3b 	bl	8008fa4 <_localeconv_r>
 800752e:	6803      	ldr	r3, [r0, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	9309      	str	r3, [sp, #36]	; 0x24
 8007534:	f7f8 fe0c 	bl	8000150 <strlen>
 8007538:	2300      	movs	r3, #0
 800753a:	930e      	str	r3, [sp, #56]	; 0x38
 800753c:	f8d8 3000 	ldr.w	r3, [r8]
 8007540:	900a      	str	r0, [sp, #40]	; 0x28
 8007542:	3307      	adds	r3, #7
 8007544:	f023 0307 	bic.w	r3, r3, #7
 8007548:	f103 0208 	add.w	r2, r3, #8
 800754c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007550:	f8d4 b000 	ldr.w	fp, [r4]
 8007554:	f8c8 2000 	str.w	r2, [r8]
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007560:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007564:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007568:	930b      	str	r3, [sp, #44]	; 0x2c
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	4640      	mov	r0, r8
 8007570:	4b9c      	ldr	r3, [pc, #624]	; (80077e4 <_printf_float+0x2cc>)
 8007572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007574:	f7f9 fa4a 	bl	8000a0c <__aeabi_dcmpun>
 8007578:	bb70      	cbnz	r0, 80075d8 <_printf_float+0xc0>
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	4640      	mov	r0, r8
 8007580:	4b98      	ldr	r3, [pc, #608]	; (80077e4 <_printf_float+0x2cc>)
 8007582:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007584:	f7f9 fa24 	bl	80009d0 <__aeabi_dcmple>
 8007588:	bb30      	cbnz	r0, 80075d8 <_printf_float+0xc0>
 800758a:	2200      	movs	r2, #0
 800758c:	2300      	movs	r3, #0
 800758e:	4640      	mov	r0, r8
 8007590:	4651      	mov	r1, sl
 8007592:	f7f9 fa13 	bl	80009bc <__aeabi_dcmplt>
 8007596:	b110      	cbz	r0, 800759e <_printf_float+0x86>
 8007598:	232d      	movs	r3, #45	; 0x2d
 800759a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759e:	4b92      	ldr	r3, [pc, #584]	; (80077e8 <_printf_float+0x2d0>)
 80075a0:	4892      	ldr	r0, [pc, #584]	; (80077ec <_printf_float+0x2d4>)
 80075a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80075a6:	bf94      	ite	ls
 80075a8:	4698      	movls	r8, r3
 80075aa:	4680      	movhi	r8, r0
 80075ac:	2303      	movs	r3, #3
 80075ae:	f04f 0a00 	mov.w	sl, #0
 80075b2:	6123      	str	r3, [r4, #16]
 80075b4:	f02b 0304 	bic.w	r3, fp, #4
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	4633      	mov	r3, r6
 80075bc:	4621      	mov	r1, r4
 80075be:	4628      	mov	r0, r5
 80075c0:	9700      	str	r7, [sp, #0]
 80075c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80075c4:	f000 f9d4 	bl	8007970 <_printf_common>
 80075c8:	3001      	adds	r0, #1
 80075ca:	f040 8090 	bne.w	80076ee <_printf_float+0x1d6>
 80075ce:	f04f 30ff 	mov.w	r0, #4294967295
 80075d2:	b011      	add	sp, #68	; 0x44
 80075d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d8:	4642      	mov	r2, r8
 80075da:	4653      	mov	r3, sl
 80075dc:	4640      	mov	r0, r8
 80075de:	4651      	mov	r1, sl
 80075e0:	f7f9 fa14 	bl	8000a0c <__aeabi_dcmpun>
 80075e4:	b148      	cbz	r0, 80075fa <_printf_float+0xe2>
 80075e6:	f1ba 0f00 	cmp.w	sl, #0
 80075ea:	bfb8      	it	lt
 80075ec:	232d      	movlt	r3, #45	; 0x2d
 80075ee:	4880      	ldr	r0, [pc, #512]	; (80077f0 <_printf_float+0x2d8>)
 80075f0:	bfb8      	it	lt
 80075f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075f6:	4b7f      	ldr	r3, [pc, #508]	; (80077f4 <_printf_float+0x2dc>)
 80075f8:	e7d3      	b.n	80075a2 <_printf_float+0x8a>
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	d142      	bne.n	800768a <_printf_float+0x172>
 8007604:	2306      	movs	r3, #6
 8007606:	6063      	str	r3, [r4, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	9206      	str	r2, [sp, #24]
 800760c:	aa0e      	add	r2, sp, #56	; 0x38
 800760e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007612:	aa0d      	add	r2, sp, #52	; 0x34
 8007614:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007618:	9203      	str	r2, [sp, #12]
 800761a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800761e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	6863      	ldr	r3, [r4, #4]
 8007626:	4642      	mov	r2, r8
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	4628      	mov	r0, r5
 800762c:	4653      	mov	r3, sl
 800762e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007630:	f7ff fed4 	bl	80073dc <__cvt>
 8007634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007636:	4680      	mov	r8, r0
 8007638:	2947      	cmp	r1, #71	; 0x47
 800763a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800763c:	d108      	bne.n	8007650 <_printf_float+0x138>
 800763e:	1cc8      	adds	r0, r1, #3
 8007640:	db02      	blt.n	8007648 <_printf_float+0x130>
 8007642:	6863      	ldr	r3, [r4, #4]
 8007644:	4299      	cmp	r1, r3
 8007646:	dd40      	ble.n	80076ca <_printf_float+0x1b2>
 8007648:	f1a9 0902 	sub.w	r9, r9, #2
 800764c:	fa5f f989 	uxtb.w	r9, r9
 8007650:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007654:	d81f      	bhi.n	8007696 <_printf_float+0x17e>
 8007656:	464a      	mov	r2, r9
 8007658:	3901      	subs	r1, #1
 800765a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800765e:	910d      	str	r1, [sp, #52]	; 0x34
 8007660:	f7ff ff1b 	bl	800749a <__exponent>
 8007664:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007666:	4682      	mov	sl, r0
 8007668:	1813      	adds	r3, r2, r0
 800766a:	2a01      	cmp	r2, #1
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	dc02      	bgt.n	8007676 <_printf_float+0x15e>
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	07d2      	lsls	r2, r2, #31
 8007674:	d501      	bpl.n	800767a <_printf_float+0x162>
 8007676:	3301      	adds	r3, #1
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800767e:	2b00      	cmp	r3, #0
 8007680:	d09b      	beq.n	80075ba <_printf_float+0xa2>
 8007682:	232d      	movs	r3, #45	; 0x2d
 8007684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007688:	e797      	b.n	80075ba <_printf_float+0xa2>
 800768a:	2947      	cmp	r1, #71	; 0x47
 800768c:	d1bc      	bne.n	8007608 <_printf_float+0xf0>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1ba      	bne.n	8007608 <_printf_float+0xf0>
 8007692:	2301      	movs	r3, #1
 8007694:	e7b7      	b.n	8007606 <_printf_float+0xee>
 8007696:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800769a:	d118      	bne.n	80076ce <_printf_float+0x1b6>
 800769c:	2900      	cmp	r1, #0
 800769e:	6863      	ldr	r3, [r4, #4]
 80076a0:	dd0b      	ble.n	80076ba <_printf_float+0x1a2>
 80076a2:	6121      	str	r1, [r4, #16]
 80076a4:	b913      	cbnz	r3, 80076ac <_printf_float+0x194>
 80076a6:	6822      	ldr	r2, [r4, #0]
 80076a8:	07d0      	lsls	r0, r2, #31
 80076aa:	d502      	bpl.n	80076b2 <_printf_float+0x19a>
 80076ac:	3301      	adds	r3, #1
 80076ae:	440b      	add	r3, r1
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	f04f 0a00 	mov.w	sl, #0
 80076b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80076b8:	e7df      	b.n	800767a <_printf_float+0x162>
 80076ba:	b913      	cbnz	r3, 80076c2 <_printf_float+0x1aa>
 80076bc:	6822      	ldr	r2, [r4, #0]
 80076be:	07d2      	lsls	r2, r2, #31
 80076c0:	d501      	bpl.n	80076c6 <_printf_float+0x1ae>
 80076c2:	3302      	adds	r3, #2
 80076c4:	e7f4      	b.n	80076b0 <_printf_float+0x198>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e7f2      	b.n	80076b0 <_printf_float+0x198>
 80076ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80076ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d0:	4299      	cmp	r1, r3
 80076d2:	db05      	blt.n	80076e0 <_printf_float+0x1c8>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	6121      	str	r1, [r4, #16]
 80076d8:	07d8      	lsls	r0, r3, #31
 80076da:	d5ea      	bpl.n	80076b2 <_printf_float+0x19a>
 80076dc:	1c4b      	adds	r3, r1, #1
 80076de:	e7e7      	b.n	80076b0 <_printf_float+0x198>
 80076e0:	2900      	cmp	r1, #0
 80076e2:	bfcc      	ite	gt
 80076e4:	2201      	movgt	r2, #1
 80076e6:	f1c1 0202 	rsble	r2, r1, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	e7e0      	b.n	80076b0 <_printf_float+0x198>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	055a      	lsls	r2, r3, #21
 80076f2:	d407      	bmi.n	8007704 <_printf_float+0x1ec>
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	4642      	mov	r2, r8
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	d12b      	bne.n	800775a <_printf_float+0x242>
 8007702:	e764      	b.n	80075ce <_printf_float+0xb6>
 8007704:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007708:	f240 80dd 	bls.w	80078c6 <_printf_float+0x3ae>
 800770c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007710:	2200      	movs	r2, #0
 8007712:	2300      	movs	r3, #0
 8007714:	f7f9 f948 	bl	80009a8 <__aeabi_dcmpeq>
 8007718:	2800      	cmp	r0, #0
 800771a:	d033      	beq.n	8007784 <_printf_float+0x26c>
 800771c:	2301      	movs	r3, #1
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	4a35      	ldr	r2, [pc, #212]	; (80077f8 <_printf_float+0x2e0>)
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	f43f af51 	beq.w	80075ce <_printf_float+0xb6>
 800772c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007730:	429a      	cmp	r2, r3
 8007732:	db02      	blt.n	800773a <_printf_float+0x222>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	07d8      	lsls	r0, r3, #31
 8007738:	d50f      	bpl.n	800775a <_printf_float+0x242>
 800773a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f af42 	beq.w	80075ce <_printf_float+0xb6>
 800774a:	f04f 0800 	mov.w	r8, #0
 800774e:	f104 091a 	add.w	r9, r4, #26
 8007752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007754:	3b01      	subs	r3, #1
 8007756:	4543      	cmp	r3, r8
 8007758:	dc09      	bgt.n	800776e <_printf_float+0x256>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	079b      	lsls	r3, r3, #30
 800775e:	f100 8102 	bmi.w	8007966 <_printf_float+0x44e>
 8007762:	68e0      	ldr	r0, [r4, #12]
 8007764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007766:	4298      	cmp	r0, r3
 8007768:	bfb8      	it	lt
 800776a:	4618      	movlt	r0, r3
 800776c:	e731      	b.n	80075d2 <_printf_float+0xba>
 800776e:	2301      	movs	r3, #1
 8007770:	464a      	mov	r2, r9
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	f43f af28 	beq.w	80075ce <_printf_float+0xb6>
 800777e:	f108 0801 	add.w	r8, r8, #1
 8007782:	e7e6      	b.n	8007752 <_printf_float+0x23a>
 8007784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007786:	2b00      	cmp	r3, #0
 8007788:	dc38      	bgt.n	80077fc <_printf_float+0x2e4>
 800778a:	2301      	movs	r3, #1
 800778c:	4631      	mov	r1, r6
 800778e:	4628      	mov	r0, r5
 8007790:	4a19      	ldr	r2, [pc, #100]	; (80077f8 <_printf_float+0x2e0>)
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	f43f af1a 	beq.w	80075ce <_printf_float+0xb6>
 800779a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800779e:	4313      	orrs	r3, r2
 80077a0:	d102      	bne.n	80077a8 <_printf_float+0x290>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	07d9      	lsls	r1, r3, #31
 80077a6:	d5d8      	bpl.n	800775a <_printf_float+0x242>
 80077a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	f43f af0b 	beq.w	80075ce <_printf_float+0xb6>
 80077b8:	f04f 0900 	mov.w	r9, #0
 80077bc:	f104 0a1a 	add.w	sl, r4, #26
 80077c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c2:	425b      	negs	r3, r3
 80077c4:	454b      	cmp	r3, r9
 80077c6:	dc01      	bgt.n	80077cc <_printf_float+0x2b4>
 80077c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ca:	e794      	b.n	80076f6 <_printf_float+0x1de>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4652      	mov	r2, sl
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f aef9 	beq.w	80075ce <_printf_float+0xb6>
 80077dc:	f109 0901 	add.w	r9, r9, #1
 80077e0:	e7ee      	b.n	80077c0 <_printf_float+0x2a8>
 80077e2:	bf00      	nop
 80077e4:	7fefffff 	.word	0x7fefffff
 80077e8:	08009f98 	.word	0x08009f98
 80077ec:	08009f9c 	.word	0x08009f9c
 80077f0:	08009fa4 	.word	0x08009fa4
 80077f4:	08009fa0 	.word	0x08009fa0
 80077f8:	08009fa8 	.word	0x08009fa8
 80077fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007800:	429a      	cmp	r2, r3
 8007802:	bfa8      	it	ge
 8007804:	461a      	movge	r2, r3
 8007806:	2a00      	cmp	r2, #0
 8007808:	4691      	mov	r9, r2
 800780a:	dc37      	bgt.n	800787c <_printf_float+0x364>
 800780c:	f04f 0b00 	mov.w	fp, #0
 8007810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007814:	f104 021a 	add.w	r2, r4, #26
 8007818:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800781c:	ebaa 0309 	sub.w	r3, sl, r9
 8007820:	455b      	cmp	r3, fp
 8007822:	dc33      	bgt.n	800788c <_printf_float+0x374>
 8007824:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007828:	429a      	cmp	r2, r3
 800782a:	db3b      	blt.n	80078a4 <_printf_float+0x38c>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	07da      	lsls	r2, r3, #31
 8007830:	d438      	bmi.n	80078a4 <_printf_float+0x38c>
 8007832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007834:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007836:	eba2 030a 	sub.w	r3, r2, sl
 800783a:	eba2 0901 	sub.w	r9, r2, r1
 800783e:	4599      	cmp	r9, r3
 8007840:	bfa8      	it	ge
 8007842:	4699      	movge	r9, r3
 8007844:	f1b9 0f00 	cmp.w	r9, #0
 8007848:	dc34      	bgt.n	80078b4 <_printf_float+0x39c>
 800784a:	f04f 0800 	mov.w	r8, #0
 800784e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007852:	f104 0a1a 	add.w	sl, r4, #26
 8007856:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800785a:	1a9b      	subs	r3, r3, r2
 800785c:	eba3 0309 	sub.w	r3, r3, r9
 8007860:	4543      	cmp	r3, r8
 8007862:	f77f af7a 	ble.w	800775a <_printf_float+0x242>
 8007866:	2301      	movs	r3, #1
 8007868:	4652      	mov	r2, sl
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	f43f aeac 	beq.w	80075ce <_printf_float+0xb6>
 8007876:	f108 0801 	add.w	r8, r8, #1
 800787a:	e7ec      	b.n	8007856 <_printf_float+0x33e>
 800787c:	4613      	mov	r3, r2
 800787e:	4631      	mov	r1, r6
 8007880:	4642      	mov	r2, r8
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	d1c0      	bne.n	800780c <_printf_float+0x2f4>
 800788a:	e6a0      	b.n	80075ce <_printf_float+0xb6>
 800788c:	2301      	movs	r3, #1
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	920b      	str	r2, [sp, #44]	; 0x2c
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f ae99 	beq.w	80075ce <_printf_float+0xb6>
 800789c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800789e:	f10b 0b01 	add.w	fp, fp, #1
 80078a2:	e7b9      	b.n	8007818 <_printf_float+0x300>
 80078a4:	4631      	mov	r1, r6
 80078a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b8      	blx	r7
 80078ae:	3001      	adds	r0, #1
 80078b0:	d1bf      	bne.n	8007832 <_printf_float+0x31a>
 80078b2:	e68c      	b.n	80075ce <_printf_float+0xb6>
 80078b4:	464b      	mov	r3, r9
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	eb08 020a 	add.w	r2, r8, sl
 80078be:	47b8      	blx	r7
 80078c0:	3001      	adds	r0, #1
 80078c2:	d1c2      	bne.n	800784a <_printf_float+0x332>
 80078c4:	e683      	b.n	80075ce <_printf_float+0xb6>
 80078c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	dc01      	bgt.n	80078d0 <_printf_float+0x3b8>
 80078cc:	07db      	lsls	r3, r3, #31
 80078ce:	d537      	bpl.n	8007940 <_printf_float+0x428>
 80078d0:	2301      	movs	r3, #1
 80078d2:	4642      	mov	r2, r8
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	f43f ae77 	beq.w	80075ce <_printf_float+0xb6>
 80078e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078e4:	4631      	mov	r1, r6
 80078e6:	4628      	mov	r0, r5
 80078e8:	47b8      	blx	r7
 80078ea:	3001      	adds	r0, #1
 80078ec:	f43f ae6f 	beq.w	80075ce <_printf_float+0xb6>
 80078f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078f4:	2200      	movs	r2, #0
 80078f6:	2300      	movs	r3, #0
 80078f8:	f7f9 f856 	bl	80009a8 <__aeabi_dcmpeq>
 80078fc:	b9d8      	cbnz	r0, 8007936 <_printf_float+0x41e>
 80078fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007900:	f108 0201 	add.w	r2, r8, #1
 8007904:	3b01      	subs	r3, #1
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	d10e      	bne.n	800792e <_printf_float+0x416>
 8007910:	e65d      	b.n	80075ce <_printf_float+0xb6>
 8007912:	2301      	movs	r3, #1
 8007914:	464a      	mov	r2, r9
 8007916:	4631      	mov	r1, r6
 8007918:	4628      	mov	r0, r5
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	f43f ae56 	beq.w	80075ce <_printf_float+0xb6>
 8007922:	f108 0801 	add.w	r8, r8, #1
 8007926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007928:	3b01      	subs	r3, #1
 800792a:	4543      	cmp	r3, r8
 800792c:	dcf1      	bgt.n	8007912 <_printf_float+0x3fa>
 800792e:	4653      	mov	r3, sl
 8007930:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007934:	e6e0      	b.n	80076f8 <_printf_float+0x1e0>
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	f104 091a 	add.w	r9, r4, #26
 800793e:	e7f2      	b.n	8007926 <_printf_float+0x40e>
 8007940:	2301      	movs	r3, #1
 8007942:	4642      	mov	r2, r8
 8007944:	e7df      	b.n	8007906 <_printf_float+0x3ee>
 8007946:	2301      	movs	r3, #1
 8007948:	464a      	mov	r2, r9
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	f43f ae3c 	beq.w	80075ce <_printf_float+0xb6>
 8007956:	f108 0801 	add.w	r8, r8, #1
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800795e:	1a5b      	subs	r3, r3, r1
 8007960:	4543      	cmp	r3, r8
 8007962:	dcf0      	bgt.n	8007946 <_printf_float+0x42e>
 8007964:	e6fd      	b.n	8007762 <_printf_float+0x24a>
 8007966:	f04f 0800 	mov.w	r8, #0
 800796a:	f104 0919 	add.w	r9, r4, #25
 800796e:	e7f4      	b.n	800795a <_printf_float+0x442>

08007970 <_printf_common>:
 8007970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	4616      	mov	r6, r2
 8007976:	4699      	mov	r9, r3
 8007978:	688a      	ldr	r2, [r1, #8]
 800797a:	690b      	ldr	r3, [r1, #16]
 800797c:	4607      	mov	r7, r0
 800797e:	4293      	cmp	r3, r2
 8007980:	bfb8      	it	lt
 8007982:	4613      	movlt	r3, r2
 8007984:	6033      	str	r3, [r6, #0]
 8007986:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800798a:	460c      	mov	r4, r1
 800798c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007990:	b10a      	cbz	r2, 8007996 <_printf_common+0x26>
 8007992:	3301      	adds	r3, #1
 8007994:	6033      	str	r3, [r6, #0]
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	0699      	lsls	r1, r3, #26
 800799a:	bf42      	ittt	mi
 800799c:	6833      	ldrmi	r3, [r6, #0]
 800799e:	3302      	addmi	r3, #2
 80079a0:	6033      	strmi	r3, [r6, #0]
 80079a2:	6825      	ldr	r5, [r4, #0]
 80079a4:	f015 0506 	ands.w	r5, r5, #6
 80079a8:	d106      	bne.n	80079b8 <_printf_common+0x48>
 80079aa:	f104 0a19 	add.w	sl, r4, #25
 80079ae:	68e3      	ldr	r3, [r4, #12]
 80079b0:	6832      	ldr	r2, [r6, #0]
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	42ab      	cmp	r3, r5
 80079b6:	dc28      	bgt.n	8007a0a <_printf_common+0x9a>
 80079b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079bc:	1e13      	subs	r3, r2, #0
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	bf18      	it	ne
 80079c2:	2301      	movne	r3, #1
 80079c4:	0692      	lsls	r2, r2, #26
 80079c6:	d42d      	bmi.n	8007a24 <_printf_common+0xb4>
 80079c8:	4649      	mov	r1, r9
 80079ca:	4638      	mov	r0, r7
 80079cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079d0:	47c0      	blx	r8
 80079d2:	3001      	adds	r0, #1
 80079d4:	d020      	beq.n	8007a18 <_printf_common+0xa8>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	68e5      	ldr	r5, [r4, #12]
 80079da:	f003 0306 	and.w	r3, r3, #6
 80079de:	2b04      	cmp	r3, #4
 80079e0:	bf18      	it	ne
 80079e2:	2500      	movne	r5, #0
 80079e4:	6832      	ldr	r2, [r6, #0]
 80079e6:	f04f 0600 	mov.w	r6, #0
 80079ea:	68a3      	ldr	r3, [r4, #8]
 80079ec:	bf08      	it	eq
 80079ee:	1aad      	subeq	r5, r5, r2
 80079f0:	6922      	ldr	r2, [r4, #16]
 80079f2:	bf08      	it	eq
 80079f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079f8:	4293      	cmp	r3, r2
 80079fa:	bfc4      	itt	gt
 80079fc:	1a9b      	subgt	r3, r3, r2
 80079fe:	18ed      	addgt	r5, r5, r3
 8007a00:	341a      	adds	r4, #26
 8007a02:	42b5      	cmp	r5, r6
 8007a04:	d11a      	bne.n	8007a3c <_printf_common+0xcc>
 8007a06:	2000      	movs	r0, #0
 8007a08:	e008      	b.n	8007a1c <_printf_common+0xac>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4652      	mov	r2, sl
 8007a0e:	4649      	mov	r1, r9
 8007a10:	4638      	mov	r0, r7
 8007a12:	47c0      	blx	r8
 8007a14:	3001      	adds	r0, #1
 8007a16:	d103      	bne.n	8007a20 <_printf_common+0xb0>
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a20:	3501      	adds	r5, #1
 8007a22:	e7c4      	b.n	80079ae <_printf_common+0x3e>
 8007a24:	2030      	movs	r0, #48	; 0x30
 8007a26:	18e1      	adds	r1, r4, r3
 8007a28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a2c:	1c5a      	adds	r2, r3, #1
 8007a2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a32:	4422      	add	r2, r4
 8007a34:	3302      	adds	r3, #2
 8007a36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a3a:	e7c5      	b.n	80079c8 <_printf_common+0x58>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4622      	mov	r2, r4
 8007a40:	4649      	mov	r1, r9
 8007a42:	4638      	mov	r0, r7
 8007a44:	47c0      	blx	r8
 8007a46:	3001      	adds	r0, #1
 8007a48:	d0e6      	beq.n	8007a18 <_printf_common+0xa8>
 8007a4a:	3601      	adds	r6, #1
 8007a4c:	e7d9      	b.n	8007a02 <_printf_common+0x92>
	...

08007a50 <_printf_i>:
 8007a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	460c      	mov	r4, r1
 8007a56:	7e27      	ldrb	r7, [r4, #24]
 8007a58:	4691      	mov	r9, r2
 8007a5a:	2f78      	cmp	r7, #120	; 0x78
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	469a      	mov	sl, r3
 8007a60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a66:	d807      	bhi.n	8007a78 <_printf_i+0x28>
 8007a68:	2f62      	cmp	r7, #98	; 0x62
 8007a6a:	d80a      	bhi.n	8007a82 <_printf_i+0x32>
 8007a6c:	2f00      	cmp	r7, #0
 8007a6e:	f000 80d9 	beq.w	8007c24 <_printf_i+0x1d4>
 8007a72:	2f58      	cmp	r7, #88	; 0x58
 8007a74:	f000 80a4 	beq.w	8007bc0 <_printf_i+0x170>
 8007a78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a80:	e03a      	b.n	8007af8 <_printf_i+0xa8>
 8007a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a86:	2b15      	cmp	r3, #21
 8007a88:	d8f6      	bhi.n	8007a78 <_printf_i+0x28>
 8007a8a:	a001      	add	r0, pc, #4	; (adr r0, 8007a90 <_printf_i+0x40>)
 8007a8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a90:	08007ae9 	.word	0x08007ae9
 8007a94:	08007afd 	.word	0x08007afd
 8007a98:	08007a79 	.word	0x08007a79
 8007a9c:	08007a79 	.word	0x08007a79
 8007aa0:	08007a79 	.word	0x08007a79
 8007aa4:	08007a79 	.word	0x08007a79
 8007aa8:	08007afd 	.word	0x08007afd
 8007aac:	08007a79 	.word	0x08007a79
 8007ab0:	08007a79 	.word	0x08007a79
 8007ab4:	08007a79 	.word	0x08007a79
 8007ab8:	08007a79 	.word	0x08007a79
 8007abc:	08007c0b 	.word	0x08007c0b
 8007ac0:	08007b2d 	.word	0x08007b2d
 8007ac4:	08007bed 	.word	0x08007bed
 8007ac8:	08007a79 	.word	0x08007a79
 8007acc:	08007a79 	.word	0x08007a79
 8007ad0:	08007c2d 	.word	0x08007c2d
 8007ad4:	08007a79 	.word	0x08007a79
 8007ad8:	08007b2d 	.word	0x08007b2d
 8007adc:	08007a79 	.word	0x08007a79
 8007ae0:	08007a79 	.word	0x08007a79
 8007ae4:	08007bf5 	.word	0x08007bf5
 8007ae8:	680b      	ldr	r3, [r1, #0]
 8007aea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007aee:	1d1a      	adds	r2, r3, #4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	600a      	str	r2, [r1, #0]
 8007af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007af8:	2301      	movs	r3, #1
 8007afa:	e0a4      	b.n	8007c46 <_printf_i+0x1f6>
 8007afc:	6825      	ldr	r5, [r4, #0]
 8007afe:	6808      	ldr	r0, [r1, #0]
 8007b00:	062e      	lsls	r6, r5, #24
 8007b02:	f100 0304 	add.w	r3, r0, #4
 8007b06:	d50a      	bpl.n	8007b1e <_printf_i+0xce>
 8007b08:	6805      	ldr	r5, [r0, #0]
 8007b0a:	600b      	str	r3, [r1, #0]
 8007b0c:	2d00      	cmp	r5, #0
 8007b0e:	da03      	bge.n	8007b18 <_printf_i+0xc8>
 8007b10:	232d      	movs	r3, #45	; 0x2d
 8007b12:	426d      	negs	r5, r5
 8007b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b18:	230a      	movs	r3, #10
 8007b1a:	485e      	ldr	r0, [pc, #376]	; (8007c94 <_printf_i+0x244>)
 8007b1c:	e019      	b.n	8007b52 <_printf_i+0x102>
 8007b1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b22:	6805      	ldr	r5, [r0, #0]
 8007b24:	600b      	str	r3, [r1, #0]
 8007b26:	bf18      	it	ne
 8007b28:	b22d      	sxthne	r5, r5
 8007b2a:	e7ef      	b.n	8007b0c <_printf_i+0xbc>
 8007b2c:	680b      	ldr	r3, [r1, #0]
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	1d18      	adds	r0, r3, #4
 8007b32:	6008      	str	r0, [r1, #0]
 8007b34:	0628      	lsls	r0, r5, #24
 8007b36:	d501      	bpl.n	8007b3c <_printf_i+0xec>
 8007b38:	681d      	ldr	r5, [r3, #0]
 8007b3a:	e002      	b.n	8007b42 <_printf_i+0xf2>
 8007b3c:	0669      	lsls	r1, r5, #25
 8007b3e:	d5fb      	bpl.n	8007b38 <_printf_i+0xe8>
 8007b40:	881d      	ldrh	r5, [r3, #0]
 8007b42:	2f6f      	cmp	r7, #111	; 0x6f
 8007b44:	bf0c      	ite	eq
 8007b46:	2308      	moveq	r3, #8
 8007b48:	230a      	movne	r3, #10
 8007b4a:	4852      	ldr	r0, [pc, #328]	; (8007c94 <_printf_i+0x244>)
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b52:	6866      	ldr	r6, [r4, #4]
 8007b54:	2e00      	cmp	r6, #0
 8007b56:	bfa8      	it	ge
 8007b58:	6821      	ldrge	r1, [r4, #0]
 8007b5a:	60a6      	str	r6, [r4, #8]
 8007b5c:	bfa4      	itt	ge
 8007b5e:	f021 0104 	bicge.w	r1, r1, #4
 8007b62:	6021      	strge	r1, [r4, #0]
 8007b64:	b90d      	cbnz	r5, 8007b6a <_printf_i+0x11a>
 8007b66:	2e00      	cmp	r6, #0
 8007b68:	d04d      	beq.n	8007c06 <_printf_i+0x1b6>
 8007b6a:	4616      	mov	r6, r2
 8007b6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b70:	fb03 5711 	mls	r7, r3, r1, r5
 8007b74:	5dc7      	ldrb	r7, [r0, r7]
 8007b76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b7a:	462f      	mov	r7, r5
 8007b7c:	42bb      	cmp	r3, r7
 8007b7e:	460d      	mov	r5, r1
 8007b80:	d9f4      	bls.n	8007b6c <_printf_i+0x11c>
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	d10b      	bne.n	8007b9e <_printf_i+0x14e>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	07df      	lsls	r7, r3, #31
 8007b8a:	d508      	bpl.n	8007b9e <_printf_i+0x14e>
 8007b8c:	6923      	ldr	r3, [r4, #16]
 8007b8e:	6861      	ldr	r1, [r4, #4]
 8007b90:	4299      	cmp	r1, r3
 8007b92:	bfde      	ittt	le
 8007b94:	2330      	movle	r3, #48	; 0x30
 8007b96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b9e:	1b92      	subs	r2, r2, r6
 8007ba0:	6122      	str	r2, [r4, #16]
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	f8cd a000 	str.w	sl, [sp]
 8007bac:	aa03      	add	r2, sp, #12
 8007bae:	f7ff fedf 	bl	8007970 <_printf_common>
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d14c      	bne.n	8007c50 <_printf_i+0x200>
 8007bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bba:	b004      	add	sp, #16
 8007bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc0:	4834      	ldr	r0, [pc, #208]	; (8007c94 <_printf_i+0x244>)
 8007bc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bc6:	680e      	ldr	r6, [r1, #0]
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bce:	061f      	lsls	r7, r3, #24
 8007bd0:	600e      	str	r6, [r1, #0]
 8007bd2:	d514      	bpl.n	8007bfe <_printf_i+0x1ae>
 8007bd4:	07d9      	lsls	r1, r3, #31
 8007bd6:	bf44      	itt	mi
 8007bd8:	f043 0320 	orrmi.w	r3, r3, #32
 8007bdc:	6023      	strmi	r3, [r4, #0]
 8007bde:	b91d      	cbnz	r5, 8007be8 <_printf_i+0x198>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	f023 0320 	bic.w	r3, r3, #32
 8007be6:	6023      	str	r3, [r4, #0]
 8007be8:	2310      	movs	r3, #16
 8007bea:	e7af      	b.n	8007b4c <_printf_i+0xfc>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	f043 0320 	orr.w	r3, r3, #32
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	2378      	movs	r3, #120	; 0x78
 8007bf6:	4828      	ldr	r0, [pc, #160]	; (8007c98 <_printf_i+0x248>)
 8007bf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bfc:	e7e3      	b.n	8007bc6 <_printf_i+0x176>
 8007bfe:	065e      	lsls	r6, r3, #25
 8007c00:	bf48      	it	mi
 8007c02:	b2ad      	uxthmi	r5, r5
 8007c04:	e7e6      	b.n	8007bd4 <_printf_i+0x184>
 8007c06:	4616      	mov	r6, r2
 8007c08:	e7bb      	b.n	8007b82 <_printf_i+0x132>
 8007c0a:	680b      	ldr	r3, [r1, #0]
 8007c0c:	6826      	ldr	r6, [r4, #0]
 8007c0e:	1d1d      	adds	r5, r3, #4
 8007c10:	6960      	ldr	r0, [r4, #20]
 8007c12:	600d      	str	r5, [r1, #0]
 8007c14:	0635      	lsls	r5, r6, #24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	d501      	bpl.n	8007c1e <_printf_i+0x1ce>
 8007c1a:	6018      	str	r0, [r3, #0]
 8007c1c:	e002      	b.n	8007c24 <_printf_i+0x1d4>
 8007c1e:	0671      	lsls	r1, r6, #25
 8007c20:	d5fb      	bpl.n	8007c1a <_printf_i+0x1ca>
 8007c22:	8018      	strh	r0, [r3, #0]
 8007c24:	2300      	movs	r3, #0
 8007c26:	4616      	mov	r6, r2
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	e7ba      	b.n	8007ba2 <_printf_i+0x152>
 8007c2c:	680b      	ldr	r3, [r1, #0]
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	600a      	str	r2, [r1, #0]
 8007c32:	681e      	ldr	r6, [r3, #0]
 8007c34:	2100      	movs	r1, #0
 8007c36:	4630      	mov	r0, r6
 8007c38:	6862      	ldr	r2, [r4, #4]
 8007c3a:	f001 fa27 	bl	800908c <memchr>
 8007c3e:	b108      	cbz	r0, 8007c44 <_printf_i+0x1f4>
 8007c40:	1b80      	subs	r0, r0, r6
 8007c42:	6060      	str	r0, [r4, #4]
 8007c44:	6863      	ldr	r3, [r4, #4]
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4e:	e7a8      	b.n	8007ba2 <_printf_i+0x152>
 8007c50:	4632      	mov	r2, r6
 8007c52:	4649      	mov	r1, r9
 8007c54:	4640      	mov	r0, r8
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	47d0      	blx	sl
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d0ab      	beq.n	8007bb6 <_printf_i+0x166>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	079b      	lsls	r3, r3, #30
 8007c62:	d413      	bmi.n	8007c8c <_printf_i+0x23c>
 8007c64:	68e0      	ldr	r0, [r4, #12]
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	4298      	cmp	r0, r3
 8007c6a:	bfb8      	it	lt
 8007c6c:	4618      	movlt	r0, r3
 8007c6e:	e7a4      	b.n	8007bba <_printf_i+0x16a>
 8007c70:	2301      	movs	r3, #1
 8007c72:	4632      	mov	r2, r6
 8007c74:	4649      	mov	r1, r9
 8007c76:	4640      	mov	r0, r8
 8007c78:	47d0      	blx	sl
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d09b      	beq.n	8007bb6 <_printf_i+0x166>
 8007c7e:	3501      	adds	r5, #1
 8007c80:	68e3      	ldr	r3, [r4, #12]
 8007c82:	9903      	ldr	r1, [sp, #12]
 8007c84:	1a5b      	subs	r3, r3, r1
 8007c86:	42ab      	cmp	r3, r5
 8007c88:	dcf2      	bgt.n	8007c70 <_printf_i+0x220>
 8007c8a:	e7eb      	b.n	8007c64 <_printf_i+0x214>
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	f104 0619 	add.w	r6, r4, #25
 8007c92:	e7f5      	b.n	8007c80 <_printf_i+0x230>
 8007c94:	08009faa 	.word	0x08009faa
 8007c98:	08009fbb 	.word	0x08009fbb

08007c9c <iprintf>:
 8007c9c:	b40f      	push	{r0, r1, r2, r3}
 8007c9e:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <iprintf+0x2c>)
 8007ca0:	b513      	push	{r0, r1, r4, lr}
 8007ca2:	681c      	ldr	r4, [r3, #0]
 8007ca4:	b124      	cbz	r4, 8007cb0 <iprintf+0x14>
 8007ca6:	69a3      	ldr	r3, [r4, #24]
 8007ca8:	b913      	cbnz	r3, 8007cb0 <iprintf+0x14>
 8007caa:	4620      	mov	r0, r4
 8007cac:	f001 f8dc 	bl	8008e68 <__sinit>
 8007cb0:	ab05      	add	r3, sp, #20
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	9a04      	ldr	r2, [sp, #16]
 8007cb6:	68a1      	ldr	r1, [r4, #8]
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	f001 fe53 	bl	8009964 <_vfiprintf_r>
 8007cbe:	b002      	add	sp, #8
 8007cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc4:	b004      	add	sp, #16
 8007cc6:	4770      	bx	lr
 8007cc8:	20000010 	.word	0x20000010

08007ccc <_puts_r>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	460e      	mov	r6, r1
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	b118      	cbz	r0, 8007cdc <_puts_r+0x10>
 8007cd4:	6983      	ldr	r3, [r0, #24]
 8007cd6:	b90b      	cbnz	r3, 8007cdc <_puts_r+0x10>
 8007cd8:	f001 f8c6 	bl	8008e68 <__sinit>
 8007cdc:	69ab      	ldr	r3, [r5, #24]
 8007cde:	68ac      	ldr	r4, [r5, #8]
 8007ce0:	b913      	cbnz	r3, 8007ce8 <_puts_r+0x1c>
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f001 f8c0 	bl	8008e68 <__sinit>
 8007ce8:	4b2c      	ldr	r3, [pc, #176]	; (8007d9c <_puts_r+0xd0>)
 8007cea:	429c      	cmp	r4, r3
 8007cec:	d120      	bne.n	8007d30 <_puts_r+0x64>
 8007cee:	686c      	ldr	r4, [r5, #4]
 8007cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cf2:	07db      	lsls	r3, r3, #31
 8007cf4:	d405      	bmi.n	8007d02 <_puts_r+0x36>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	0598      	lsls	r0, r3, #22
 8007cfa:	d402      	bmi.n	8007d02 <_puts_r+0x36>
 8007cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfe:	f001 f956 	bl	8008fae <__retarget_lock_acquire_recursive>
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	0719      	lsls	r1, r3, #28
 8007d06:	d51d      	bpl.n	8007d44 <_puts_r+0x78>
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	b1db      	cbz	r3, 8007d44 <_puts_r+0x78>
 8007d0c:	3e01      	subs	r6, #1
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d14:	3b01      	subs	r3, #1
 8007d16:	60a3      	str	r3, [r4, #8]
 8007d18:	bb39      	cbnz	r1, 8007d6a <_puts_r+0x9e>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da38      	bge.n	8007d90 <_puts_r+0xc4>
 8007d1e:	4622      	mov	r2, r4
 8007d20:	210a      	movs	r1, #10
 8007d22:	4628      	mov	r0, r5
 8007d24:	f000 f848 	bl	8007db8 <__swbuf_r>
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d011      	beq.n	8007d50 <_puts_r+0x84>
 8007d2c:	250a      	movs	r5, #10
 8007d2e:	e011      	b.n	8007d54 <_puts_r+0x88>
 8007d30:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <_puts_r+0xd4>)
 8007d32:	429c      	cmp	r4, r3
 8007d34:	d101      	bne.n	8007d3a <_puts_r+0x6e>
 8007d36:	68ac      	ldr	r4, [r5, #8]
 8007d38:	e7da      	b.n	8007cf0 <_puts_r+0x24>
 8007d3a:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <_puts_r+0xd8>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	bf08      	it	eq
 8007d40:	68ec      	ldreq	r4, [r5, #12]
 8007d42:	e7d5      	b.n	8007cf0 <_puts_r+0x24>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 f888 	bl	8007e5c <__swsetup_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d0dd      	beq.n	8007d0c <_puts_r+0x40>
 8007d50:	f04f 35ff 	mov.w	r5, #4294967295
 8007d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d56:	07da      	lsls	r2, r3, #31
 8007d58:	d405      	bmi.n	8007d66 <_puts_r+0x9a>
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	059b      	lsls	r3, r3, #22
 8007d5e:	d402      	bmi.n	8007d66 <_puts_r+0x9a>
 8007d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d62:	f001 f925 	bl	8008fb0 <__retarget_lock_release_recursive>
 8007d66:	4628      	mov	r0, r5
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	da04      	bge.n	8007d78 <_puts_r+0xac>
 8007d6e:	69a2      	ldr	r2, [r4, #24]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	dc06      	bgt.n	8007d82 <_puts_r+0xb6>
 8007d74:	290a      	cmp	r1, #10
 8007d76:	d004      	beq.n	8007d82 <_puts_r+0xb6>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	6022      	str	r2, [r4, #0]
 8007d7e:	7019      	strb	r1, [r3, #0]
 8007d80:	e7c5      	b.n	8007d0e <_puts_r+0x42>
 8007d82:	4622      	mov	r2, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 f817 	bl	8007db8 <__swbuf_r>
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	d1bf      	bne.n	8007d0e <_puts_r+0x42>
 8007d8e:	e7df      	b.n	8007d50 <_puts_r+0x84>
 8007d90:	250a      	movs	r5, #10
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	6022      	str	r2, [r4, #0]
 8007d98:	701d      	strb	r5, [r3, #0]
 8007d9a:	e7db      	b.n	8007d54 <_puts_r+0x88>
 8007d9c:	0800a080 	.word	0x0800a080
 8007da0:	0800a0a0 	.word	0x0800a0a0
 8007da4:	0800a060 	.word	0x0800a060

08007da8 <puts>:
 8007da8:	4b02      	ldr	r3, [pc, #8]	; (8007db4 <puts+0xc>)
 8007daa:	4601      	mov	r1, r0
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	f7ff bf8d 	b.w	8007ccc <_puts_r>
 8007db2:	bf00      	nop
 8007db4:	20000010 	.word	0x20000010

08007db8 <__swbuf_r>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	460e      	mov	r6, r1
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	b118      	cbz	r0, 8007dca <__swbuf_r+0x12>
 8007dc2:	6983      	ldr	r3, [r0, #24]
 8007dc4:	b90b      	cbnz	r3, 8007dca <__swbuf_r+0x12>
 8007dc6:	f001 f84f 	bl	8008e68 <__sinit>
 8007dca:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <__swbuf_r+0x98>)
 8007dcc:	429c      	cmp	r4, r3
 8007dce:	d12b      	bne.n	8007e28 <__swbuf_r+0x70>
 8007dd0:	686c      	ldr	r4, [r5, #4]
 8007dd2:	69a3      	ldr	r3, [r4, #24]
 8007dd4:	60a3      	str	r3, [r4, #8]
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	071a      	lsls	r2, r3, #28
 8007dda:	d52f      	bpl.n	8007e3c <__swbuf_r+0x84>
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	b36b      	cbz	r3, 8007e3c <__swbuf_r+0x84>
 8007de0:	6923      	ldr	r3, [r4, #16]
 8007de2:	6820      	ldr	r0, [r4, #0]
 8007de4:	b2f6      	uxtb	r6, r6
 8007de6:	1ac0      	subs	r0, r0, r3
 8007de8:	6963      	ldr	r3, [r4, #20]
 8007dea:	4637      	mov	r7, r6
 8007dec:	4283      	cmp	r3, r0
 8007dee:	dc04      	bgt.n	8007dfa <__swbuf_r+0x42>
 8007df0:	4621      	mov	r1, r4
 8007df2:	4628      	mov	r0, r5
 8007df4:	f000 ffa4 	bl	8008d40 <_fflush_r>
 8007df8:	bb30      	cbnz	r0, 8007e48 <__swbuf_r+0x90>
 8007dfa:	68a3      	ldr	r3, [r4, #8]
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	60a3      	str	r3, [r4, #8]
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	6022      	str	r2, [r4, #0]
 8007e08:	701e      	strb	r6, [r3, #0]
 8007e0a:	6963      	ldr	r3, [r4, #20]
 8007e0c:	4283      	cmp	r3, r0
 8007e0e:	d004      	beq.n	8007e1a <__swbuf_r+0x62>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	07db      	lsls	r3, r3, #31
 8007e14:	d506      	bpl.n	8007e24 <__swbuf_r+0x6c>
 8007e16:	2e0a      	cmp	r6, #10
 8007e18:	d104      	bne.n	8007e24 <__swbuf_r+0x6c>
 8007e1a:	4621      	mov	r1, r4
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 ff8f 	bl	8008d40 <_fflush_r>
 8007e22:	b988      	cbnz	r0, 8007e48 <__swbuf_r+0x90>
 8007e24:	4638      	mov	r0, r7
 8007e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <__swbuf_r+0x9c>)
 8007e2a:	429c      	cmp	r4, r3
 8007e2c:	d101      	bne.n	8007e32 <__swbuf_r+0x7a>
 8007e2e:	68ac      	ldr	r4, [r5, #8]
 8007e30:	e7cf      	b.n	8007dd2 <__swbuf_r+0x1a>
 8007e32:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <__swbuf_r+0xa0>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	bf08      	it	eq
 8007e38:	68ec      	ldreq	r4, [r5, #12]
 8007e3a:	e7ca      	b.n	8007dd2 <__swbuf_r+0x1a>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 f80c 	bl	8007e5c <__swsetup_r>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d0cb      	beq.n	8007de0 <__swbuf_r+0x28>
 8007e48:	f04f 37ff 	mov.w	r7, #4294967295
 8007e4c:	e7ea      	b.n	8007e24 <__swbuf_r+0x6c>
 8007e4e:	bf00      	nop
 8007e50:	0800a080 	.word	0x0800a080
 8007e54:	0800a0a0 	.word	0x0800a0a0
 8007e58:	0800a060 	.word	0x0800a060

08007e5c <__swsetup_r>:
 8007e5c:	4b32      	ldr	r3, [pc, #200]	; (8007f28 <__swsetup_r+0xcc>)
 8007e5e:	b570      	push	{r4, r5, r6, lr}
 8007e60:	681d      	ldr	r5, [r3, #0]
 8007e62:	4606      	mov	r6, r0
 8007e64:	460c      	mov	r4, r1
 8007e66:	b125      	cbz	r5, 8007e72 <__swsetup_r+0x16>
 8007e68:	69ab      	ldr	r3, [r5, #24]
 8007e6a:	b913      	cbnz	r3, 8007e72 <__swsetup_r+0x16>
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f000 fffb 	bl	8008e68 <__sinit>
 8007e72:	4b2e      	ldr	r3, [pc, #184]	; (8007f2c <__swsetup_r+0xd0>)
 8007e74:	429c      	cmp	r4, r3
 8007e76:	d10f      	bne.n	8007e98 <__swsetup_r+0x3c>
 8007e78:	686c      	ldr	r4, [r5, #4]
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e80:	0719      	lsls	r1, r3, #28
 8007e82:	d42c      	bmi.n	8007ede <__swsetup_r+0x82>
 8007e84:	06dd      	lsls	r5, r3, #27
 8007e86:	d411      	bmi.n	8007eac <__swsetup_r+0x50>
 8007e88:	2309      	movs	r3, #9
 8007e8a:	6033      	str	r3, [r6, #0]
 8007e8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295
 8007e94:	81a3      	strh	r3, [r4, #12]
 8007e96:	e03e      	b.n	8007f16 <__swsetup_r+0xba>
 8007e98:	4b25      	ldr	r3, [pc, #148]	; (8007f30 <__swsetup_r+0xd4>)
 8007e9a:	429c      	cmp	r4, r3
 8007e9c:	d101      	bne.n	8007ea2 <__swsetup_r+0x46>
 8007e9e:	68ac      	ldr	r4, [r5, #8]
 8007ea0:	e7eb      	b.n	8007e7a <__swsetup_r+0x1e>
 8007ea2:	4b24      	ldr	r3, [pc, #144]	; (8007f34 <__swsetup_r+0xd8>)
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	bf08      	it	eq
 8007ea8:	68ec      	ldreq	r4, [r5, #12]
 8007eaa:	e7e6      	b.n	8007e7a <__swsetup_r+0x1e>
 8007eac:	0758      	lsls	r0, r3, #29
 8007eae:	d512      	bpl.n	8007ed6 <__swsetup_r+0x7a>
 8007eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eb2:	b141      	cbz	r1, 8007ec6 <__swsetup_r+0x6a>
 8007eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	d002      	beq.n	8007ec2 <__swsetup_r+0x66>
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f001 fc83 	bl	80097c8 <_free_r>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	6063      	str	r3, [r4, #4]
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	f043 0308 	orr.w	r3, r3, #8
 8007edc:	81a3      	strh	r3, [r4, #12]
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	b94b      	cbnz	r3, 8007ef6 <__swsetup_r+0x9a>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eec:	d003      	beq.n	8007ef6 <__swsetup_r+0x9a>
 8007eee:	4621      	mov	r1, r4
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f001 f883 	bl	8008ffc <__smakebuf_r>
 8007ef6:	89a0      	ldrh	r0, [r4, #12]
 8007ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007efc:	f010 0301 	ands.w	r3, r0, #1
 8007f00:	d00a      	beq.n	8007f18 <__swsetup_r+0xbc>
 8007f02:	2300      	movs	r3, #0
 8007f04:	60a3      	str	r3, [r4, #8]
 8007f06:	6963      	ldr	r3, [r4, #20]
 8007f08:	425b      	negs	r3, r3
 8007f0a:	61a3      	str	r3, [r4, #24]
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	b943      	cbnz	r3, 8007f22 <__swsetup_r+0xc6>
 8007f10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f14:	d1ba      	bne.n	8007e8c <__swsetup_r+0x30>
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	0781      	lsls	r1, r0, #30
 8007f1a:	bf58      	it	pl
 8007f1c:	6963      	ldrpl	r3, [r4, #20]
 8007f1e:	60a3      	str	r3, [r4, #8]
 8007f20:	e7f4      	b.n	8007f0c <__swsetup_r+0xb0>
 8007f22:	2000      	movs	r0, #0
 8007f24:	e7f7      	b.n	8007f16 <__swsetup_r+0xba>
 8007f26:	bf00      	nop
 8007f28:	20000010 	.word	0x20000010
 8007f2c:	0800a080 	.word	0x0800a080
 8007f30:	0800a0a0 	.word	0x0800a0a0
 8007f34:	0800a060 	.word	0x0800a060

08007f38 <quorem>:
 8007f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	6903      	ldr	r3, [r0, #16]
 8007f3e:	690c      	ldr	r4, [r1, #16]
 8007f40:	4607      	mov	r7, r0
 8007f42:	42a3      	cmp	r3, r4
 8007f44:	f2c0 8083 	blt.w	800804e <quorem+0x116>
 8007f48:	3c01      	subs	r4, #1
 8007f4a:	f100 0514 	add.w	r5, r0, #20
 8007f4e:	f101 0814 	add.w	r8, r1, #20
 8007f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f60:	3301      	adds	r3, #1
 8007f62:	429a      	cmp	r2, r3
 8007f64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f70:	d332      	bcc.n	8007fd8 <quorem+0xa0>
 8007f72:	f04f 0e00 	mov.w	lr, #0
 8007f76:	4640      	mov	r0, r8
 8007f78:	46ac      	mov	ip, r5
 8007f7a:	46f2      	mov	sl, lr
 8007f7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f80:	b293      	uxth	r3, r2
 8007f82:	fb06 e303 	mla	r3, r6, r3, lr
 8007f86:	0c12      	lsrs	r2, r2, #16
 8007f88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f8c:	fb06 e202 	mla	r2, r6, r2, lr
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ebaa 0303 	sub.w	r3, sl, r3
 8007f96:	f8dc a000 	ldr.w	sl, [ip]
 8007f9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f9e:	fa1f fa8a 	uxth.w	sl, sl
 8007fa2:	4453      	add	r3, sl
 8007fa4:	fa1f fa82 	uxth.w	sl, r2
 8007fa8:	f8dc 2000 	ldr.w	r2, [ip]
 8007fac:	4581      	cmp	r9, r0
 8007fae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007fb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fbc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fc0:	f84c 3b04 	str.w	r3, [ip], #4
 8007fc4:	d2da      	bcs.n	8007f7c <quorem+0x44>
 8007fc6:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fca:	b92b      	cbnz	r3, 8007fd8 <quorem+0xa0>
 8007fcc:	9b01      	ldr	r3, [sp, #4]
 8007fce:	3b04      	subs	r3, #4
 8007fd0:	429d      	cmp	r5, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	d32f      	bcc.n	8008036 <quorem+0xfe>
 8007fd6:	613c      	str	r4, [r7, #16]
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f001 fadf 	bl	800959c <__mcmp>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	db25      	blt.n	800802e <quorem+0xf6>
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f04f 0c00 	mov.w	ip, #0
 8007fe8:	3601      	adds	r6, #1
 8007fea:	f858 1b04 	ldr.w	r1, [r8], #4
 8007fee:	f8d0 e000 	ldr.w	lr, [r0]
 8007ff2:	b28b      	uxth	r3, r1
 8007ff4:	ebac 0303 	sub.w	r3, ip, r3
 8007ff8:	fa1f f28e 	uxth.w	r2, lr
 8007ffc:	4413      	add	r3, r2
 8007ffe:	0c0a      	lsrs	r2, r1, #16
 8008000:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008004:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008008:	b29b      	uxth	r3, r3
 800800a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800800e:	45c1      	cmp	r9, r8
 8008010:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008014:	f840 3b04 	str.w	r3, [r0], #4
 8008018:	d2e7      	bcs.n	8007fea <quorem+0xb2>
 800801a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800801e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008022:	b922      	cbnz	r2, 800802e <quorem+0xf6>
 8008024:	3b04      	subs	r3, #4
 8008026:	429d      	cmp	r5, r3
 8008028:	461a      	mov	r2, r3
 800802a:	d30a      	bcc.n	8008042 <quorem+0x10a>
 800802c:	613c      	str	r4, [r7, #16]
 800802e:	4630      	mov	r0, r6
 8008030:	b003      	add	sp, #12
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	6812      	ldr	r2, [r2, #0]
 8008038:	3b04      	subs	r3, #4
 800803a:	2a00      	cmp	r2, #0
 800803c:	d1cb      	bne.n	8007fd6 <quorem+0x9e>
 800803e:	3c01      	subs	r4, #1
 8008040:	e7c6      	b.n	8007fd0 <quorem+0x98>
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	3b04      	subs	r3, #4
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1f0      	bne.n	800802c <quorem+0xf4>
 800804a:	3c01      	subs	r4, #1
 800804c:	e7eb      	b.n	8008026 <quorem+0xee>
 800804e:	2000      	movs	r0, #0
 8008050:	e7ee      	b.n	8008030 <quorem+0xf8>
 8008052:	0000      	movs	r0, r0
 8008054:	0000      	movs	r0, r0
	...

08008058 <_dtoa_r>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	4616      	mov	r6, r2
 800805e:	461f      	mov	r7, r3
 8008060:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008062:	b099      	sub	sp, #100	; 0x64
 8008064:	4605      	mov	r5, r0
 8008066:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800806a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800806e:	b974      	cbnz	r4, 800808e <_dtoa_r+0x36>
 8008070:	2010      	movs	r0, #16
 8008072:	f001 f803 	bl	800907c <malloc>
 8008076:	4602      	mov	r2, r0
 8008078:	6268      	str	r0, [r5, #36]	; 0x24
 800807a:	b920      	cbnz	r0, 8008086 <_dtoa_r+0x2e>
 800807c:	21ea      	movs	r1, #234	; 0xea
 800807e:	4bae      	ldr	r3, [pc, #696]	; (8008338 <_dtoa_r+0x2e0>)
 8008080:	48ae      	ldr	r0, [pc, #696]	; (800833c <_dtoa_r+0x2e4>)
 8008082:	f001 fe05 	bl	8009c90 <__assert_func>
 8008086:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800808a:	6004      	str	r4, [r0, #0]
 800808c:	60c4      	str	r4, [r0, #12]
 800808e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008090:	6819      	ldr	r1, [r3, #0]
 8008092:	b151      	cbz	r1, 80080aa <_dtoa_r+0x52>
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	2301      	movs	r3, #1
 8008098:	4093      	lsls	r3, r2
 800809a:	604a      	str	r2, [r1, #4]
 800809c:	608b      	str	r3, [r1, #8]
 800809e:	4628      	mov	r0, r5
 80080a0:	f001 f842 	bl	8009128 <_Bfree>
 80080a4:	2200      	movs	r2, #0
 80080a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	1e3b      	subs	r3, r7, #0
 80080ac:	bfaf      	iteee	ge
 80080ae:	2300      	movge	r3, #0
 80080b0:	2201      	movlt	r2, #1
 80080b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080b6:	9305      	strlt	r3, [sp, #20]
 80080b8:	bfa8      	it	ge
 80080ba:	f8c8 3000 	strge.w	r3, [r8]
 80080be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80080c2:	4b9f      	ldr	r3, [pc, #636]	; (8008340 <_dtoa_r+0x2e8>)
 80080c4:	bfb8      	it	lt
 80080c6:	f8c8 2000 	strlt.w	r2, [r8]
 80080ca:	ea33 0309 	bics.w	r3, r3, r9
 80080ce:	d119      	bne.n	8008104 <_dtoa_r+0xac>
 80080d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80080d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080dc:	4333      	orrs	r3, r6
 80080de:	f000 8580 	beq.w	8008be2 <_dtoa_r+0xb8a>
 80080e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080e4:	b953      	cbnz	r3, 80080fc <_dtoa_r+0xa4>
 80080e6:	4b97      	ldr	r3, [pc, #604]	; (8008344 <_dtoa_r+0x2ec>)
 80080e8:	e022      	b.n	8008130 <_dtoa_r+0xd8>
 80080ea:	4b97      	ldr	r3, [pc, #604]	; (8008348 <_dtoa_r+0x2f0>)
 80080ec:	9308      	str	r3, [sp, #32]
 80080ee:	3308      	adds	r3, #8
 80080f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	9808      	ldr	r0, [sp, #32]
 80080f6:	b019      	add	sp, #100	; 0x64
 80080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fc:	4b91      	ldr	r3, [pc, #580]	; (8008344 <_dtoa_r+0x2ec>)
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	3303      	adds	r3, #3
 8008102:	e7f5      	b.n	80080f0 <_dtoa_r+0x98>
 8008104:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008108:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800810c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	f7f8 fc48 	bl	80009a8 <__aeabi_dcmpeq>
 8008118:	4680      	mov	r8, r0
 800811a:	b158      	cbz	r0, 8008134 <_dtoa_r+0xdc>
 800811c:	2301      	movs	r3, #1
 800811e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 8559 	beq.w	8008bdc <_dtoa_r+0xb84>
 800812a:	4888      	ldr	r0, [pc, #544]	; (800834c <_dtoa_r+0x2f4>)
 800812c:	6018      	str	r0, [r3, #0]
 800812e:	1e43      	subs	r3, r0, #1
 8008130:	9308      	str	r3, [sp, #32]
 8008132:	e7df      	b.n	80080f4 <_dtoa_r+0x9c>
 8008134:	ab16      	add	r3, sp, #88	; 0x58
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	ab17      	add	r3, sp, #92	; 0x5c
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	4628      	mov	r0, r5
 800813e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008142:	f001 fad7 	bl	80096f4 <__d2b>
 8008146:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800814a:	4682      	mov	sl, r0
 800814c:	2c00      	cmp	r4, #0
 800814e:	d07e      	beq.n	800824e <_dtoa_r+0x1f6>
 8008150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008156:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800815a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800815e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008162:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008166:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800816a:	2200      	movs	r2, #0
 800816c:	4b78      	ldr	r3, [pc, #480]	; (8008350 <_dtoa_r+0x2f8>)
 800816e:	f7f7 fffb 	bl	8000168 <__aeabi_dsub>
 8008172:	a36b      	add	r3, pc, #428	; (adr r3, 8008320 <_dtoa_r+0x2c8>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f9ae 	bl	80004d8 <__aeabi_dmul>
 800817c:	a36a      	add	r3, pc, #424	; (adr r3, 8008328 <_dtoa_r+0x2d0>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f7f7 fff3 	bl	800016c <__adddf3>
 8008186:	4606      	mov	r6, r0
 8008188:	4620      	mov	r0, r4
 800818a:	460f      	mov	r7, r1
 800818c:	f7f8 f93a 	bl	8000404 <__aeabi_i2d>
 8008190:	a367      	add	r3, pc, #412	; (adr r3, 8008330 <_dtoa_r+0x2d8>)
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f7f8 f99f 	bl	80004d8 <__aeabi_dmul>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4630      	mov	r0, r6
 80081a0:	4639      	mov	r1, r7
 80081a2:	f7f7 ffe3 	bl	800016c <__adddf3>
 80081a6:	4606      	mov	r6, r0
 80081a8:	460f      	mov	r7, r1
 80081aa:	f7f8 fc45 	bl	8000a38 <__aeabi_d2iz>
 80081ae:	2200      	movs	r2, #0
 80081b0:	4681      	mov	r9, r0
 80081b2:	2300      	movs	r3, #0
 80081b4:	4630      	mov	r0, r6
 80081b6:	4639      	mov	r1, r7
 80081b8:	f7f8 fc00 	bl	80009bc <__aeabi_dcmplt>
 80081bc:	b148      	cbz	r0, 80081d2 <_dtoa_r+0x17a>
 80081be:	4648      	mov	r0, r9
 80081c0:	f7f8 f920 	bl	8000404 <__aeabi_i2d>
 80081c4:	4632      	mov	r2, r6
 80081c6:	463b      	mov	r3, r7
 80081c8:	f7f8 fbee 	bl	80009a8 <__aeabi_dcmpeq>
 80081cc:	b908      	cbnz	r0, 80081d2 <_dtoa_r+0x17a>
 80081ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80081d2:	f1b9 0f16 	cmp.w	r9, #22
 80081d6:	d857      	bhi.n	8008288 <_dtoa_r+0x230>
 80081d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081dc:	4b5d      	ldr	r3, [pc, #372]	; (8008354 <_dtoa_r+0x2fc>)
 80081de:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f7f8 fbe9 	bl	80009bc <__aeabi_dcmplt>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d04e      	beq.n	800828c <_dtoa_r+0x234>
 80081ee:	2300      	movs	r3, #0
 80081f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80081f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081f8:	1b1c      	subs	r4, r3, r4
 80081fa:	1e63      	subs	r3, r4, #1
 80081fc:	9309      	str	r3, [sp, #36]	; 0x24
 80081fe:	bf49      	itett	mi
 8008200:	f1c4 0301 	rsbmi	r3, r4, #1
 8008204:	2300      	movpl	r3, #0
 8008206:	9306      	strmi	r3, [sp, #24]
 8008208:	2300      	movmi	r3, #0
 800820a:	bf54      	ite	pl
 800820c:	9306      	strpl	r3, [sp, #24]
 800820e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008210:	f1b9 0f00 	cmp.w	r9, #0
 8008214:	db3c      	blt.n	8008290 <_dtoa_r+0x238>
 8008216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008218:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800821c:	444b      	add	r3, r9
 800821e:	9309      	str	r3, [sp, #36]	; 0x24
 8008220:	2300      	movs	r3, #0
 8008222:	930a      	str	r3, [sp, #40]	; 0x28
 8008224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008226:	2b09      	cmp	r3, #9
 8008228:	d86c      	bhi.n	8008304 <_dtoa_r+0x2ac>
 800822a:	2b05      	cmp	r3, #5
 800822c:	bfc4      	itt	gt
 800822e:	3b04      	subgt	r3, #4
 8008230:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008232:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008234:	bfc8      	it	gt
 8008236:	2400      	movgt	r4, #0
 8008238:	f1a3 0302 	sub.w	r3, r3, #2
 800823c:	bfd8      	it	le
 800823e:	2401      	movle	r4, #1
 8008240:	2b03      	cmp	r3, #3
 8008242:	f200 808b 	bhi.w	800835c <_dtoa_r+0x304>
 8008246:	e8df f003 	tbb	[pc, r3]
 800824a:	4f2d      	.short	0x4f2d
 800824c:	5b4d      	.short	0x5b4d
 800824e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008252:	441c      	add	r4, r3
 8008254:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008258:	2b20      	cmp	r3, #32
 800825a:	bfc3      	ittte	gt
 800825c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008260:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008264:	fa09 f303 	lslgt.w	r3, r9, r3
 8008268:	f1c3 0320 	rsble	r3, r3, #32
 800826c:	bfc6      	itte	gt
 800826e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008272:	4318      	orrgt	r0, r3
 8008274:	fa06 f003 	lslle.w	r0, r6, r3
 8008278:	f7f8 f8b4 	bl	80003e4 <__aeabi_ui2d>
 800827c:	2301      	movs	r3, #1
 800827e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008282:	3c01      	subs	r4, #1
 8008284:	9313      	str	r3, [sp, #76]	; 0x4c
 8008286:	e770      	b.n	800816a <_dtoa_r+0x112>
 8008288:	2301      	movs	r3, #1
 800828a:	e7b3      	b.n	80081f4 <_dtoa_r+0x19c>
 800828c:	900f      	str	r0, [sp, #60]	; 0x3c
 800828e:	e7b2      	b.n	80081f6 <_dtoa_r+0x19e>
 8008290:	9b06      	ldr	r3, [sp, #24]
 8008292:	eba3 0309 	sub.w	r3, r3, r9
 8008296:	9306      	str	r3, [sp, #24]
 8008298:	f1c9 0300 	rsb	r3, r9, #0
 800829c:	930a      	str	r3, [sp, #40]	; 0x28
 800829e:	2300      	movs	r3, #0
 80082a0:	930e      	str	r3, [sp, #56]	; 0x38
 80082a2:	e7bf      	b.n	8008224 <_dtoa_r+0x1cc>
 80082a4:	2300      	movs	r3, #0
 80082a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dc59      	bgt.n	8008362 <_dtoa_r+0x30a>
 80082ae:	f04f 0b01 	mov.w	fp, #1
 80082b2:	465b      	mov	r3, fp
 80082b4:	f8cd b008 	str.w	fp, [sp, #8]
 80082b8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80082bc:	2200      	movs	r2, #0
 80082be:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80082c0:	6042      	str	r2, [r0, #4]
 80082c2:	2204      	movs	r2, #4
 80082c4:	f102 0614 	add.w	r6, r2, #20
 80082c8:	429e      	cmp	r6, r3
 80082ca:	6841      	ldr	r1, [r0, #4]
 80082cc:	d94f      	bls.n	800836e <_dtoa_r+0x316>
 80082ce:	4628      	mov	r0, r5
 80082d0:	f000 feea 	bl	80090a8 <_Balloc>
 80082d4:	9008      	str	r0, [sp, #32]
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d14d      	bne.n	8008376 <_dtoa_r+0x31e>
 80082da:	4602      	mov	r2, r0
 80082dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082e0:	4b1d      	ldr	r3, [pc, #116]	; (8008358 <_dtoa_r+0x300>)
 80082e2:	e6cd      	b.n	8008080 <_dtoa_r+0x28>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e7de      	b.n	80082a6 <_dtoa_r+0x24e>
 80082e8:	2300      	movs	r3, #0
 80082ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082ee:	eb09 0b03 	add.w	fp, r9, r3
 80082f2:	f10b 0301 	add.w	r3, fp, #1
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	9302      	str	r3, [sp, #8]
 80082fa:	bfb8      	it	lt
 80082fc:	2301      	movlt	r3, #1
 80082fe:	e7dd      	b.n	80082bc <_dtoa_r+0x264>
 8008300:	2301      	movs	r3, #1
 8008302:	e7f2      	b.n	80082ea <_dtoa_r+0x292>
 8008304:	2401      	movs	r4, #1
 8008306:	2300      	movs	r3, #0
 8008308:	940b      	str	r4, [sp, #44]	; 0x2c
 800830a:	9322      	str	r3, [sp, #136]	; 0x88
 800830c:	f04f 3bff 	mov.w	fp, #4294967295
 8008310:	2200      	movs	r2, #0
 8008312:	2312      	movs	r3, #18
 8008314:	f8cd b008 	str.w	fp, [sp, #8]
 8008318:	9223      	str	r2, [sp, #140]	; 0x8c
 800831a:	e7cf      	b.n	80082bc <_dtoa_r+0x264>
 800831c:	f3af 8000 	nop.w
 8008320:	636f4361 	.word	0x636f4361
 8008324:	3fd287a7 	.word	0x3fd287a7
 8008328:	8b60c8b3 	.word	0x8b60c8b3
 800832c:	3fc68a28 	.word	0x3fc68a28
 8008330:	509f79fb 	.word	0x509f79fb
 8008334:	3fd34413 	.word	0x3fd34413
 8008338:	08009fd9 	.word	0x08009fd9
 800833c:	08009ff0 	.word	0x08009ff0
 8008340:	7ff00000 	.word	0x7ff00000
 8008344:	08009fd5 	.word	0x08009fd5
 8008348:	08009fcc 	.word	0x08009fcc
 800834c:	08009fa9 	.word	0x08009fa9
 8008350:	3ff80000 	.word	0x3ff80000
 8008354:	0800a148 	.word	0x0800a148
 8008358:	0800a04f 	.word	0x0800a04f
 800835c:	2301      	movs	r3, #1
 800835e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008360:	e7d4      	b.n	800830c <_dtoa_r+0x2b4>
 8008362:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008366:	465b      	mov	r3, fp
 8008368:	f8cd b008 	str.w	fp, [sp, #8]
 800836c:	e7a6      	b.n	80082bc <_dtoa_r+0x264>
 800836e:	3101      	adds	r1, #1
 8008370:	6041      	str	r1, [r0, #4]
 8008372:	0052      	lsls	r2, r2, #1
 8008374:	e7a6      	b.n	80082c4 <_dtoa_r+0x26c>
 8008376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008378:	9a08      	ldr	r2, [sp, #32]
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	2b0e      	cmp	r3, #14
 8008380:	f200 80a8 	bhi.w	80084d4 <_dtoa_r+0x47c>
 8008384:	2c00      	cmp	r4, #0
 8008386:	f000 80a5 	beq.w	80084d4 <_dtoa_r+0x47c>
 800838a:	f1b9 0f00 	cmp.w	r9, #0
 800838e:	dd34      	ble.n	80083fa <_dtoa_r+0x3a2>
 8008390:	4a9a      	ldr	r2, [pc, #616]	; (80085fc <_dtoa_r+0x5a4>)
 8008392:	f009 030f 	and.w	r3, r9, #15
 8008396:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800839a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800839e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80083a6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80083aa:	d016      	beq.n	80083da <_dtoa_r+0x382>
 80083ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083b0:	4b93      	ldr	r3, [pc, #588]	; (8008600 <_dtoa_r+0x5a8>)
 80083b2:	2703      	movs	r7, #3
 80083b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083b8:	f7f8 f9b8 	bl	800072c <__aeabi_ddiv>
 80083bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083c0:	f004 040f 	and.w	r4, r4, #15
 80083c4:	4e8e      	ldr	r6, [pc, #568]	; (8008600 <_dtoa_r+0x5a8>)
 80083c6:	b954      	cbnz	r4, 80083de <_dtoa_r+0x386>
 80083c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083d0:	f7f8 f9ac 	bl	800072c <__aeabi_ddiv>
 80083d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083d8:	e029      	b.n	800842e <_dtoa_r+0x3d6>
 80083da:	2702      	movs	r7, #2
 80083dc:	e7f2      	b.n	80083c4 <_dtoa_r+0x36c>
 80083de:	07e1      	lsls	r1, r4, #31
 80083e0:	d508      	bpl.n	80083f4 <_dtoa_r+0x39c>
 80083e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083ea:	f7f8 f875 	bl	80004d8 <__aeabi_dmul>
 80083ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083f2:	3701      	adds	r7, #1
 80083f4:	1064      	asrs	r4, r4, #1
 80083f6:	3608      	adds	r6, #8
 80083f8:	e7e5      	b.n	80083c6 <_dtoa_r+0x36e>
 80083fa:	f000 80a5 	beq.w	8008548 <_dtoa_r+0x4f0>
 80083fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008402:	f1c9 0400 	rsb	r4, r9, #0
 8008406:	4b7d      	ldr	r3, [pc, #500]	; (80085fc <_dtoa_r+0x5a4>)
 8008408:	f004 020f 	and.w	r2, r4, #15
 800840c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f7f8 f860 	bl	80004d8 <__aeabi_dmul>
 8008418:	2702      	movs	r7, #2
 800841a:	2300      	movs	r3, #0
 800841c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008420:	4e77      	ldr	r6, [pc, #476]	; (8008600 <_dtoa_r+0x5a8>)
 8008422:	1124      	asrs	r4, r4, #4
 8008424:	2c00      	cmp	r4, #0
 8008426:	f040 8084 	bne.w	8008532 <_dtoa_r+0x4da>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1d2      	bne.n	80083d4 <_dtoa_r+0x37c>
 800842e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 808b 	beq.w	800854c <_dtoa_r+0x4f4>
 8008436:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800843a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800843e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008442:	2200      	movs	r2, #0
 8008444:	4b6f      	ldr	r3, [pc, #444]	; (8008604 <_dtoa_r+0x5ac>)
 8008446:	f7f8 fab9 	bl	80009bc <__aeabi_dcmplt>
 800844a:	2800      	cmp	r0, #0
 800844c:	d07e      	beq.n	800854c <_dtoa_r+0x4f4>
 800844e:	9b02      	ldr	r3, [sp, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d07b      	beq.n	800854c <_dtoa_r+0x4f4>
 8008454:	f1bb 0f00 	cmp.w	fp, #0
 8008458:	dd38      	ble.n	80084cc <_dtoa_r+0x474>
 800845a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800845e:	2200      	movs	r2, #0
 8008460:	4b69      	ldr	r3, [pc, #420]	; (8008608 <_dtoa_r+0x5b0>)
 8008462:	f7f8 f839 	bl	80004d8 <__aeabi_dmul>
 8008466:	465c      	mov	r4, fp
 8008468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800846c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008470:	3701      	adds	r7, #1
 8008472:	4638      	mov	r0, r7
 8008474:	f7f7 ffc6 	bl	8000404 <__aeabi_i2d>
 8008478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800847c:	f7f8 f82c 	bl	80004d8 <__aeabi_dmul>
 8008480:	2200      	movs	r2, #0
 8008482:	4b62      	ldr	r3, [pc, #392]	; (800860c <_dtoa_r+0x5b4>)
 8008484:	f7f7 fe72 	bl	800016c <__adddf3>
 8008488:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800848c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008490:	9611      	str	r6, [sp, #68]	; 0x44
 8008492:	2c00      	cmp	r4, #0
 8008494:	d15d      	bne.n	8008552 <_dtoa_r+0x4fa>
 8008496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800849a:	2200      	movs	r2, #0
 800849c:	4b5c      	ldr	r3, [pc, #368]	; (8008610 <_dtoa_r+0x5b8>)
 800849e:	f7f7 fe63 	bl	8000168 <__aeabi_dsub>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084aa:	4633      	mov	r3, r6
 80084ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084ae:	f7f8 faa3 	bl	80009f8 <__aeabi_dcmpgt>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f040 829e 	bne.w	80089f4 <_dtoa_r+0x99c>
 80084b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084c2:	f7f8 fa7b 	bl	80009bc <__aeabi_dcmplt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f040 8292 	bne.w	80089f0 <_dtoa_r+0x998>
 80084cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80084d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f2c0 8153 	blt.w	8008782 <_dtoa_r+0x72a>
 80084dc:	f1b9 0f0e 	cmp.w	r9, #14
 80084e0:	f300 814f 	bgt.w	8008782 <_dtoa_r+0x72a>
 80084e4:	4b45      	ldr	r3, [pc, #276]	; (80085fc <_dtoa_r+0x5a4>)
 80084e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80084ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80084f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f280 80db 	bge.w	80086b0 <_dtoa_r+0x658>
 80084fa:	9b02      	ldr	r3, [sp, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f300 80d7 	bgt.w	80086b0 <_dtoa_r+0x658>
 8008502:	f040 8274 	bne.w	80089ee <_dtoa_r+0x996>
 8008506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800850a:	2200      	movs	r2, #0
 800850c:	4b40      	ldr	r3, [pc, #256]	; (8008610 <_dtoa_r+0x5b8>)
 800850e:	f7f7 ffe3 	bl	80004d8 <__aeabi_dmul>
 8008512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008516:	f7f8 fa65 	bl	80009e4 <__aeabi_dcmpge>
 800851a:	9c02      	ldr	r4, [sp, #8]
 800851c:	4626      	mov	r6, r4
 800851e:	2800      	cmp	r0, #0
 8008520:	f040 824a 	bne.w	80089b8 <_dtoa_r+0x960>
 8008524:	2331      	movs	r3, #49	; 0x31
 8008526:	9f08      	ldr	r7, [sp, #32]
 8008528:	f109 0901 	add.w	r9, r9, #1
 800852c:	f807 3b01 	strb.w	r3, [r7], #1
 8008530:	e246      	b.n	80089c0 <_dtoa_r+0x968>
 8008532:	07e2      	lsls	r2, r4, #31
 8008534:	d505      	bpl.n	8008542 <_dtoa_r+0x4ea>
 8008536:	e9d6 2300 	ldrd	r2, r3, [r6]
 800853a:	f7f7 ffcd 	bl	80004d8 <__aeabi_dmul>
 800853e:	2301      	movs	r3, #1
 8008540:	3701      	adds	r7, #1
 8008542:	1064      	asrs	r4, r4, #1
 8008544:	3608      	adds	r6, #8
 8008546:	e76d      	b.n	8008424 <_dtoa_r+0x3cc>
 8008548:	2702      	movs	r7, #2
 800854a:	e770      	b.n	800842e <_dtoa_r+0x3d6>
 800854c:	46c8      	mov	r8, r9
 800854e:	9c02      	ldr	r4, [sp, #8]
 8008550:	e78f      	b.n	8008472 <_dtoa_r+0x41a>
 8008552:	9908      	ldr	r1, [sp, #32]
 8008554:	4b29      	ldr	r3, [pc, #164]	; (80085fc <_dtoa_r+0x5a4>)
 8008556:	4421      	add	r1, r4
 8008558:	9112      	str	r1, [sp, #72]	; 0x48
 800855a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800855c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008560:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008564:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008568:	2900      	cmp	r1, #0
 800856a:	d055      	beq.n	8008618 <_dtoa_r+0x5c0>
 800856c:	2000      	movs	r0, #0
 800856e:	4929      	ldr	r1, [pc, #164]	; (8008614 <_dtoa_r+0x5bc>)
 8008570:	f7f8 f8dc 	bl	800072c <__aeabi_ddiv>
 8008574:	463b      	mov	r3, r7
 8008576:	4632      	mov	r2, r6
 8008578:	f7f7 fdf6 	bl	8000168 <__aeabi_dsub>
 800857c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008580:	9f08      	ldr	r7, [sp, #32]
 8008582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008586:	f7f8 fa57 	bl	8000a38 <__aeabi_d2iz>
 800858a:	4604      	mov	r4, r0
 800858c:	f7f7 ff3a 	bl	8000404 <__aeabi_i2d>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008598:	f7f7 fde6 	bl	8000168 <__aeabi_dsub>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	3430      	adds	r4, #48	; 0x30
 80085a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085aa:	f807 4b01 	strb.w	r4, [r7], #1
 80085ae:	f7f8 fa05 	bl	80009bc <__aeabi_dcmplt>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d174      	bne.n	80086a0 <_dtoa_r+0x648>
 80085b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ba:	2000      	movs	r0, #0
 80085bc:	4911      	ldr	r1, [pc, #68]	; (8008604 <_dtoa_r+0x5ac>)
 80085be:	f7f7 fdd3 	bl	8000168 <__aeabi_dsub>
 80085c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085c6:	f7f8 f9f9 	bl	80009bc <__aeabi_dcmplt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f040 80b6 	bne.w	800873c <_dtoa_r+0x6e4>
 80085d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085d2:	429f      	cmp	r7, r3
 80085d4:	f43f af7a 	beq.w	80084cc <_dtoa_r+0x474>
 80085d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085dc:	2200      	movs	r2, #0
 80085de:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <_dtoa_r+0x5b0>)
 80085e0:	f7f7 ff7a 	bl	80004d8 <__aeabi_dmul>
 80085e4:	2200      	movs	r2, #0
 80085e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085ee:	4b06      	ldr	r3, [pc, #24]	; (8008608 <_dtoa_r+0x5b0>)
 80085f0:	f7f7 ff72 	bl	80004d8 <__aeabi_dmul>
 80085f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085f8:	e7c3      	b.n	8008582 <_dtoa_r+0x52a>
 80085fa:	bf00      	nop
 80085fc:	0800a148 	.word	0x0800a148
 8008600:	0800a120 	.word	0x0800a120
 8008604:	3ff00000 	.word	0x3ff00000
 8008608:	40240000 	.word	0x40240000
 800860c:	401c0000 	.word	0x401c0000
 8008610:	40140000 	.word	0x40140000
 8008614:	3fe00000 	.word	0x3fe00000
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	f7f7 ff5c 	bl	80004d8 <__aeabi_dmul>
 8008620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008622:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008626:	9c08      	ldr	r4, [sp, #32]
 8008628:	9314      	str	r3, [sp, #80]	; 0x50
 800862a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800862e:	f7f8 fa03 	bl	8000a38 <__aeabi_d2iz>
 8008632:	9015      	str	r0, [sp, #84]	; 0x54
 8008634:	f7f7 fee6 	bl	8000404 <__aeabi_i2d>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008640:	f7f7 fd92 	bl	8000168 <__aeabi_dsub>
 8008644:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008646:	4606      	mov	r6, r0
 8008648:	3330      	adds	r3, #48	; 0x30
 800864a:	f804 3b01 	strb.w	r3, [r4], #1
 800864e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008650:	460f      	mov	r7, r1
 8008652:	429c      	cmp	r4, r3
 8008654:	f04f 0200 	mov.w	r2, #0
 8008658:	d124      	bne.n	80086a4 <_dtoa_r+0x64c>
 800865a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800865e:	4bb3      	ldr	r3, [pc, #716]	; (800892c <_dtoa_r+0x8d4>)
 8008660:	f7f7 fd84 	bl	800016c <__adddf3>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	f7f8 f9c4 	bl	80009f8 <__aeabi_dcmpgt>
 8008670:	2800      	cmp	r0, #0
 8008672:	d162      	bne.n	800873a <_dtoa_r+0x6e2>
 8008674:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008678:	2000      	movs	r0, #0
 800867a:	49ac      	ldr	r1, [pc, #688]	; (800892c <_dtoa_r+0x8d4>)
 800867c:	f7f7 fd74 	bl	8000168 <__aeabi_dsub>
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	4630      	mov	r0, r6
 8008686:	4639      	mov	r1, r7
 8008688:	f7f8 f998 	bl	80009bc <__aeabi_dcmplt>
 800868c:	2800      	cmp	r0, #0
 800868e:	f43f af1d 	beq.w	80084cc <_dtoa_r+0x474>
 8008692:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008694:	1e7b      	subs	r3, r7, #1
 8008696:	9314      	str	r3, [sp, #80]	; 0x50
 8008698:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800869c:	2b30      	cmp	r3, #48	; 0x30
 800869e:	d0f8      	beq.n	8008692 <_dtoa_r+0x63a>
 80086a0:	46c1      	mov	r9, r8
 80086a2:	e03a      	b.n	800871a <_dtoa_r+0x6c2>
 80086a4:	4ba2      	ldr	r3, [pc, #648]	; (8008930 <_dtoa_r+0x8d8>)
 80086a6:	f7f7 ff17 	bl	80004d8 <__aeabi_dmul>
 80086aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ae:	e7bc      	b.n	800862a <_dtoa_r+0x5d2>
 80086b0:	9f08      	ldr	r7, [sp, #32]
 80086b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ba:	f7f8 f837 	bl	800072c <__aeabi_ddiv>
 80086be:	f7f8 f9bb 	bl	8000a38 <__aeabi_d2iz>
 80086c2:	4604      	mov	r4, r0
 80086c4:	f7f7 fe9e 	bl	8000404 <__aeabi_i2d>
 80086c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086cc:	f7f7 ff04 	bl	80004d8 <__aeabi_dmul>
 80086d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80086d4:	460b      	mov	r3, r1
 80086d6:	4602      	mov	r2, r0
 80086d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086dc:	f7f7 fd44 	bl	8000168 <__aeabi_dsub>
 80086e0:	f807 6b01 	strb.w	r6, [r7], #1
 80086e4:	9e08      	ldr	r6, [sp, #32]
 80086e6:	9b02      	ldr	r3, [sp, #8]
 80086e8:	1bbe      	subs	r6, r7, r6
 80086ea:	42b3      	cmp	r3, r6
 80086ec:	d13a      	bne.n	8008764 <_dtoa_r+0x70c>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	f7f7 fd3b 	bl	800016c <__adddf3>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008702:	f7f8 f979 	bl	80009f8 <__aeabi_dcmpgt>
 8008706:	bb58      	cbnz	r0, 8008760 <_dtoa_r+0x708>
 8008708:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800870c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008710:	f7f8 f94a 	bl	80009a8 <__aeabi_dcmpeq>
 8008714:	b108      	cbz	r0, 800871a <_dtoa_r+0x6c2>
 8008716:	07e1      	lsls	r1, r4, #31
 8008718:	d422      	bmi.n	8008760 <_dtoa_r+0x708>
 800871a:	4628      	mov	r0, r5
 800871c:	4651      	mov	r1, sl
 800871e:	f000 fd03 	bl	8009128 <_Bfree>
 8008722:	2300      	movs	r3, #0
 8008724:	703b      	strb	r3, [r7, #0]
 8008726:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008728:	f109 0001 	add.w	r0, r9, #1
 800872c:	6018      	str	r0, [r3, #0]
 800872e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008730:	2b00      	cmp	r3, #0
 8008732:	f43f acdf 	beq.w	80080f4 <_dtoa_r+0x9c>
 8008736:	601f      	str	r7, [r3, #0]
 8008738:	e4dc      	b.n	80080f4 <_dtoa_r+0x9c>
 800873a:	4627      	mov	r7, r4
 800873c:	463b      	mov	r3, r7
 800873e:	461f      	mov	r7, r3
 8008740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008744:	2a39      	cmp	r2, #57	; 0x39
 8008746:	d107      	bne.n	8008758 <_dtoa_r+0x700>
 8008748:	9a08      	ldr	r2, [sp, #32]
 800874a:	429a      	cmp	r2, r3
 800874c:	d1f7      	bne.n	800873e <_dtoa_r+0x6e6>
 800874e:	2230      	movs	r2, #48	; 0x30
 8008750:	9908      	ldr	r1, [sp, #32]
 8008752:	f108 0801 	add.w	r8, r8, #1
 8008756:	700a      	strb	r2, [r1, #0]
 8008758:	781a      	ldrb	r2, [r3, #0]
 800875a:	3201      	adds	r2, #1
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e79f      	b.n	80086a0 <_dtoa_r+0x648>
 8008760:	46c8      	mov	r8, r9
 8008762:	e7eb      	b.n	800873c <_dtoa_r+0x6e4>
 8008764:	2200      	movs	r2, #0
 8008766:	4b72      	ldr	r3, [pc, #456]	; (8008930 <_dtoa_r+0x8d8>)
 8008768:	f7f7 feb6 	bl	80004d8 <__aeabi_dmul>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008774:	2200      	movs	r2, #0
 8008776:	2300      	movs	r3, #0
 8008778:	f7f8 f916 	bl	80009a8 <__aeabi_dcmpeq>
 800877c:	2800      	cmp	r0, #0
 800877e:	d098      	beq.n	80086b2 <_dtoa_r+0x65a>
 8008780:	e7cb      	b.n	800871a <_dtoa_r+0x6c2>
 8008782:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008784:	2a00      	cmp	r2, #0
 8008786:	f000 80cd 	beq.w	8008924 <_dtoa_r+0x8cc>
 800878a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800878c:	2a01      	cmp	r2, #1
 800878e:	f300 80af 	bgt.w	80088f0 <_dtoa_r+0x898>
 8008792:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008794:	2a00      	cmp	r2, #0
 8008796:	f000 80a7 	beq.w	80088e8 <_dtoa_r+0x890>
 800879a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800879e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087a0:	9f06      	ldr	r7, [sp, #24]
 80087a2:	9a06      	ldr	r2, [sp, #24]
 80087a4:	2101      	movs	r1, #1
 80087a6:	441a      	add	r2, r3
 80087a8:	9206      	str	r2, [sp, #24]
 80087aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ac:	4628      	mov	r0, r5
 80087ae:	441a      	add	r2, r3
 80087b0:	9209      	str	r2, [sp, #36]	; 0x24
 80087b2:	f000 fd73 	bl	800929c <__i2b>
 80087b6:	4606      	mov	r6, r0
 80087b8:	2f00      	cmp	r7, #0
 80087ba:	dd0c      	ble.n	80087d6 <_dtoa_r+0x77e>
 80087bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dd09      	ble.n	80087d6 <_dtoa_r+0x77e>
 80087c2:	42bb      	cmp	r3, r7
 80087c4:	bfa8      	it	ge
 80087c6:	463b      	movge	r3, r7
 80087c8:	9a06      	ldr	r2, [sp, #24]
 80087ca:	1aff      	subs	r7, r7, r3
 80087cc:	1ad2      	subs	r2, r2, r3
 80087ce:	9206      	str	r2, [sp, #24]
 80087d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	9309      	str	r3, [sp, #36]	; 0x24
 80087d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d8:	b1f3      	cbz	r3, 8008818 <_dtoa_r+0x7c0>
 80087da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 80a9 	beq.w	8008934 <_dtoa_r+0x8dc>
 80087e2:	2c00      	cmp	r4, #0
 80087e4:	dd10      	ble.n	8008808 <_dtoa_r+0x7b0>
 80087e6:	4631      	mov	r1, r6
 80087e8:	4622      	mov	r2, r4
 80087ea:	4628      	mov	r0, r5
 80087ec:	f000 fe10 	bl	8009410 <__pow5mult>
 80087f0:	4652      	mov	r2, sl
 80087f2:	4601      	mov	r1, r0
 80087f4:	4606      	mov	r6, r0
 80087f6:	4628      	mov	r0, r5
 80087f8:	f000 fd66 	bl	80092c8 <__multiply>
 80087fc:	4680      	mov	r8, r0
 80087fe:	4651      	mov	r1, sl
 8008800:	4628      	mov	r0, r5
 8008802:	f000 fc91 	bl	8009128 <_Bfree>
 8008806:	46c2      	mov	sl, r8
 8008808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880a:	1b1a      	subs	r2, r3, r4
 800880c:	d004      	beq.n	8008818 <_dtoa_r+0x7c0>
 800880e:	4651      	mov	r1, sl
 8008810:	4628      	mov	r0, r5
 8008812:	f000 fdfd 	bl	8009410 <__pow5mult>
 8008816:	4682      	mov	sl, r0
 8008818:	2101      	movs	r1, #1
 800881a:	4628      	mov	r0, r5
 800881c:	f000 fd3e 	bl	800929c <__i2b>
 8008820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008822:	4604      	mov	r4, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	f340 8087 	ble.w	8008938 <_dtoa_r+0x8e0>
 800882a:	461a      	mov	r2, r3
 800882c:	4601      	mov	r1, r0
 800882e:	4628      	mov	r0, r5
 8008830:	f000 fdee 	bl	8009410 <__pow5mult>
 8008834:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008836:	4604      	mov	r4, r0
 8008838:	2b01      	cmp	r3, #1
 800883a:	f340 8080 	ble.w	800893e <_dtoa_r+0x8e6>
 800883e:	f04f 0800 	mov.w	r8, #0
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008848:	6918      	ldr	r0, [r3, #16]
 800884a:	f000 fcd9 	bl	8009200 <__hi0bits>
 800884e:	f1c0 0020 	rsb	r0, r0, #32
 8008852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008854:	4418      	add	r0, r3
 8008856:	f010 001f 	ands.w	r0, r0, #31
 800885a:	f000 8092 	beq.w	8008982 <_dtoa_r+0x92a>
 800885e:	f1c0 0320 	rsb	r3, r0, #32
 8008862:	2b04      	cmp	r3, #4
 8008864:	f340 808a 	ble.w	800897c <_dtoa_r+0x924>
 8008868:	f1c0 001c 	rsb	r0, r0, #28
 800886c:	9b06      	ldr	r3, [sp, #24]
 800886e:	4407      	add	r7, r0
 8008870:	4403      	add	r3, r0
 8008872:	9306      	str	r3, [sp, #24]
 8008874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008876:	4403      	add	r3, r0
 8008878:	9309      	str	r3, [sp, #36]	; 0x24
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	dd05      	ble.n	800888c <_dtoa_r+0x834>
 8008880:	4651      	mov	r1, sl
 8008882:	461a      	mov	r2, r3
 8008884:	4628      	mov	r0, r5
 8008886:	f000 fe1d 	bl	80094c4 <__lshift>
 800888a:	4682      	mov	sl, r0
 800888c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd05      	ble.n	800889e <_dtoa_r+0x846>
 8008892:	4621      	mov	r1, r4
 8008894:	461a      	mov	r2, r3
 8008896:	4628      	mov	r0, r5
 8008898:	f000 fe14 	bl	80094c4 <__lshift>
 800889c:	4604      	mov	r4, r0
 800889e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d070      	beq.n	8008986 <_dtoa_r+0x92e>
 80088a4:	4621      	mov	r1, r4
 80088a6:	4650      	mov	r0, sl
 80088a8:	f000 fe78 	bl	800959c <__mcmp>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	da6a      	bge.n	8008986 <_dtoa_r+0x92e>
 80088b0:	2300      	movs	r3, #0
 80088b2:	4651      	mov	r1, sl
 80088b4:	220a      	movs	r2, #10
 80088b6:	4628      	mov	r0, r5
 80088b8:	f000 fc58 	bl	800916c <__multadd>
 80088bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088be:	4682      	mov	sl, r0
 80088c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8193 	beq.w	8008bf0 <_dtoa_r+0xb98>
 80088ca:	4631      	mov	r1, r6
 80088cc:	2300      	movs	r3, #0
 80088ce:	220a      	movs	r2, #10
 80088d0:	4628      	mov	r0, r5
 80088d2:	f000 fc4b 	bl	800916c <__multadd>
 80088d6:	f1bb 0f00 	cmp.w	fp, #0
 80088da:	4606      	mov	r6, r0
 80088dc:	f300 8093 	bgt.w	8008a06 <_dtoa_r+0x9ae>
 80088e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	dc57      	bgt.n	8008996 <_dtoa_r+0x93e>
 80088e6:	e08e      	b.n	8008a06 <_dtoa_r+0x9ae>
 80088e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088ee:	e756      	b.n	800879e <_dtoa_r+0x746>
 80088f0:	9b02      	ldr	r3, [sp, #8]
 80088f2:	1e5c      	subs	r4, r3, #1
 80088f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f6:	42a3      	cmp	r3, r4
 80088f8:	bfb7      	itett	lt
 80088fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088fc:	1b1c      	subge	r4, r3, r4
 80088fe:	1ae2      	sublt	r2, r4, r3
 8008900:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008902:	bfbe      	ittt	lt
 8008904:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008906:	189b      	addlt	r3, r3, r2
 8008908:	930e      	strlt	r3, [sp, #56]	; 0x38
 800890a:	9b02      	ldr	r3, [sp, #8]
 800890c:	bfb8      	it	lt
 800890e:	2400      	movlt	r4, #0
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfbb      	ittet	lt
 8008914:	9b06      	ldrlt	r3, [sp, #24]
 8008916:	9a02      	ldrlt	r2, [sp, #8]
 8008918:	9f06      	ldrge	r7, [sp, #24]
 800891a:	1a9f      	sublt	r7, r3, r2
 800891c:	bfac      	ite	ge
 800891e:	9b02      	ldrge	r3, [sp, #8]
 8008920:	2300      	movlt	r3, #0
 8008922:	e73e      	b.n	80087a2 <_dtoa_r+0x74a>
 8008924:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008926:	9f06      	ldr	r7, [sp, #24]
 8008928:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800892a:	e745      	b.n	80087b8 <_dtoa_r+0x760>
 800892c:	3fe00000 	.word	0x3fe00000
 8008930:	40240000 	.word	0x40240000
 8008934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008936:	e76a      	b.n	800880e <_dtoa_r+0x7b6>
 8008938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800893a:	2b01      	cmp	r3, #1
 800893c:	dc19      	bgt.n	8008972 <_dtoa_r+0x91a>
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	b9bb      	cbnz	r3, 8008972 <_dtoa_r+0x91a>
 8008942:	9b05      	ldr	r3, [sp, #20]
 8008944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008948:	b99b      	cbnz	r3, 8008972 <_dtoa_r+0x91a>
 800894a:	9b05      	ldr	r3, [sp, #20]
 800894c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008950:	0d1b      	lsrs	r3, r3, #20
 8008952:	051b      	lsls	r3, r3, #20
 8008954:	b183      	cbz	r3, 8008978 <_dtoa_r+0x920>
 8008956:	f04f 0801 	mov.w	r8, #1
 800895a:	9b06      	ldr	r3, [sp, #24]
 800895c:	3301      	adds	r3, #1
 800895e:	9306      	str	r3, [sp, #24]
 8008960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008962:	3301      	adds	r3, #1
 8008964:	9309      	str	r3, [sp, #36]	; 0x24
 8008966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008968:	2b00      	cmp	r3, #0
 800896a:	f47f af6a 	bne.w	8008842 <_dtoa_r+0x7ea>
 800896e:	2001      	movs	r0, #1
 8008970:	e76f      	b.n	8008852 <_dtoa_r+0x7fa>
 8008972:	f04f 0800 	mov.w	r8, #0
 8008976:	e7f6      	b.n	8008966 <_dtoa_r+0x90e>
 8008978:	4698      	mov	r8, r3
 800897a:	e7f4      	b.n	8008966 <_dtoa_r+0x90e>
 800897c:	f43f af7d 	beq.w	800887a <_dtoa_r+0x822>
 8008980:	4618      	mov	r0, r3
 8008982:	301c      	adds	r0, #28
 8008984:	e772      	b.n	800886c <_dtoa_r+0x814>
 8008986:	9b02      	ldr	r3, [sp, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	dc36      	bgt.n	80089fa <_dtoa_r+0x9a2>
 800898c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800898e:	2b02      	cmp	r3, #2
 8008990:	dd33      	ble.n	80089fa <_dtoa_r+0x9a2>
 8008992:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008996:	f1bb 0f00 	cmp.w	fp, #0
 800899a:	d10d      	bne.n	80089b8 <_dtoa_r+0x960>
 800899c:	4621      	mov	r1, r4
 800899e:	465b      	mov	r3, fp
 80089a0:	2205      	movs	r2, #5
 80089a2:	4628      	mov	r0, r5
 80089a4:	f000 fbe2 	bl	800916c <__multadd>
 80089a8:	4601      	mov	r1, r0
 80089aa:	4604      	mov	r4, r0
 80089ac:	4650      	mov	r0, sl
 80089ae:	f000 fdf5 	bl	800959c <__mcmp>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	f73f adb6 	bgt.w	8008524 <_dtoa_r+0x4cc>
 80089b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089ba:	9f08      	ldr	r7, [sp, #32]
 80089bc:	ea6f 0903 	mvn.w	r9, r3
 80089c0:	f04f 0800 	mov.w	r8, #0
 80089c4:	4621      	mov	r1, r4
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 fbae 	bl	8009128 <_Bfree>
 80089cc:	2e00      	cmp	r6, #0
 80089ce:	f43f aea4 	beq.w	800871a <_dtoa_r+0x6c2>
 80089d2:	f1b8 0f00 	cmp.w	r8, #0
 80089d6:	d005      	beq.n	80089e4 <_dtoa_r+0x98c>
 80089d8:	45b0      	cmp	r8, r6
 80089da:	d003      	beq.n	80089e4 <_dtoa_r+0x98c>
 80089dc:	4641      	mov	r1, r8
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 fba2 	bl	8009128 <_Bfree>
 80089e4:	4631      	mov	r1, r6
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 fb9e 	bl	8009128 <_Bfree>
 80089ec:	e695      	b.n	800871a <_dtoa_r+0x6c2>
 80089ee:	2400      	movs	r4, #0
 80089f0:	4626      	mov	r6, r4
 80089f2:	e7e1      	b.n	80089b8 <_dtoa_r+0x960>
 80089f4:	46c1      	mov	r9, r8
 80089f6:	4626      	mov	r6, r4
 80089f8:	e594      	b.n	8008524 <_dtoa_r+0x4cc>
 80089fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80fc 	beq.w	8008bfe <_dtoa_r+0xba6>
 8008a06:	2f00      	cmp	r7, #0
 8008a08:	dd05      	ble.n	8008a16 <_dtoa_r+0x9be>
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	463a      	mov	r2, r7
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 fd58 	bl	80094c4 <__lshift>
 8008a14:	4606      	mov	r6, r0
 8008a16:	f1b8 0f00 	cmp.w	r8, #0
 8008a1a:	d05c      	beq.n	8008ad6 <_dtoa_r+0xa7e>
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	6871      	ldr	r1, [r6, #4]
 8008a20:	f000 fb42 	bl	80090a8 <_Balloc>
 8008a24:	4607      	mov	r7, r0
 8008a26:	b928      	cbnz	r0, 8008a34 <_dtoa_r+0x9dc>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a2e:	4b7e      	ldr	r3, [pc, #504]	; (8008c28 <_dtoa_r+0xbd0>)
 8008a30:	f7ff bb26 	b.w	8008080 <_dtoa_r+0x28>
 8008a34:	6932      	ldr	r2, [r6, #16]
 8008a36:	f106 010c 	add.w	r1, r6, #12
 8008a3a:	3202      	adds	r2, #2
 8008a3c:	0092      	lsls	r2, r2, #2
 8008a3e:	300c      	adds	r0, #12
 8008a40:	f7fe fcb6 	bl	80073b0 <memcpy>
 8008a44:	2201      	movs	r2, #1
 8008a46:	4639      	mov	r1, r7
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f000 fd3b 	bl	80094c4 <__lshift>
 8008a4e:	46b0      	mov	r8, r6
 8008a50:	4606      	mov	r6, r0
 8008a52:	9b08      	ldr	r3, [sp, #32]
 8008a54:	3301      	adds	r3, #1
 8008a56:	9302      	str	r3, [sp, #8]
 8008a58:	9b08      	ldr	r3, [sp, #32]
 8008a5a:	445b      	add	r3, fp
 8008a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8008a5e:	9b04      	ldr	r3, [sp, #16]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	9309      	str	r3, [sp, #36]	; 0x24
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a70:	f7ff fa62 	bl	8007f38 <quorem>
 8008a74:	4603      	mov	r3, r0
 8008a76:	4641      	mov	r1, r8
 8008a78:	3330      	adds	r3, #48	; 0x30
 8008a7a:	9004      	str	r0, [sp, #16]
 8008a7c:	4650      	mov	r0, sl
 8008a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a80:	f000 fd8c 	bl	800959c <__mcmp>
 8008a84:	4632      	mov	r2, r6
 8008a86:	9006      	str	r0, [sp, #24]
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f000 fda2 	bl	80095d4 <__mdiff>
 8008a90:	68c2      	ldr	r2, [r0, #12]
 8008a92:	4607      	mov	r7, r0
 8008a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a96:	bb02      	cbnz	r2, 8008ada <_dtoa_r+0xa82>
 8008a98:	4601      	mov	r1, r0
 8008a9a:	4650      	mov	r0, sl
 8008a9c:	f000 fd7e 	bl	800959c <__mcmp>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008aac:	f000 fb3c 	bl	8009128 <_Bfree>
 8008ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ab4:	9f02      	ldr	r7, [sp, #8]
 8008ab6:	ea43 0102 	orr.w	r1, r3, r2
 8008aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008abc:	430b      	orrs	r3, r1
 8008abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ac0:	d10d      	bne.n	8008ade <_dtoa_r+0xa86>
 8008ac2:	2b39      	cmp	r3, #57	; 0x39
 8008ac4:	d027      	beq.n	8008b16 <_dtoa_r+0xabe>
 8008ac6:	9a06      	ldr	r2, [sp, #24]
 8008ac8:	2a00      	cmp	r2, #0
 8008aca:	dd01      	ble.n	8008ad0 <_dtoa_r+0xa78>
 8008acc:	9b04      	ldr	r3, [sp, #16]
 8008ace:	3331      	adds	r3, #49	; 0x31
 8008ad0:	f88b 3000 	strb.w	r3, [fp]
 8008ad4:	e776      	b.n	80089c4 <_dtoa_r+0x96c>
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	e7b9      	b.n	8008a4e <_dtoa_r+0x9f6>
 8008ada:	2201      	movs	r2, #1
 8008adc:	e7e2      	b.n	8008aa4 <_dtoa_r+0xa4c>
 8008ade:	9906      	ldr	r1, [sp, #24]
 8008ae0:	2900      	cmp	r1, #0
 8008ae2:	db04      	blt.n	8008aee <_dtoa_r+0xa96>
 8008ae4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008ae6:	4301      	orrs	r1, r0
 8008ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aea:	4301      	orrs	r1, r0
 8008aec:	d120      	bne.n	8008b30 <_dtoa_r+0xad8>
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	ddee      	ble.n	8008ad0 <_dtoa_r+0xa78>
 8008af2:	4651      	mov	r1, sl
 8008af4:	2201      	movs	r2, #1
 8008af6:	4628      	mov	r0, r5
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	f000 fce3 	bl	80094c4 <__lshift>
 8008afe:	4621      	mov	r1, r4
 8008b00:	4682      	mov	sl, r0
 8008b02:	f000 fd4b 	bl	800959c <__mcmp>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	9b02      	ldr	r3, [sp, #8]
 8008b0a:	dc02      	bgt.n	8008b12 <_dtoa_r+0xaba>
 8008b0c:	d1e0      	bne.n	8008ad0 <_dtoa_r+0xa78>
 8008b0e:	07da      	lsls	r2, r3, #31
 8008b10:	d5de      	bpl.n	8008ad0 <_dtoa_r+0xa78>
 8008b12:	2b39      	cmp	r3, #57	; 0x39
 8008b14:	d1da      	bne.n	8008acc <_dtoa_r+0xa74>
 8008b16:	2339      	movs	r3, #57	; 0x39
 8008b18:	f88b 3000 	strb.w	r3, [fp]
 8008b1c:	463b      	mov	r3, r7
 8008b1e:	461f      	mov	r7, r3
 8008b20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	2a39      	cmp	r2, #57	; 0x39
 8008b28:	d050      	beq.n	8008bcc <_dtoa_r+0xb74>
 8008b2a:	3201      	adds	r2, #1
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	e749      	b.n	80089c4 <_dtoa_r+0x96c>
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	dd03      	ble.n	8008b3c <_dtoa_r+0xae4>
 8008b34:	2b39      	cmp	r3, #57	; 0x39
 8008b36:	d0ee      	beq.n	8008b16 <_dtoa_r+0xabe>
 8008b38:	3301      	adds	r3, #1
 8008b3a:	e7c9      	b.n	8008ad0 <_dtoa_r+0xa78>
 8008b3c:	9a02      	ldr	r2, [sp, #8]
 8008b3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b44:	428a      	cmp	r2, r1
 8008b46:	d02a      	beq.n	8008b9e <_dtoa_r+0xb46>
 8008b48:	4651      	mov	r1, sl
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	220a      	movs	r2, #10
 8008b4e:	4628      	mov	r0, r5
 8008b50:	f000 fb0c 	bl	800916c <__multadd>
 8008b54:	45b0      	cmp	r8, r6
 8008b56:	4682      	mov	sl, r0
 8008b58:	f04f 0300 	mov.w	r3, #0
 8008b5c:	f04f 020a 	mov.w	r2, #10
 8008b60:	4641      	mov	r1, r8
 8008b62:	4628      	mov	r0, r5
 8008b64:	d107      	bne.n	8008b76 <_dtoa_r+0xb1e>
 8008b66:	f000 fb01 	bl	800916c <__multadd>
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	9b02      	ldr	r3, [sp, #8]
 8008b70:	3301      	adds	r3, #1
 8008b72:	9302      	str	r3, [sp, #8]
 8008b74:	e777      	b.n	8008a66 <_dtoa_r+0xa0e>
 8008b76:	f000 faf9 	bl	800916c <__multadd>
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4680      	mov	r8, r0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	220a      	movs	r2, #10
 8008b82:	4628      	mov	r0, r5
 8008b84:	f000 faf2 	bl	800916c <__multadd>
 8008b88:	4606      	mov	r6, r0
 8008b8a:	e7f0      	b.n	8008b6e <_dtoa_r+0xb16>
 8008b8c:	f1bb 0f00 	cmp.w	fp, #0
 8008b90:	bfcc      	ite	gt
 8008b92:	465f      	movgt	r7, fp
 8008b94:	2701      	movle	r7, #1
 8008b96:	f04f 0800 	mov.w	r8, #0
 8008b9a:	9a08      	ldr	r2, [sp, #32]
 8008b9c:	4417      	add	r7, r2
 8008b9e:	4651      	mov	r1, sl
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	9302      	str	r3, [sp, #8]
 8008ba6:	f000 fc8d 	bl	80094c4 <__lshift>
 8008baa:	4621      	mov	r1, r4
 8008bac:	4682      	mov	sl, r0
 8008bae:	f000 fcf5 	bl	800959c <__mcmp>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	dcb2      	bgt.n	8008b1c <_dtoa_r+0xac4>
 8008bb6:	d102      	bne.n	8008bbe <_dtoa_r+0xb66>
 8008bb8:	9b02      	ldr	r3, [sp, #8]
 8008bba:	07db      	lsls	r3, r3, #31
 8008bbc:	d4ae      	bmi.n	8008b1c <_dtoa_r+0xac4>
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	461f      	mov	r7, r3
 8008bc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bc6:	2a30      	cmp	r2, #48	; 0x30
 8008bc8:	d0fa      	beq.n	8008bc0 <_dtoa_r+0xb68>
 8008bca:	e6fb      	b.n	80089c4 <_dtoa_r+0x96c>
 8008bcc:	9a08      	ldr	r2, [sp, #32]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d1a5      	bne.n	8008b1e <_dtoa_r+0xac6>
 8008bd2:	2331      	movs	r3, #49	; 0x31
 8008bd4:	f109 0901 	add.w	r9, r9, #1
 8008bd8:	7013      	strb	r3, [r2, #0]
 8008bda:	e6f3      	b.n	80089c4 <_dtoa_r+0x96c>
 8008bdc:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <_dtoa_r+0xbd4>)
 8008bde:	f7ff baa7 	b.w	8008130 <_dtoa_r+0xd8>
 8008be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f47f aa80 	bne.w	80080ea <_dtoa_r+0x92>
 8008bea:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <_dtoa_r+0xbd8>)
 8008bec:	f7ff baa0 	b.w	8008130 <_dtoa_r+0xd8>
 8008bf0:	f1bb 0f00 	cmp.w	fp, #0
 8008bf4:	dc03      	bgt.n	8008bfe <_dtoa_r+0xba6>
 8008bf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	f73f aecc 	bgt.w	8008996 <_dtoa_r+0x93e>
 8008bfe:	9f08      	ldr	r7, [sp, #32]
 8008c00:	4621      	mov	r1, r4
 8008c02:	4650      	mov	r0, sl
 8008c04:	f7ff f998 	bl	8007f38 <quorem>
 8008c08:	9a08      	ldr	r2, [sp, #32]
 8008c0a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c0e:	f807 3b01 	strb.w	r3, [r7], #1
 8008c12:	1aba      	subs	r2, r7, r2
 8008c14:	4593      	cmp	fp, r2
 8008c16:	ddb9      	ble.n	8008b8c <_dtoa_r+0xb34>
 8008c18:	4651      	mov	r1, sl
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	220a      	movs	r2, #10
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 faa4 	bl	800916c <__multadd>
 8008c24:	4682      	mov	sl, r0
 8008c26:	e7eb      	b.n	8008c00 <_dtoa_r+0xba8>
 8008c28:	0800a04f 	.word	0x0800a04f
 8008c2c:	08009fa8 	.word	0x08009fa8
 8008c30:	08009fcc 	.word	0x08009fcc

08008c34 <__sflush_r>:
 8008c34:	898a      	ldrh	r2, [r1, #12]
 8008c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	0710      	lsls	r0, r2, #28
 8008c3e:	460c      	mov	r4, r1
 8008c40:	d458      	bmi.n	8008cf4 <__sflush_r+0xc0>
 8008c42:	684b      	ldr	r3, [r1, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dc05      	bgt.n	8008c54 <__sflush_r+0x20>
 8008c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dc02      	bgt.n	8008c54 <__sflush_r+0x20>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	d0f9      	beq.n	8008c4e <__sflush_r+0x1a>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c60:	682f      	ldr	r7, [r5, #0]
 8008c62:	602b      	str	r3, [r5, #0]
 8008c64:	d032      	beq.n	8008ccc <__sflush_r+0x98>
 8008c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	075a      	lsls	r2, r3, #29
 8008c6c:	d505      	bpl.n	8008c7a <__sflush_r+0x46>
 8008c6e:	6863      	ldr	r3, [r4, #4]
 8008c70:	1ac0      	subs	r0, r0, r3
 8008c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c74:	b10b      	cbz	r3, 8008c7a <__sflush_r+0x46>
 8008c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c78:	1ac0      	subs	r0, r0, r3
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c80:	4628      	mov	r0, r5
 8008c82:	6a21      	ldr	r1, [r4, #32]
 8008c84:	47b0      	blx	r6
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	d106      	bne.n	8008c9a <__sflush_r+0x66>
 8008c8c:	6829      	ldr	r1, [r5, #0]
 8008c8e:	291d      	cmp	r1, #29
 8008c90:	d82c      	bhi.n	8008cec <__sflush_r+0xb8>
 8008c92:	4a2a      	ldr	r2, [pc, #168]	; (8008d3c <__sflush_r+0x108>)
 8008c94:	40ca      	lsrs	r2, r1
 8008c96:	07d6      	lsls	r6, r2, #31
 8008c98:	d528      	bpl.n	8008cec <__sflush_r+0xb8>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	6062      	str	r2, [r4, #4]
 8008c9e:	6922      	ldr	r2, [r4, #16]
 8008ca0:	04d9      	lsls	r1, r3, #19
 8008ca2:	6022      	str	r2, [r4, #0]
 8008ca4:	d504      	bpl.n	8008cb0 <__sflush_r+0x7c>
 8008ca6:	1c42      	adds	r2, r0, #1
 8008ca8:	d101      	bne.n	8008cae <__sflush_r+0x7a>
 8008caa:	682b      	ldr	r3, [r5, #0]
 8008cac:	b903      	cbnz	r3, 8008cb0 <__sflush_r+0x7c>
 8008cae:	6560      	str	r0, [r4, #84]	; 0x54
 8008cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cb2:	602f      	str	r7, [r5, #0]
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	d0ca      	beq.n	8008c4e <__sflush_r+0x1a>
 8008cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	d002      	beq.n	8008cc6 <__sflush_r+0x92>
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 fd81 	bl	80097c8 <_free_r>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8008cca:	e7c1      	b.n	8008c50 <__sflush_r+0x1c>
 8008ccc:	6a21      	ldr	r1, [r4, #32]
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b0      	blx	r6
 8008cd4:	1c41      	adds	r1, r0, #1
 8008cd6:	d1c7      	bne.n	8008c68 <__sflush_r+0x34>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0c4      	beq.n	8008c68 <__sflush_r+0x34>
 8008cde:	2b1d      	cmp	r3, #29
 8008ce0:	d001      	beq.n	8008ce6 <__sflush_r+0xb2>
 8008ce2:	2b16      	cmp	r3, #22
 8008ce4:	d101      	bne.n	8008cea <__sflush_r+0xb6>
 8008ce6:	602f      	str	r7, [r5, #0]
 8008ce8:	e7b1      	b.n	8008c4e <__sflush_r+0x1a>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	e7ad      	b.n	8008c50 <__sflush_r+0x1c>
 8008cf4:	690f      	ldr	r7, [r1, #16]
 8008cf6:	2f00      	cmp	r7, #0
 8008cf8:	d0a9      	beq.n	8008c4e <__sflush_r+0x1a>
 8008cfa:	0793      	lsls	r3, r2, #30
 8008cfc:	bf18      	it	ne
 8008cfe:	2300      	movne	r3, #0
 8008d00:	680e      	ldr	r6, [r1, #0]
 8008d02:	bf08      	it	eq
 8008d04:	694b      	ldreq	r3, [r1, #20]
 8008d06:	eba6 0807 	sub.w	r8, r6, r7
 8008d0a:	600f      	str	r7, [r1, #0]
 8008d0c:	608b      	str	r3, [r1, #8]
 8008d0e:	f1b8 0f00 	cmp.w	r8, #0
 8008d12:	dd9c      	ble.n	8008c4e <__sflush_r+0x1a>
 8008d14:	4643      	mov	r3, r8
 8008d16:	463a      	mov	r2, r7
 8008d18:	4628      	mov	r0, r5
 8008d1a:	6a21      	ldr	r1, [r4, #32]
 8008d1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d1e:	47b0      	blx	r6
 8008d20:	2800      	cmp	r0, #0
 8008d22:	dc06      	bgt.n	8008d32 <__sflush_r+0xfe>
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	e78e      	b.n	8008c50 <__sflush_r+0x1c>
 8008d32:	4407      	add	r7, r0
 8008d34:	eba8 0800 	sub.w	r8, r8, r0
 8008d38:	e7e9      	b.n	8008d0e <__sflush_r+0xda>
 8008d3a:	bf00      	nop
 8008d3c:	20400001 	.word	0x20400001

08008d40 <_fflush_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	690b      	ldr	r3, [r1, #16]
 8008d44:	4605      	mov	r5, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	b913      	cbnz	r3, 8008d50 <_fflush_r+0x10>
 8008d4a:	2500      	movs	r5, #0
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	b118      	cbz	r0, 8008d5a <_fflush_r+0x1a>
 8008d52:	6983      	ldr	r3, [r0, #24]
 8008d54:	b90b      	cbnz	r3, 8008d5a <_fflush_r+0x1a>
 8008d56:	f000 f887 	bl	8008e68 <__sinit>
 8008d5a:	4b14      	ldr	r3, [pc, #80]	; (8008dac <_fflush_r+0x6c>)
 8008d5c:	429c      	cmp	r4, r3
 8008d5e:	d11b      	bne.n	8008d98 <_fflush_r+0x58>
 8008d60:	686c      	ldr	r4, [r5, #4]
 8008d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0ef      	beq.n	8008d4a <_fflush_r+0xa>
 8008d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d6c:	07d0      	lsls	r0, r2, #31
 8008d6e:	d404      	bmi.n	8008d7a <_fflush_r+0x3a>
 8008d70:	0599      	lsls	r1, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_fflush_r+0x3a>
 8008d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d76:	f000 f91a 	bl	8008fae <__retarget_lock_acquire_recursive>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7ff ff59 	bl	8008c34 <__sflush_r>
 8008d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d84:	4605      	mov	r5, r0
 8008d86:	07da      	lsls	r2, r3, #31
 8008d88:	d4e0      	bmi.n	8008d4c <_fflush_r+0xc>
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	059b      	lsls	r3, r3, #22
 8008d8e:	d4dd      	bmi.n	8008d4c <_fflush_r+0xc>
 8008d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d92:	f000 f90d 	bl	8008fb0 <__retarget_lock_release_recursive>
 8008d96:	e7d9      	b.n	8008d4c <_fflush_r+0xc>
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <_fflush_r+0x70>)
 8008d9a:	429c      	cmp	r4, r3
 8008d9c:	d101      	bne.n	8008da2 <_fflush_r+0x62>
 8008d9e:	68ac      	ldr	r4, [r5, #8]
 8008da0:	e7df      	b.n	8008d62 <_fflush_r+0x22>
 8008da2:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <_fflush_r+0x74>)
 8008da4:	429c      	cmp	r4, r3
 8008da6:	bf08      	it	eq
 8008da8:	68ec      	ldreq	r4, [r5, #12]
 8008daa:	e7da      	b.n	8008d62 <_fflush_r+0x22>
 8008dac:	0800a080 	.word	0x0800a080
 8008db0:	0800a0a0 	.word	0x0800a0a0
 8008db4:	0800a060 	.word	0x0800a060

08008db8 <std>:
 8008db8:	2300      	movs	r3, #0
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dc6:	6083      	str	r3, [r0, #8]
 8008dc8:	8181      	strh	r1, [r0, #12]
 8008dca:	6643      	str	r3, [r0, #100]	; 0x64
 8008dcc:	81c2      	strh	r2, [r0, #14]
 8008dce:	6183      	str	r3, [r0, #24]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	2208      	movs	r2, #8
 8008dd4:	305c      	adds	r0, #92	; 0x5c
 8008dd6:	f7fe faf9 	bl	80073cc <memset>
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <std+0x38>)
 8008ddc:	6224      	str	r4, [r4, #32]
 8008dde:	6263      	str	r3, [r4, #36]	; 0x24
 8008de0:	4b04      	ldr	r3, [pc, #16]	; (8008df4 <std+0x3c>)
 8008de2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008de4:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <std+0x40>)
 8008de6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008de8:	4b04      	ldr	r3, [pc, #16]	; (8008dfc <std+0x44>)
 8008dea:	6323      	str	r3, [r4, #48]	; 0x30
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	bf00      	nop
 8008df0:	08009be5 	.word	0x08009be5
 8008df4:	08009c07 	.word	0x08009c07
 8008df8:	08009c3f 	.word	0x08009c3f
 8008dfc:	08009c63 	.word	0x08009c63

08008e00 <_cleanup_r>:
 8008e00:	4901      	ldr	r1, [pc, #4]	; (8008e08 <_cleanup_r+0x8>)
 8008e02:	f000 b8af 	b.w	8008f64 <_fwalk_reent>
 8008e06:	bf00      	nop
 8008e08:	08008d41 	.word	0x08008d41

08008e0c <__sfmoreglue>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	2568      	movs	r5, #104	; 0x68
 8008e10:	1e4a      	subs	r2, r1, #1
 8008e12:	4355      	muls	r5, r2
 8008e14:	460e      	mov	r6, r1
 8008e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e1a:	f000 fd21 	bl	8009860 <_malloc_r>
 8008e1e:	4604      	mov	r4, r0
 8008e20:	b140      	cbz	r0, 8008e34 <__sfmoreglue+0x28>
 8008e22:	2100      	movs	r1, #0
 8008e24:	e9c0 1600 	strd	r1, r6, [r0]
 8008e28:	300c      	adds	r0, #12
 8008e2a:	60a0      	str	r0, [r4, #8]
 8008e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e30:	f7fe facc 	bl	80073cc <memset>
 8008e34:	4620      	mov	r0, r4
 8008e36:	bd70      	pop	{r4, r5, r6, pc}

08008e38 <__sfp_lock_acquire>:
 8008e38:	4801      	ldr	r0, [pc, #4]	; (8008e40 <__sfp_lock_acquire+0x8>)
 8008e3a:	f000 b8b8 	b.w	8008fae <__retarget_lock_acquire_recursive>
 8008e3e:	bf00      	nop
 8008e40:	20001cbc 	.word	0x20001cbc

08008e44 <__sfp_lock_release>:
 8008e44:	4801      	ldr	r0, [pc, #4]	; (8008e4c <__sfp_lock_release+0x8>)
 8008e46:	f000 b8b3 	b.w	8008fb0 <__retarget_lock_release_recursive>
 8008e4a:	bf00      	nop
 8008e4c:	20001cbc 	.word	0x20001cbc

08008e50 <__sinit_lock_acquire>:
 8008e50:	4801      	ldr	r0, [pc, #4]	; (8008e58 <__sinit_lock_acquire+0x8>)
 8008e52:	f000 b8ac 	b.w	8008fae <__retarget_lock_acquire_recursive>
 8008e56:	bf00      	nop
 8008e58:	20001cb7 	.word	0x20001cb7

08008e5c <__sinit_lock_release>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__sinit_lock_release+0x8>)
 8008e5e:	f000 b8a7 	b.w	8008fb0 <__retarget_lock_release_recursive>
 8008e62:	bf00      	nop
 8008e64:	20001cb7 	.word	0x20001cb7

08008e68 <__sinit>:
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	f7ff fff0 	bl	8008e50 <__sinit_lock_acquire>
 8008e70:	69a3      	ldr	r3, [r4, #24]
 8008e72:	b11b      	cbz	r3, 8008e7c <__sinit+0x14>
 8008e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e78:	f7ff bff0 	b.w	8008e5c <__sinit_lock_release>
 8008e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e80:	6523      	str	r3, [r4, #80]	; 0x50
 8008e82:	4b13      	ldr	r3, [pc, #76]	; (8008ed0 <__sinit+0x68>)
 8008e84:	4a13      	ldr	r2, [pc, #76]	; (8008ed4 <__sinit+0x6c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e8a:	42a3      	cmp	r3, r4
 8008e8c:	bf08      	it	eq
 8008e8e:	2301      	moveq	r3, #1
 8008e90:	4620      	mov	r0, r4
 8008e92:	bf08      	it	eq
 8008e94:	61a3      	streq	r3, [r4, #24]
 8008e96:	f000 f81f 	bl	8008ed8 <__sfp>
 8008e9a:	6060      	str	r0, [r4, #4]
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 f81b 	bl	8008ed8 <__sfp>
 8008ea2:	60a0      	str	r0, [r4, #8]
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 f817 	bl	8008ed8 <__sfp>
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2104      	movs	r1, #4
 8008eae:	60e0      	str	r0, [r4, #12]
 8008eb0:	6860      	ldr	r0, [r4, #4]
 8008eb2:	f7ff ff81 	bl	8008db8 <std>
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	2109      	movs	r1, #9
 8008eba:	68a0      	ldr	r0, [r4, #8]
 8008ebc:	f7ff ff7c 	bl	8008db8 <std>
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	2112      	movs	r1, #18
 8008ec4:	68e0      	ldr	r0, [r4, #12]
 8008ec6:	f7ff ff77 	bl	8008db8 <std>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	61a3      	str	r3, [r4, #24]
 8008ece:	e7d1      	b.n	8008e74 <__sinit+0xc>
 8008ed0:	08009f94 	.word	0x08009f94
 8008ed4:	08008e01 	.word	0x08008e01

08008ed8 <__sfp>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	4607      	mov	r7, r0
 8008edc:	f7ff ffac 	bl	8008e38 <__sfp_lock_acquire>
 8008ee0:	4b1e      	ldr	r3, [pc, #120]	; (8008f5c <__sfp+0x84>)
 8008ee2:	681e      	ldr	r6, [r3, #0]
 8008ee4:	69b3      	ldr	r3, [r6, #24]
 8008ee6:	b913      	cbnz	r3, 8008eee <__sfp+0x16>
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7ff ffbd 	bl	8008e68 <__sinit>
 8008eee:	3648      	adds	r6, #72	; 0x48
 8008ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	d503      	bpl.n	8008f00 <__sfp+0x28>
 8008ef8:	6833      	ldr	r3, [r6, #0]
 8008efa:	b30b      	cbz	r3, 8008f40 <__sfp+0x68>
 8008efc:	6836      	ldr	r6, [r6, #0]
 8008efe:	e7f7      	b.n	8008ef0 <__sfp+0x18>
 8008f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f04:	b9d5      	cbnz	r5, 8008f3c <__sfp+0x64>
 8008f06:	4b16      	ldr	r3, [pc, #88]	; (8008f60 <__sfp+0x88>)
 8008f08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f0c:	60e3      	str	r3, [r4, #12]
 8008f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f10:	f000 f84c 	bl	8008fac <__retarget_lock_init_recursive>
 8008f14:	f7ff ff96 	bl	8008e44 <__sfp_lock_release>
 8008f18:	2208      	movs	r2, #8
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f24:	6025      	str	r5, [r4, #0]
 8008f26:	61a5      	str	r5, [r4, #24]
 8008f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f2c:	f7fe fa4e 	bl	80073cc <memset>
 8008f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f38:	4620      	mov	r0, r4
 8008f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3c:	3468      	adds	r4, #104	; 0x68
 8008f3e:	e7d9      	b.n	8008ef4 <__sfp+0x1c>
 8008f40:	2104      	movs	r1, #4
 8008f42:	4638      	mov	r0, r7
 8008f44:	f7ff ff62 	bl	8008e0c <__sfmoreglue>
 8008f48:	4604      	mov	r4, r0
 8008f4a:	6030      	str	r0, [r6, #0]
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d1d5      	bne.n	8008efc <__sfp+0x24>
 8008f50:	f7ff ff78 	bl	8008e44 <__sfp_lock_release>
 8008f54:	230c      	movs	r3, #12
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	e7ee      	b.n	8008f38 <__sfp+0x60>
 8008f5a:	bf00      	nop
 8008f5c:	08009f94 	.word	0x08009f94
 8008f60:	ffff0001 	.word	0xffff0001

08008f64 <_fwalk_reent>:
 8008f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f68:	4606      	mov	r6, r0
 8008f6a:	4688      	mov	r8, r1
 8008f6c:	2700      	movs	r7, #0
 8008f6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f76:	f1b9 0901 	subs.w	r9, r9, #1
 8008f7a:	d505      	bpl.n	8008f88 <_fwalk_reent+0x24>
 8008f7c:	6824      	ldr	r4, [r4, #0]
 8008f7e:	2c00      	cmp	r4, #0
 8008f80:	d1f7      	bne.n	8008f72 <_fwalk_reent+0xe>
 8008f82:	4638      	mov	r0, r7
 8008f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f88:	89ab      	ldrh	r3, [r5, #12]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d907      	bls.n	8008f9e <_fwalk_reent+0x3a>
 8008f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f92:	3301      	adds	r3, #1
 8008f94:	d003      	beq.n	8008f9e <_fwalk_reent+0x3a>
 8008f96:	4629      	mov	r1, r5
 8008f98:	4630      	mov	r0, r6
 8008f9a:	47c0      	blx	r8
 8008f9c:	4307      	orrs	r7, r0
 8008f9e:	3568      	adds	r5, #104	; 0x68
 8008fa0:	e7e9      	b.n	8008f76 <_fwalk_reent+0x12>
	...

08008fa4 <_localeconv_r>:
 8008fa4:	4800      	ldr	r0, [pc, #0]	; (8008fa8 <_localeconv_r+0x4>)
 8008fa6:	4770      	bx	lr
 8008fa8:	20000164 	.word	0x20000164

08008fac <__retarget_lock_init_recursive>:
 8008fac:	4770      	bx	lr

08008fae <__retarget_lock_acquire_recursive>:
 8008fae:	4770      	bx	lr

08008fb0 <__retarget_lock_release_recursive>:
 8008fb0:	4770      	bx	lr

08008fb2 <__swhatbuf_r>:
 8008fb2:	b570      	push	{r4, r5, r6, lr}
 8008fb4:	460e      	mov	r6, r1
 8008fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fba:	4614      	mov	r4, r2
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	b096      	sub	sp, #88	; 0x58
 8008fc2:	da07      	bge.n	8008fd4 <__swhatbuf_r+0x22>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	602b      	str	r3, [r5, #0]
 8008fc8:	89b3      	ldrh	r3, [r6, #12]
 8008fca:	061a      	lsls	r2, r3, #24
 8008fcc:	d410      	bmi.n	8008ff0 <__swhatbuf_r+0x3e>
 8008fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fd2:	e00e      	b.n	8008ff2 <__swhatbuf_r+0x40>
 8008fd4:	466a      	mov	r2, sp
 8008fd6:	f000 fe9b 	bl	8009d10 <_fstat_r>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	dbf2      	blt.n	8008fc4 <__swhatbuf_r+0x12>
 8008fde:	9a01      	ldr	r2, [sp, #4]
 8008fe0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fe4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fe8:	425a      	negs	r2, r3
 8008fea:	415a      	adcs	r2, r3
 8008fec:	602a      	str	r2, [r5, #0]
 8008fee:	e7ee      	b.n	8008fce <__swhatbuf_r+0x1c>
 8008ff0:	2340      	movs	r3, #64	; 0x40
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	b016      	add	sp, #88	; 0x58
 8008ff8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ffc <__smakebuf_r>:
 8008ffc:	898b      	ldrh	r3, [r1, #12]
 8008ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009000:	079d      	lsls	r5, r3, #30
 8009002:	4606      	mov	r6, r0
 8009004:	460c      	mov	r4, r1
 8009006:	d507      	bpl.n	8009018 <__smakebuf_r+0x1c>
 8009008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	6123      	str	r3, [r4, #16]
 8009010:	2301      	movs	r3, #1
 8009012:	6163      	str	r3, [r4, #20]
 8009014:	b002      	add	sp, #8
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	466a      	mov	r2, sp
 800901a:	ab01      	add	r3, sp, #4
 800901c:	f7ff ffc9 	bl	8008fb2 <__swhatbuf_r>
 8009020:	9900      	ldr	r1, [sp, #0]
 8009022:	4605      	mov	r5, r0
 8009024:	4630      	mov	r0, r6
 8009026:	f000 fc1b 	bl	8009860 <_malloc_r>
 800902a:	b948      	cbnz	r0, 8009040 <__smakebuf_r+0x44>
 800902c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009030:	059a      	lsls	r2, r3, #22
 8009032:	d4ef      	bmi.n	8009014 <__smakebuf_r+0x18>
 8009034:	f023 0303 	bic.w	r3, r3, #3
 8009038:	f043 0302 	orr.w	r3, r3, #2
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	e7e3      	b.n	8009008 <__smakebuf_r+0xc>
 8009040:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <__smakebuf_r+0x7c>)
 8009042:	62b3      	str	r3, [r6, #40]	; 0x28
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	6020      	str	r0, [r4, #0]
 8009048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	9b00      	ldr	r3, [sp, #0]
 8009050:	6120      	str	r0, [r4, #16]
 8009052:	6163      	str	r3, [r4, #20]
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	b15b      	cbz	r3, 8009070 <__smakebuf_r+0x74>
 8009058:	4630      	mov	r0, r6
 800905a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800905e:	f000 fe69 	bl	8009d34 <_isatty_r>
 8009062:	b128      	cbz	r0, 8009070 <__smakebuf_r+0x74>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f023 0303 	bic.w	r3, r3, #3
 800906a:	f043 0301 	orr.w	r3, r3, #1
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	89a0      	ldrh	r0, [r4, #12]
 8009072:	4305      	orrs	r5, r0
 8009074:	81a5      	strh	r5, [r4, #12]
 8009076:	e7cd      	b.n	8009014 <__smakebuf_r+0x18>
 8009078:	08008e01 	.word	0x08008e01

0800907c <malloc>:
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <malloc+0xc>)
 800907e:	4601      	mov	r1, r0
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	f000 bbed 	b.w	8009860 <_malloc_r>
 8009086:	bf00      	nop
 8009088:	20000010 	.word	0x20000010

0800908c <memchr>:
 800908c:	4603      	mov	r3, r0
 800908e:	b510      	push	{r4, lr}
 8009090:	b2c9      	uxtb	r1, r1
 8009092:	4402      	add	r2, r0
 8009094:	4293      	cmp	r3, r2
 8009096:	4618      	mov	r0, r3
 8009098:	d101      	bne.n	800909e <memchr+0x12>
 800909a:	2000      	movs	r0, #0
 800909c:	e003      	b.n	80090a6 <memchr+0x1a>
 800909e:	7804      	ldrb	r4, [r0, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	428c      	cmp	r4, r1
 80090a4:	d1f6      	bne.n	8009094 <memchr+0x8>
 80090a6:	bd10      	pop	{r4, pc}

080090a8 <_Balloc>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090ac:	4604      	mov	r4, r0
 80090ae:	460d      	mov	r5, r1
 80090b0:	b976      	cbnz	r6, 80090d0 <_Balloc+0x28>
 80090b2:	2010      	movs	r0, #16
 80090b4:	f7ff ffe2 	bl	800907c <malloc>
 80090b8:	4602      	mov	r2, r0
 80090ba:	6260      	str	r0, [r4, #36]	; 0x24
 80090bc:	b920      	cbnz	r0, 80090c8 <_Balloc+0x20>
 80090be:	2166      	movs	r1, #102	; 0x66
 80090c0:	4b17      	ldr	r3, [pc, #92]	; (8009120 <_Balloc+0x78>)
 80090c2:	4818      	ldr	r0, [pc, #96]	; (8009124 <_Balloc+0x7c>)
 80090c4:	f000 fde4 	bl	8009c90 <__assert_func>
 80090c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090cc:	6006      	str	r6, [r0, #0]
 80090ce:	60c6      	str	r6, [r0, #12]
 80090d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090d2:	68f3      	ldr	r3, [r6, #12]
 80090d4:	b183      	cbz	r3, 80090f8 <_Balloc+0x50>
 80090d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090de:	b9b8      	cbnz	r0, 8009110 <_Balloc+0x68>
 80090e0:	2101      	movs	r1, #1
 80090e2:	fa01 f605 	lsl.w	r6, r1, r5
 80090e6:	1d72      	adds	r2, r6, #5
 80090e8:	4620      	mov	r0, r4
 80090ea:	0092      	lsls	r2, r2, #2
 80090ec:	f000 fb5e 	bl	80097ac <_calloc_r>
 80090f0:	b160      	cbz	r0, 800910c <_Balloc+0x64>
 80090f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090f6:	e00e      	b.n	8009116 <_Balloc+0x6e>
 80090f8:	2221      	movs	r2, #33	; 0x21
 80090fa:	2104      	movs	r1, #4
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fb55 	bl	80097ac <_calloc_r>
 8009102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009104:	60f0      	str	r0, [r6, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e4      	bne.n	80090d6 <_Balloc+0x2e>
 800910c:	2000      	movs	r0, #0
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	6802      	ldr	r2, [r0, #0]
 8009112:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009116:	2300      	movs	r3, #0
 8009118:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800911c:	e7f7      	b.n	800910e <_Balloc+0x66>
 800911e:	bf00      	nop
 8009120:	08009fd9 	.word	0x08009fd9
 8009124:	0800a0c0 	.word	0x0800a0c0

08009128 <_Bfree>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800912c:	4605      	mov	r5, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b976      	cbnz	r6, 8009150 <_Bfree+0x28>
 8009132:	2010      	movs	r0, #16
 8009134:	f7ff ffa2 	bl	800907c <malloc>
 8009138:	4602      	mov	r2, r0
 800913a:	6268      	str	r0, [r5, #36]	; 0x24
 800913c:	b920      	cbnz	r0, 8009148 <_Bfree+0x20>
 800913e:	218a      	movs	r1, #138	; 0x8a
 8009140:	4b08      	ldr	r3, [pc, #32]	; (8009164 <_Bfree+0x3c>)
 8009142:	4809      	ldr	r0, [pc, #36]	; (8009168 <_Bfree+0x40>)
 8009144:	f000 fda4 	bl	8009c90 <__assert_func>
 8009148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800914c:	6006      	str	r6, [r0, #0]
 800914e:	60c6      	str	r6, [r0, #12]
 8009150:	b13c      	cbz	r4, 8009162 <_Bfree+0x3a>
 8009152:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009154:	6862      	ldr	r2, [r4, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800915c:	6021      	str	r1, [r4, #0]
 800915e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	08009fd9 	.word	0x08009fd9
 8009168:	0800a0c0 	.word	0x0800a0c0

0800916c <__multadd>:
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	4698      	mov	r8, r3
 8009172:	460c      	mov	r4, r1
 8009174:	2300      	movs	r3, #0
 8009176:	690e      	ldr	r6, [r1, #16]
 8009178:	4607      	mov	r7, r0
 800917a:	f101 0014 	add.w	r0, r1, #20
 800917e:	6805      	ldr	r5, [r0, #0]
 8009180:	3301      	adds	r3, #1
 8009182:	b2a9      	uxth	r1, r5
 8009184:	fb02 8101 	mla	r1, r2, r1, r8
 8009188:	0c2d      	lsrs	r5, r5, #16
 800918a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800918e:	fb02 c505 	mla	r5, r2, r5, ip
 8009192:	b289      	uxth	r1, r1
 8009194:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009198:	429e      	cmp	r6, r3
 800919a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800919e:	f840 1b04 	str.w	r1, [r0], #4
 80091a2:	dcec      	bgt.n	800917e <__multadd+0x12>
 80091a4:	f1b8 0f00 	cmp.w	r8, #0
 80091a8:	d022      	beq.n	80091f0 <__multadd+0x84>
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	42b3      	cmp	r3, r6
 80091ae:	dc19      	bgt.n	80091e4 <__multadd+0x78>
 80091b0:	6861      	ldr	r1, [r4, #4]
 80091b2:	4638      	mov	r0, r7
 80091b4:	3101      	adds	r1, #1
 80091b6:	f7ff ff77 	bl	80090a8 <_Balloc>
 80091ba:	4605      	mov	r5, r0
 80091bc:	b928      	cbnz	r0, 80091ca <__multadd+0x5e>
 80091be:	4602      	mov	r2, r0
 80091c0:	21b5      	movs	r1, #181	; 0xb5
 80091c2:	4b0d      	ldr	r3, [pc, #52]	; (80091f8 <__multadd+0x8c>)
 80091c4:	480d      	ldr	r0, [pc, #52]	; (80091fc <__multadd+0x90>)
 80091c6:	f000 fd63 	bl	8009c90 <__assert_func>
 80091ca:	6922      	ldr	r2, [r4, #16]
 80091cc:	f104 010c 	add.w	r1, r4, #12
 80091d0:	3202      	adds	r2, #2
 80091d2:	0092      	lsls	r2, r2, #2
 80091d4:	300c      	adds	r0, #12
 80091d6:	f7fe f8eb 	bl	80073b0 <memcpy>
 80091da:	4621      	mov	r1, r4
 80091dc:	4638      	mov	r0, r7
 80091de:	f7ff ffa3 	bl	8009128 <_Bfree>
 80091e2:	462c      	mov	r4, r5
 80091e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80091e8:	3601      	adds	r6, #1
 80091ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80091ee:	6126      	str	r6, [r4, #16]
 80091f0:	4620      	mov	r0, r4
 80091f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f6:	bf00      	nop
 80091f8:	0800a04f 	.word	0x0800a04f
 80091fc:	0800a0c0 	.word	0x0800a0c0

08009200 <__hi0bits>:
 8009200:	0c02      	lsrs	r2, r0, #16
 8009202:	0412      	lsls	r2, r2, #16
 8009204:	4603      	mov	r3, r0
 8009206:	b9ca      	cbnz	r2, 800923c <__hi0bits+0x3c>
 8009208:	0403      	lsls	r3, r0, #16
 800920a:	2010      	movs	r0, #16
 800920c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009210:	bf04      	itt	eq
 8009212:	021b      	lsleq	r3, r3, #8
 8009214:	3008      	addeq	r0, #8
 8009216:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800921a:	bf04      	itt	eq
 800921c:	011b      	lsleq	r3, r3, #4
 800921e:	3004      	addeq	r0, #4
 8009220:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009224:	bf04      	itt	eq
 8009226:	009b      	lsleq	r3, r3, #2
 8009228:	3002      	addeq	r0, #2
 800922a:	2b00      	cmp	r3, #0
 800922c:	db05      	blt.n	800923a <__hi0bits+0x3a>
 800922e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009232:	f100 0001 	add.w	r0, r0, #1
 8009236:	bf08      	it	eq
 8009238:	2020      	moveq	r0, #32
 800923a:	4770      	bx	lr
 800923c:	2000      	movs	r0, #0
 800923e:	e7e5      	b.n	800920c <__hi0bits+0xc>

08009240 <__lo0bits>:
 8009240:	6803      	ldr	r3, [r0, #0]
 8009242:	4602      	mov	r2, r0
 8009244:	f013 0007 	ands.w	r0, r3, #7
 8009248:	d00b      	beq.n	8009262 <__lo0bits+0x22>
 800924a:	07d9      	lsls	r1, r3, #31
 800924c:	d422      	bmi.n	8009294 <__lo0bits+0x54>
 800924e:	0798      	lsls	r0, r3, #30
 8009250:	bf49      	itett	mi
 8009252:	085b      	lsrmi	r3, r3, #1
 8009254:	089b      	lsrpl	r3, r3, #2
 8009256:	2001      	movmi	r0, #1
 8009258:	6013      	strmi	r3, [r2, #0]
 800925a:	bf5c      	itt	pl
 800925c:	2002      	movpl	r0, #2
 800925e:	6013      	strpl	r3, [r2, #0]
 8009260:	4770      	bx	lr
 8009262:	b299      	uxth	r1, r3
 8009264:	b909      	cbnz	r1, 800926a <__lo0bits+0x2a>
 8009266:	2010      	movs	r0, #16
 8009268:	0c1b      	lsrs	r3, r3, #16
 800926a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800926e:	bf04      	itt	eq
 8009270:	0a1b      	lsreq	r3, r3, #8
 8009272:	3008      	addeq	r0, #8
 8009274:	0719      	lsls	r1, r3, #28
 8009276:	bf04      	itt	eq
 8009278:	091b      	lsreq	r3, r3, #4
 800927a:	3004      	addeq	r0, #4
 800927c:	0799      	lsls	r1, r3, #30
 800927e:	bf04      	itt	eq
 8009280:	089b      	lsreq	r3, r3, #2
 8009282:	3002      	addeq	r0, #2
 8009284:	07d9      	lsls	r1, r3, #31
 8009286:	d403      	bmi.n	8009290 <__lo0bits+0x50>
 8009288:	085b      	lsrs	r3, r3, #1
 800928a:	f100 0001 	add.w	r0, r0, #1
 800928e:	d003      	beq.n	8009298 <__lo0bits+0x58>
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	4770      	bx	lr
 8009294:	2000      	movs	r0, #0
 8009296:	4770      	bx	lr
 8009298:	2020      	movs	r0, #32
 800929a:	4770      	bx	lr

0800929c <__i2b>:
 800929c:	b510      	push	{r4, lr}
 800929e:	460c      	mov	r4, r1
 80092a0:	2101      	movs	r1, #1
 80092a2:	f7ff ff01 	bl	80090a8 <_Balloc>
 80092a6:	4602      	mov	r2, r0
 80092a8:	b928      	cbnz	r0, 80092b6 <__i2b+0x1a>
 80092aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092ae:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <__i2b+0x24>)
 80092b0:	4804      	ldr	r0, [pc, #16]	; (80092c4 <__i2b+0x28>)
 80092b2:	f000 fced 	bl	8009c90 <__assert_func>
 80092b6:	2301      	movs	r3, #1
 80092b8:	6144      	str	r4, [r0, #20]
 80092ba:	6103      	str	r3, [r0, #16]
 80092bc:	bd10      	pop	{r4, pc}
 80092be:	bf00      	nop
 80092c0:	0800a04f 	.word	0x0800a04f
 80092c4:	0800a0c0 	.word	0x0800a0c0

080092c8 <__multiply>:
 80092c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	4614      	mov	r4, r2
 80092ce:	690a      	ldr	r2, [r1, #16]
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	460d      	mov	r5, r1
 80092d4:	429a      	cmp	r2, r3
 80092d6:	bfbe      	ittt	lt
 80092d8:	460b      	movlt	r3, r1
 80092da:	4625      	movlt	r5, r4
 80092dc:	461c      	movlt	r4, r3
 80092de:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80092e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80092e6:	68ab      	ldr	r3, [r5, #8]
 80092e8:	6869      	ldr	r1, [r5, #4]
 80092ea:	eb0a 0709 	add.w	r7, sl, r9
 80092ee:	42bb      	cmp	r3, r7
 80092f0:	b085      	sub	sp, #20
 80092f2:	bfb8      	it	lt
 80092f4:	3101      	addlt	r1, #1
 80092f6:	f7ff fed7 	bl	80090a8 <_Balloc>
 80092fa:	b930      	cbnz	r0, 800930a <__multiply+0x42>
 80092fc:	4602      	mov	r2, r0
 80092fe:	f240 115d 	movw	r1, #349	; 0x15d
 8009302:	4b41      	ldr	r3, [pc, #260]	; (8009408 <__multiply+0x140>)
 8009304:	4841      	ldr	r0, [pc, #260]	; (800940c <__multiply+0x144>)
 8009306:	f000 fcc3 	bl	8009c90 <__assert_func>
 800930a:	f100 0614 	add.w	r6, r0, #20
 800930e:	4633      	mov	r3, r6
 8009310:	2200      	movs	r2, #0
 8009312:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009316:	4543      	cmp	r3, r8
 8009318:	d31e      	bcc.n	8009358 <__multiply+0x90>
 800931a:	f105 0c14 	add.w	ip, r5, #20
 800931e:	f104 0314 	add.w	r3, r4, #20
 8009322:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009326:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800932a:	9202      	str	r2, [sp, #8]
 800932c:	ebac 0205 	sub.w	r2, ip, r5
 8009330:	3a15      	subs	r2, #21
 8009332:	f022 0203 	bic.w	r2, r2, #3
 8009336:	3204      	adds	r2, #4
 8009338:	f105 0115 	add.w	r1, r5, #21
 800933c:	458c      	cmp	ip, r1
 800933e:	bf38      	it	cc
 8009340:	2204      	movcc	r2, #4
 8009342:	9201      	str	r2, [sp, #4]
 8009344:	9a02      	ldr	r2, [sp, #8]
 8009346:	9303      	str	r3, [sp, #12]
 8009348:	429a      	cmp	r2, r3
 800934a:	d808      	bhi.n	800935e <__multiply+0x96>
 800934c:	2f00      	cmp	r7, #0
 800934e:	dc55      	bgt.n	80093fc <__multiply+0x134>
 8009350:	6107      	str	r7, [r0, #16]
 8009352:	b005      	add	sp, #20
 8009354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009358:	f843 2b04 	str.w	r2, [r3], #4
 800935c:	e7db      	b.n	8009316 <__multiply+0x4e>
 800935e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009362:	f1ba 0f00 	cmp.w	sl, #0
 8009366:	d020      	beq.n	80093aa <__multiply+0xe2>
 8009368:	46b1      	mov	r9, r6
 800936a:	2200      	movs	r2, #0
 800936c:	f105 0e14 	add.w	lr, r5, #20
 8009370:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009374:	f8d9 b000 	ldr.w	fp, [r9]
 8009378:	b2a1      	uxth	r1, r4
 800937a:	fa1f fb8b 	uxth.w	fp, fp
 800937e:	fb0a b101 	mla	r1, sl, r1, fp
 8009382:	4411      	add	r1, r2
 8009384:	f8d9 2000 	ldr.w	r2, [r9]
 8009388:	0c24      	lsrs	r4, r4, #16
 800938a:	0c12      	lsrs	r2, r2, #16
 800938c:	fb0a 2404 	mla	r4, sl, r4, r2
 8009390:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009394:	b289      	uxth	r1, r1
 8009396:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800939a:	45f4      	cmp	ip, lr
 800939c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80093a0:	f849 1b04 	str.w	r1, [r9], #4
 80093a4:	d8e4      	bhi.n	8009370 <__multiply+0xa8>
 80093a6:	9901      	ldr	r1, [sp, #4]
 80093a8:	5072      	str	r2, [r6, r1]
 80093aa:	9a03      	ldr	r2, [sp, #12]
 80093ac:	3304      	adds	r3, #4
 80093ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093b2:	f1b9 0f00 	cmp.w	r9, #0
 80093b6:	d01f      	beq.n	80093f8 <__multiply+0x130>
 80093b8:	46b6      	mov	lr, r6
 80093ba:	f04f 0a00 	mov.w	sl, #0
 80093be:	6834      	ldr	r4, [r6, #0]
 80093c0:	f105 0114 	add.w	r1, r5, #20
 80093c4:	880a      	ldrh	r2, [r1, #0]
 80093c6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80093ca:	b2a4      	uxth	r4, r4
 80093cc:	fb09 b202 	mla	r2, r9, r2, fp
 80093d0:	4492      	add	sl, r2
 80093d2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80093d6:	f84e 4b04 	str.w	r4, [lr], #4
 80093da:	f851 4b04 	ldr.w	r4, [r1], #4
 80093de:	f8be 2000 	ldrh.w	r2, [lr]
 80093e2:	0c24      	lsrs	r4, r4, #16
 80093e4:	fb09 2404 	mla	r4, r9, r4, r2
 80093e8:	458c      	cmp	ip, r1
 80093ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80093ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80093f2:	d8e7      	bhi.n	80093c4 <__multiply+0xfc>
 80093f4:	9a01      	ldr	r2, [sp, #4]
 80093f6:	50b4      	str	r4, [r6, r2]
 80093f8:	3604      	adds	r6, #4
 80093fa:	e7a3      	b.n	8009344 <__multiply+0x7c>
 80093fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1a5      	bne.n	8009350 <__multiply+0x88>
 8009404:	3f01      	subs	r7, #1
 8009406:	e7a1      	b.n	800934c <__multiply+0x84>
 8009408:	0800a04f 	.word	0x0800a04f
 800940c:	0800a0c0 	.word	0x0800a0c0

08009410 <__pow5mult>:
 8009410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009414:	4615      	mov	r5, r2
 8009416:	f012 0203 	ands.w	r2, r2, #3
 800941a:	4606      	mov	r6, r0
 800941c:	460f      	mov	r7, r1
 800941e:	d007      	beq.n	8009430 <__pow5mult+0x20>
 8009420:	4c25      	ldr	r4, [pc, #148]	; (80094b8 <__pow5mult+0xa8>)
 8009422:	3a01      	subs	r2, #1
 8009424:	2300      	movs	r3, #0
 8009426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800942a:	f7ff fe9f 	bl	800916c <__multadd>
 800942e:	4607      	mov	r7, r0
 8009430:	10ad      	asrs	r5, r5, #2
 8009432:	d03d      	beq.n	80094b0 <__pow5mult+0xa0>
 8009434:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009436:	b97c      	cbnz	r4, 8009458 <__pow5mult+0x48>
 8009438:	2010      	movs	r0, #16
 800943a:	f7ff fe1f 	bl	800907c <malloc>
 800943e:	4602      	mov	r2, r0
 8009440:	6270      	str	r0, [r6, #36]	; 0x24
 8009442:	b928      	cbnz	r0, 8009450 <__pow5mult+0x40>
 8009444:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009448:	4b1c      	ldr	r3, [pc, #112]	; (80094bc <__pow5mult+0xac>)
 800944a:	481d      	ldr	r0, [pc, #116]	; (80094c0 <__pow5mult+0xb0>)
 800944c:	f000 fc20 	bl	8009c90 <__assert_func>
 8009450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009454:	6004      	str	r4, [r0, #0]
 8009456:	60c4      	str	r4, [r0, #12]
 8009458:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800945c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009460:	b94c      	cbnz	r4, 8009476 <__pow5mult+0x66>
 8009462:	f240 2171 	movw	r1, #625	; 0x271
 8009466:	4630      	mov	r0, r6
 8009468:	f7ff ff18 	bl	800929c <__i2b>
 800946c:	2300      	movs	r3, #0
 800946e:	4604      	mov	r4, r0
 8009470:	f8c8 0008 	str.w	r0, [r8, #8]
 8009474:	6003      	str	r3, [r0, #0]
 8009476:	f04f 0900 	mov.w	r9, #0
 800947a:	07eb      	lsls	r3, r5, #31
 800947c:	d50a      	bpl.n	8009494 <__pow5mult+0x84>
 800947e:	4639      	mov	r1, r7
 8009480:	4622      	mov	r2, r4
 8009482:	4630      	mov	r0, r6
 8009484:	f7ff ff20 	bl	80092c8 <__multiply>
 8009488:	4680      	mov	r8, r0
 800948a:	4639      	mov	r1, r7
 800948c:	4630      	mov	r0, r6
 800948e:	f7ff fe4b 	bl	8009128 <_Bfree>
 8009492:	4647      	mov	r7, r8
 8009494:	106d      	asrs	r5, r5, #1
 8009496:	d00b      	beq.n	80094b0 <__pow5mult+0xa0>
 8009498:	6820      	ldr	r0, [r4, #0]
 800949a:	b938      	cbnz	r0, 80094ac <__pow5mult+0x9c>
 800949c:	4622      	mov	r2, r4
 800949e:	4621      	mov	r1, r4
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7ff ff11 	bl	80092c8 <__multiply>
 80094a6:	6020      	str	r0, [r4, #0]
 80094a8:	f8c0 9000 	str.w	r9, [r0]
 80094ac:	4604      	mov	r4, r0
 80094ae:	e7e4      	b.n	800947a <__pow5mult+0x6a>
 80094b0:	4638      	mov	r0, r7
 80094b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094b6:	bf00      	nop
 80094b8:	0800a210 	.word	0x0800a210
 80094bc:	08009fd9 	.word	0x08009fd9
 80094c0:	0800a0c0 	.word	0x0800a0c0

080094c4 <__lshift>:
 80094c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	460c      	mov	r4, r1
 80094ca:	4607      	mov	r7, r0
 80094cc:	4691      	mov	r9, r2
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	6849      	ldr	r1, [r1, #4]
 80094d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094d6:	68a3      	ldr	r3, [r4, #8]
 80094d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094dc:	f108 0601 	add.w	r6, r8, #1
 80094e0:	42b3      	cmp	r3, r6
 80094e2:	db0b      	blt.n	80094fc <__lshift+0x38>
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff fddf 	bl	80090a8 <_Balloc>
 80094ea:	4605      	mov	r5, r0
 80094ec:	b948      	cbnz	r0, 8009502 <__lshift+0x3e>
 80094ee:	4602      	mov	r2, r0
 80094f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094f4:	4b27      	ldr	r3, [pc, #156]	; (8009594 <__lshift+0xd0>)
 80094f6:	4828      	ldr	r0, [pc, #160]	; (8009598 <__lshift+0xd4>)
 80094f8:	f000 fbca 	bl	8009c90 <__assert_func>
 80094fc:	3101      	adds	r1, #1
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	e7ee      	b.n	80094e0 <__lshift+0x1c>
 8009502:	2300      	movs	r3, #0
 8009504:	f100 0114 	add.w	r1, r0, #20
 8009508:	f100 0210 	add.w	r2, r0, #16
 800950c:	4618      	mov	r0, r3
 800950e:	4553      	cmp	r3, sl
 8009510:	db33      	blt.n	800957a <__lshift+0xb6>
 8009512:	6920      	ldr	r0, [r4, #16]
 8009514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009518:	f104 0314 	add.w	r3, r4, #20
 800951c:	f019 091f 	ands.w	r9, r9, #31
 8009520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009528:	d02b      	beq.n	8009582 <__lshift+0xbe>
 800952a:	468a      	mov	sl, r1
 800952c:	2200      	movs	r2, #0
 800952e:	f1c9 0e20 	rsb	lr, r9, #32
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	fa00 f009 	lsl.w	r0, r0, r9
 8009538:	4302      	orrs	r2, r0
 800953a:	f84a 2b04 	str.w	r2, [sl], #4
 800953e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009542:	459c      	cmp	ip, r3
 8009544:	fa22 f20e 	lsr.w	r2, r2, lr
 8009548:	d8f3      	bhi.n	8009532 <__lshift+0x6e>
 800954a:	ebac 0304 	sub.w	r3, ip, r4
 800954e:	3b15      	subs	r3, #21
 8009550:	f023 0303 	bic.w	r3, r3, #3
 8009554:	3304      	adds	r3, #4
 8009556:	f104 0015 	add.w	r0, r4, #21
 800955a:	4584      	cmp	ip, r0
 800955c:	bf38      	it	cc
 800955e:	2304      	movcc	r3, #4
 8009560:	50ca      	str	r2, [r1, r3]
 8009562:	b10a      	cbz	r2, 8009568 <__lshift+0xa4>
 8009564:	f108 0602 	add.w	r6, r8, #2
 8009568:	3e01      	subs	r6, #1
 800956a:	4638      	mov	r0, r7
 800956c:	4621      	mov	r1, r4
 800956e:	612e      	str	r6, [r5, #16]
 8009570:	f7ff fdda 	bl	8009128 <_Bfree>
 8009574:	4628      	mov	r0, r5
 8009576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957a:	f842 0f04 	str.w	r0, [r2, #4]!
 800957e:	3301      	adds	r3, #1
 8009580:	e7c5      	b.n	800950e <__lshift+0x4a>
 8009582:	3904      	subs	r1, #4
 8009584:	f853 2b04 	ldr.w	r2, [r3], #4
 8009588:	459c      	cmp	ip, r3
 800958a:	f841 2f04 	str.w	r2, [r1, #4]!
 800958e:	d8f9      	bhi.n	8009584 <__lshift+0xc0>
 8009590:	e7ea      	b.n	8009568 <__lshift+0xa4>
 8009592:	bf00      	nop
 8009594:	0800a04f 	.word	0x0800a04f
 8009598:	0800a0c0 	.word	0x0800a0c0

0800959c <__mcmp>:
 800959c:	4603      	mov	r3, r0
 800959e:	690a      	ldr	r2, [r1, #16]
 80095a0:	6900      	ldr	r0, [r0, #16]
 80095a2:	b530      	push	{r4, r5, lr}
 80095a4:	1a80      	subs	r0, r0, r2
 80095a6:	d10d      	bne.n	80095c4 <__mcmp+0x28>
 80095a8:	3314      	adds	r3, #20
 80095aa:	3114      	adds	r1, #20
 80095ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095bc:	4295      	cmp	r5, r2
 80095be:	d002      	beq.n	80095c6 <__mcmp+0x2a>
 80095c0:	d304      	bcc.n	80095cc <__mcmp+0x30>
 80095c2:	2001      	movs	r0, #1
 80095c4:	bd30      	pop	{r4, r5, pc}
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	d3f4      	bcc.n	80095b4 <__mcmp+0x18>
 80095ca:	e7fb      	b.n	80095c4 <__mcmp+0x28>
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295
 80095d0:	e7f8      	b.n	80095c4 <__mcmp+0x28>
	...

080095d4 <__mdiff>:
 80095d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	460c      	mov	r4, r1
 80095da:	4606      	mov	r6, r0
 80095dc:	4611      	mov	r1, r2
 80095de:	4620      	mov	r0, r4
 80095e0:	4692      	mov	sl, r2
 80095e2:	f7ff ffdb 	bl	800959c <__mcmp>
 80095e6:	1e05      	subs	r5, r0, #0
 80095e8:	d111      	bne.n	800960e <__mdiff+0x3a>
 80095ea:	4629      	mov	r1, r5
 80095ec:	4630      	mov	r0, r6
 80095ee:	f7ff fd5b 	bl	80090a8 <_Balloc>
 80095f2:	4602      	mov	r2, r0
 80095f4:	b928      	cbnz	r0, 8009602 <__mdiff+0x2e>
 80095f6:	f240 2132 	movw	r1, #562	; 0x232
 80095fa:	4b3c      	ldr	r3, [pc, #240]	; (80096ec <__mdiff+0x118>)
 80095fc:	483c      	ldr	r0, [pc, #240]	; (80096f0 <__mdiff+0x11c>)
 80095fe:	f000 fb47 	bl	8009c90 <__assert_func>
 8009602:	2301      	movs	r3, #1
 8009604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009608:	4610      	mov	r0, r2
 800960a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960e:	bfa4      	itt	ge
 8009610:	4653      	movge	r3, sl
 8009612:	46a2      	movge	sl, r4
 8009614:	4630      	mov	r0, r6
 8009616:	f8da 1004 	ldr.w	r1, [sl, #4]
 800961a:	bfa6      	itte	ge
 800961c:	461c      	movge	r4, r3
 800961e:	2500      	movge	r5, #0
 8009620:	2501      	movlt	r5, #1
 8009622:	f7ff fd41 	bl	80090a8 <_Balloc>
 8009626:	4602      	mov	r2, r0
 8009628:	b918      	cbnz	r0, 8009632 <__mdiff+0x5e>
 800962a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800962e:	4b2f      	ldr	r3, [pc, #188]	; (80096ec <__mdiff+0x118>)
 8009630:	e7e4      	b.n	80095fc <__mdiff+0x28>
 8009632:	f100 0814 	add.w	r8, r0, #20
 8009636:	f8da 7010 	ldr.w	r7, [sl, #16]
 800963a:	60c5      	str	r5, [r0, #12]
 800963c:	f04f 0c00 	mov.w	ip, #0
 8009640:	f10a 0514 	add.w	r5, sl, #20
 8009644:	f10a 0010 	add.w	r0, sl, #16
 8009648:	46c2      	mov	sl, r8
 800964a:	6926      	ldr	r6, [r4, #16]
 800964c:	f104 0914 	add.w	r9, r4, #20
 8009650:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009654:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009658:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800965c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009660:	fa1f f18b 	uxth.w	r1, fp
 8009664:	4461      	add	r1, ip
 8009666:	fa1f fc83 	uxth.w	ip, r3
 800966a:	0c1b      	lsrs	r3, r3, #16
 800966c:	eba1 010c 	sub.w	r1, r1, ip
 8009670:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009674:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009678:	b289      	uxth	r1, r1
 800967a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800967e:	454e      	cmp	r6, r9
 8009680:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009684:	f84a 3b04 	str.w	r3, [sl], #4
 8009688:	d8e6      	bhi.n	8009658 <__mdiff+0x84>
 800968a:	1b33      	subs	r3, r6, r4
 800968c:	3b15      	subs	r3, #21
 800968e:	f023 0303 	bic.w	r3, r3, #3
 8009692:	3415      	adds	r4, #21
 8009694:	3304      	adds	r3, #4
 8009696:	42a6      	cmp	r6, r4
 8009698:	bf38      	it	cc
 800969a:	2304      	movcc	r3, #4
 800969c:	441d      	add	r5, r3
 800969e:	4443      	add	r3, r8
 80096a0:	461e      	mov	r6, r3
 80096a2:	462c      	mov	r4, r5
 80096a4:	4574      	cmp	r4, lr
 80096a6:	d30e      	bcc.n	80096c6 <__mdiff+0xf2>
 80096a8:	f10e 0103 	add.w	r1, lr, #3
 80096ac:	1b49      	subs	r1, r1, r5
 80096ae:	f021 0103 	bic.w	r1, r1, #3
 80096b2:	3d03      	subs	r5, #3
 80096b4:	45ae      	cmp	lr, r5
 80096b6:	bf38      	it	cc
 80096b8:	2100      	movcc	r1, #0
 80096ba:	4419      	add	r1, r3
 80096bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80096c0:	b18b      	cbz	r3, 80096e6 <__mdiff+0x112>
 80096c2:	6117      	str	r7, [r2, #16]
 80096c4:	e7a0      	b.n	8009608 <__mdiff+0x34>
 80096c6:	f854 8b04 	ldr.w	r8, [r4], #4
 80096ca:	fa1f f188 	uxth.w	r1, r8
 80096ce:	4461      	add	r1, ip
 80096d0:	1408      	asrs	r0, r1, #16
 80096d2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80096d6:	b289      	uxth	r1, r1
 80096d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80096dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096e0:	f846 1b04 	str.w	r1, [r6], #4
 80096e4:	e7de      	b.n	80096a4 <__mdiff+0xd0>
 80096e6:	3f01      	subs	r7, #1
 80096e8:	e7e8      	b.n	80096bc <__mdiff+0xe8>
 80096ea:	bf00      	nop
 80096ec:	0800a04f 	.word	0x0800a04f
 80096f0:	0800a0c0 	.word	0x0800a0c0

080096f4 <__d2b>:
 80096f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80096f8:	2101      	movs	r1, #1
 80096fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80096fe:	4690      	mov	r8, r2
 8009700:	461d      	mov	r5, r3
 8009702:	f7ff fcd1 	bl	80090a8 <_Balloc>
 8009706:	4604      	mov	r4, r0
 8009708:	b930      	cbnz	r0, 8009718 <__d2b+0x24>
 800970a:	4602      	mov	r2, r0
 800970c:	f240 310a 	movw	r1, #778	; 0x30a
 8009710:	4b24      	ldr	r3, [pc, #144]	; (80097a4 <__d2b+0xb0>)
 8009712:	4825      	ldr	r0, [pc, #148]	; (80097a8 <__d2b+0xb4>)
 8009714:	f000 fabc 	bl	8009c90 <__assert_func>
 8009718:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800971c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009720:	bb2d      	cbnz	r5, 800976e <__d2b+0x7a>
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	f1b8 0300 	subs.w	r3, r8, #0
 8009728:	d026      	beq.n	8009778 <__d2b+0x84>
 800972a:	4668      	mov	r0, sp
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	f7ff fd87 	bl	8009240 <__lo0bits>
 8009732:	9900      	ldr	r1, [sp, #0]
 8009734:	b1f0      	cbz	r0, 8009774 <__d2b+0x80>
 8009736:	9a01      	ldr	r2, [sp, #4]
 8009738:	f1c0 0320 	rsb	r3, r0, #32
 800973c:	fa02 f303 	lsl.w	r3, r2, r3
 8009740:	430b      	orrs	r3, r1
 8009742:	40c2      	lsrs	r2, r0
 8009744:	6163      	str	r3, [r4, #20]
 8009746:	9201      	str	r2, [sp, #4]
 8009748:	9b01      	ldr	r3, [sp, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	bf14      	ite	ne
 800974e:	2102      	movne	r1, #2
 8009750:	2101      	moveq	r1, #1
 8009752:	61a3      	str	r3, [r4, #24]
 8009754:	6121      	str	r1, [r4, #16]
 8009756:	b1c5      	cbz	r5, 800978a <__d2b+0x96>
 8009758:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800975c:	4405      	add	r5, r0
 800975e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009762:	603d      	str	r5, [r7, #0]
 8009764:	6030      	str	r0, [r6, #0]
 8009766:	4620      	mov	r0, r4
 8009768:	b002      	add	sp, #8
 800976a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009772:	e7d6      	b.n	8009722 <__d2b+0x2e>
 8009774:	6161      	str	r1, [r4, #20]
 8009776:	e7e7      	b.n	8009748 <__d2b+0x54>
 8009778:	a801      	add	r0, sp, #4
 800977a:	f7ff fd61 	bl	8009240 <__lo0bits>
 800977e:	2101      	movs	r1, #1
 8009780:	9b01      	ldr	r3, [sp, #4]
 8009782:	6121      	str	r1, [r4, #16]
 8009784:	6163      	str	r3, [r4, #20]
 8009786:	3020      	adds	r0, #32
 8009788:	e7e5      	b.n	8009756 <__d2b+0x62>
 800978a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800978e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009792:	6038      	str	r0, [r7, #0]
 8009794:	6918      	ldr	r0, [r3, #16]
 8009796:	f7ff fd33 	bl	8009200 <__hi0bits>
 800979a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800979e:	6031      	str	r1, [r6, #0]
 80097a0:	e7e1      	b.n	8009766 <__d2b+0x72>
 80097a2:	bf00      	nop
 80097a4:	0800a04f 	.word	0x0800a04f
 80097a8:	0800a0c0 	.word	0x0800a0c0

080097ac <_calloc_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	fb02 f501 	mul.w	r5, r2, r1
 80097b2:	4629      	mov	r1, r5
 80097b4:	f000 f854 	bl	8009860 <_malloc_r>
 80097b8:	4604      	mov	r4, r0
 80097ba:	b118      	cbz	r0, 80097c4 <_calloc_r+0x18>
 80097bc:	462a      	mov	r2, r5
 80097be:	2100      	movs	r1, #0
 80097c0:	f7fd fe04 	bl	80073cc <memset>
 80097c4:	4620      	mov	r0, r4
 80097c6:	bd38      	pop	{r3, r4, r5, pc}

080097c8 <_free_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	4605      	mov	r5, r0
 80097cc:	2900      	cmp	r1, #0
 80097ce:	d043      	beq.n	8009858 <_free_r+0x90>
 80097d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097d4:	1f0c      	subs	r4, r1, #4
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bfb8      	it	lt
 80097da:	18e4      	addlt	r4, r4, r3
 80097dc:	f000 fade 	bl	8009d9c <__malloc_lock>
 80097e0:	4a1e      	ldr	r2, [pc, #120]	; (800985c <_free_r+0x94>)
 80097e2:	6813      	ldr	r3, [r2, #0]
 80097e4:	4610      	mov	r0, r2
 80097e6:	b933      	cbnz	r3, 80097f6 <_free_r+0x2e>
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	6014      	str	r4, [r2, #0]
 80097ec:	4628      	mov	r0, r5
 80097ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097f2:	f000 bad9 	b.w	8009da8 <__malloc_unlock>
 80097f6:	42a3      	cmp	r3, r4
 80097f8:	d90a      	bls.n	8009810 <_free_r+0x48>
 80097fa:	6821      	ldr	r1, [r4, #0]
 80097fc:	1862      	adds	r2, r4, r1
 80097fe:	4293      	cmp	r3, r2
 8009800:	bf01      	itttt	eq
 8009802:	681a      	ldreq	r2, [r3, #0]
 8009804:	685b      	ldreq	r3, [r3, #4]
 8009806:	1852      	addeq	r2, r2, r1
 8009808:	6022      	streq	r2, [r4, #0]
 800980a:	6063      	str	r3, [r4, #4]
 800980c:	6004      	str	r4, [r0, #0]
 800980e:	e7ed      	b.n	80097ec <_free_r+0x24>
 8009810:	461a      	mov	r2, r3
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	b10b      	cbz	r3, 800981a <_free_r+0x52>
 8009816:	42a3      	cmp	r3, r4
 8009818:	d9fa      	bls.n	8009810 <_free_r+0x48>
 800981a:	6811      	ldr	r1, [r2, #0]
 800981c:	1850      	adds	r0, r2, r1
 800981e:	42a0      	cmp	r0, r4
 8009820:	d10b      	bne.n	800983a <_free_r+0x72>
 8009822:	6820      	ldr	r0, [r4, #0]
 8009824:	4401      	add	r1, r0
 8009826:	1850      	adds	r0, r2, r1
 8009828:	4283      	cmp	r3, r0
 800982a:	6011      	str	r1, [r2, #0]
 800982c:	d1de      	bne.n	80097ec <_free_r+0x24>
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	4401      	add	r1, r0
 8009834:	6011      	str	r1, [r2, #0]
 8009836:	6053      	str	r3, [r2, #4]
 8009838:	e7d8      	b.n	80097ec <_free_r+0x24>
 800983a:	d902      	bls.n	8009842 <_free_r+0x7a>
 800983c:	230c      	movs	r3, #12
 800983e:	602b      	str	r3, [r5, #0]
 8009840:	e7d4      	b.n	80097ec <_free_r+0x24>
 8009842:	6820      	ldr	r0, [r4, #0]
 8009844:	1821      	adds	r1, r4, r0
 8009846:	428b      	cmp	r3, r1
 8009848:	bf01      	itttt	eq
 800984a:	6819      	ldreq	r1, [r3, #0]
 800984c:	685b      	ldreq	r3, [r3, #4]
 800984e:	1809      	addeq	r1, r1, r0
 8009850:	6021      	streq	r1, [r4, #0]
 8009852:	6063      	str	r3, [r4, #4]
 8009854:	6054      	str	r4, [r2, #4]
 8009856:	e7c9      	b.n	80097ec <_free_r+0x24>
 8009858:	bd38      	pop	{r3, r4, r5, pc}
 800985a:	bf00      	nop
 800985c:	20001b14 	.word	0x20001b14

08009860 <_malloc_r>:
 8009860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009862:	1ccd      	adds	r5, r1, #3
 8009864:	f025 0503 	bic.w	r5, r5, #3
 8009868:	3508      	adds	r5, #8
 800986a:	2d0c      	cmp	r5, #12
 800986c:	bf38      	it	cc
 800986e:	250c      	movcc	r5, #12
 8009870:	2d00      	cmp	r5, #0
 8009872:	4606      	mov	r6, r0
 8009874:	db01      	blt.n	800987a <_malloc_r+0x1a>
 8009876:	42a9      	cmp	r1, r5
 8009878:	d903      	bls.n	8009882 <_malloc_r+0x22>
 800987a:	230c      	movs	r3, #12
 800987c:	6033      	str	r3, [r6, #0]
 800987e:	2000      	movs	r0, #0
 8009880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009882:	f000 fa8b 	bl	8009d9c <__malloc_lock>
 8009886:	4921      	ldr	r1, [pc, #132]	; (800990c <_malloc_r+0xac>)
 8009888:	680a      	ldr	r2, [r1, #0]
 800988a:	4614      	mov	r4, r2
 800988c:	b99c      	cbnz	r4, 80098b6 <_malloc_r+0x56>
 800988e:	4f20      	ldr	r7, [pc, #128]	; (8009910 <_malloc_r+0xb0>)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	b923      	cbnz	r3, 800989e <_malloc_r+0x3e>
 8009894:	4621      	mov	r1, r4
 8009896:	4630      	mov	r0, r6
 8009898:	f000 f994 	bl	8009bc4 <_sbrk_r>
 800989c:	6038      	str	r0, [r7, #0]
 800989e:	4629      	mov	r1, r5
 80098a0:	4630      	mov	r0, r6
 80098a2:	f000 f98f 	bl	8009bc4 <_sbrk_r>
 80098a6:	1c43      	adds	r3, r0, #1
 80098a8:	d123      	bne.n	80098f2 <_malloc_r+0x92>
 80098aa:	230c      	movs	r3, #12
 80098ac:	4630      	mov	r0, r6
 80098ae:	6033      	str	r3, [r6, #0]
 80098b0:	f000 fa7a 	bl	8009da8 <__malloc_unlock>
 80098b4:	e7e3      	b.n	800987e <_malloc_r+0x1e>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	1b5b      	subs	r3, r3, r5
 80098ba:	d417      	bmi.n	80098ec <_malloc_r+0x8c>
 80098bc:	2b0b      	cmp	r3, #11
 80098be:	d903      	bls.n	80098c8 <_malloc_r+0x68>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	441c      	add	r4, r3
 80098c4:	6025      	str	r5, [r4, #0]
 80098c6:	e004      	b.n	80098d2 <_malloc_r+0x72>
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	42a2      	cmp	r2, r4
 80098cc:	bf0c      	ite	eq
 80098ce:	600b      	streq	r3, [r1, #0]
 80098d0:	6053      	strne	r3, [r2, #4]
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 fa68 	bl	8009da8 <__malloc_unlock>
 80098d8:	f104 000b 	add.w	r0, r4, #11
 80098dc:	1d23      	adds	r3, r4, #4
 80098de:	f020 0007 	bic.w	r0, r0, #7
 80098e2:	1ac2      	subs	r2, r0, r3
 80098e4:	d0cc      	beq.n	8009880 <_malloc_r+0x20>
 80098e6:	1a1b      	subs	r3, r3, r0
 80098e8:	50a3      	str	r3, [r4, r2]
 80098ea:	e7c9      	b.n	8009880 <_malloc_r+0x20>
 80098ec:	4622      	mov	r2, r4
 80098ee:	6864      	ldr	r4, [r4, #4]
 80098f0:	e7cc      	b.n	800988c <_malloc_r+0x2c>
 80098f2:	1cc4      	adds	r4, r0, #3
 80098f4:	f024 0403 	bic.w	r4, r4, #3
 80098f8:	42a0      	cmp	r0, r4
 80098fa:	d0e3      	beq.n	80098c4 <_malloc_r+0x64>
 80098fc:	1a21      	subs	r1, r4, r0
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 f960 	bl	8009bc4 <_sbrk_r>
 8009904:	3001      	adds	r0, #1
 8009906:	d1dd      	bne.n	80098c4 <_malloc_r+0x64>
 8009908:	e7cf      	b.n	80098aa <_malloc_r+0x4a>
 800990a:	bf00      	nop
 800990c:	20001b14 	.word	0x20001b14
 8009910:	20001b18 	.word	0x20001b18

08009914 <__sfputc_r>:
 8009914:	6893      	ldr	r3, [r2, #8]
 8009916:	b410      	push	{r4}
 8009918:	3b01      	subs	r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	6093      	str	r3, [r2, #8]
 800991e:	da07      	bge.n	8009930 <__sfputc_r+0x1c>
 8009920:	6994      	ldr	r4, [r2, #24]
 8009922:	42a3      	cmp	r3, r4
 8009924:	db01      	blt.n	800992a <__sfputc_r+0x16>
 8009926:	290a      	cmp	r1, #10
 8009928:	d102      	bne.n	8009930 <__sfputc_r+0x1c>
 800992a:	bc10      	pop	{r4}
 800992c:	f7fe ba44 	b.w	8007db8 <__swbuf_r>
 8009930:	6813      	ldr	r3, [r2, #0]
 8009932:	1c58      	adds	r0, r3, #1
 8009934:	6010      	str	r0, [r2, #0]
 8009936:	7019      	strb	r1, [r3, #0]
 8009938:	4608      	mov	r0, r1
 800993a:	bc10      	pop	{r4}
 800993c:	4770      	bx	lr

0800993e <__sfputs_r>:
 800993e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009940:	4606      	mov	r6, r0
 8009942:	460f      	mov	r7, r1
 8009944:	4614      	mov	r4, r2
 8009946:	18d5      	adds	r5, r2, r3
 8009948:	42ac      	cmp	r4, r5
 800994a:	d101      	bne.n	8009950 <__sfputs_r+0x12>
 800994c:	2000      	movs	r0, #0
 800994e:	e007      	b.n	8009960 <__sfputs_r+0x22>
 8009950:	463a      	mov	r2, r7
 8009952:	4630      	mov	r0, r6
 8009954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009958:	f7ff ffdc 	bl	8009914 <__sfputc_r>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d1f3      	bne.n	8009948 <__sfputs_r+0xa>
 8009960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009964 <_vfiprintf_r>:
 8009964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009968:	460d      	mov	r5, r1
 800996a:	4614      	mov	r4, r2
 800996c:	4698      	mov	r8, r3
 800996e:	4606      	mov	r6, r0
 8009970:	b09d      	sub	sp, #116	; 0x74
 8009972:	b118      	cbz	r0, 800997c <_vfiprintf_r+0x18>
 8009974:	6983      	ldr	r3, [r0, #24]
 8009976:	b90b      	cbnz	r3, 800997c <_vfiprintf_r+0x18>
 8009978:	f7ff fa76 	bl	8008e68 <__sinit>
 800997c:	4b89      	ldr	r3, [pc, #548]	; (8009ba4 <_vfiprintf_r+0x240>)
 800997e:	429d      	cmp	r5, r3
 8009980:	d11b      	bne.n	80099ba <_vfiprintf_r+0x56>
 8009982:	6875      	ldr	r5, [r6, #4]
 8009984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009986:	07d9      	lsls	r1, r3, #31
 8009988:	d405      	bmi.n	8009996 <_vfiprintf_r+0x32>
 800998a:	89ab      	ldrh	r3, [r5, #12]
 800998c:	059a      	lsls	r2, r3, #22
 800998e:	d402      	bmi.n	8009996 <_vfiprintf_r+0x32>
 8009990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009992:	f7ff fb0c 	bl	8008fae <__retarget_lock_acquire_recursive>
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	071b      	lsls	r3, r3, #28
 800999a:	d501      	bpl.n	80099a0 <_vfiprintf_r+0x3c>
 800999c:	692b      	ldr	r3, [r5, #16]
 800999e:	b9eb      	cbnz	r3, 80099dc <_vfiprintf_r+0x78>
 80099a0:	4629      	mov	r1, r5
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7fe fa5a 	bl	8007e5c <__swsetup_r>
 80099a8:	b1c0      	cbz	r0, 80099dc <_vfiprintf_r+0x78>
 80099aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ac:	07dc      	lsls	r4, r3, #31
 80099ae:	d50e      	bpl.n	80099ce <_vfiprintf_r+0x6a>
 80099b0:	f04f 30ff 	mov.w	r0, #4294967295
 80099b4:	b01d      	add	sp, #116	; 0x74
 80099b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ba:	4b7b      	ldr	r3, [pc, #492]	; (8009ba8 <_vfiprintf_r+0x244>)
 80099bc:	429d      	cmp	r5, r3
 80099be:	d101      	bne.n	80099c4 <_vfiprintf_r+0x60>
 80099c0:	68b5      	ldr	r5, [r6, #8]
 80099c2:	e7df      	b.n	8009984 <_vfiprintf_r+0x20>
 80099c4:	4b79      	ldr	r3, [pc, #484]	; (8009bac <_vfiprintf_r+0x248>)
 80099c6:	429d      	cmp	r5, r3
 80099c8:	bf08      	it	eq
 80099ca:	68f5      	ldreq	r5, [r6, #12]
 80099cc:	e7da      	b.n	8009984 <_vfiprintf_r+0x20>
 80099ce:	89ab      	ldrh	r3, [r5, #12]
 80099d0:	0598      	lsls	r0, r3, #22
 80099d2:	d4ed      	bmi.n	80099b0 <_vfiprintf_r+0x4c>
 80099d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099d6:	f7ff faeb 	bl	8008fb0 <__retarget_lock_release_recursive>
 80099da:	e7e9      	b.n	80099b0 <_vfiprintf_r+0x4c>
 80099dc:	2300      	movs	r3, #0
 80099de:	9309      	str	r3, [sp, #36]	; 0x24
 80099e0:	2320      	movs	r3, #32
 80099e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099e6:	2330      	movs	r3, #48	; 0x30
 80099e8:	f04f 0901 	mov.w	r9, #1
 80099ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80099f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009bb0 <_vfiprintf_r+0x24c>
 80099f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099f8:	4623      	mov	r3, r4
 80099fa:	469a      	mov	sl, r3
 80099fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a00:	b10a      	cbz	r2, 8009a06 <_vfiprintf_r+0xa2>
 8009a02:	2a25      	cmp	r2, #37	; 0x25
 8009a04:	d1f9      	bne.n	80099fa <_vfiprintf_r+0x96>
 8009a06:	ebba 0b04 	subs.w	fp, sl, r4
 8009a0a:	d00b      	beq.n	8009a24 <_vfiprintf_r+0xc0>
 8009a0c:	465b      	mov	r3, fp
 8009a0e:	4622      	mov	r2, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ff93 	bl	800993e <__sfputs_r>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	f000 80aa 	beq.w	8009b72 <_vfiprintf_r+0x20e>
 8009a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a20:	445a      	add	r2, fp
 8009a22:	9209      	str	r2, [sp, #36]	; 0x24
 8009a24:	f89a 3000 	ldrb.w	r3, [sl]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80a2 	beq.w	8009b72 <_vfiprintf_r+0x20e>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f04f 32ff 	mov.w	r2, #4294967295
 8009a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a38:	f10a 0a01 	add.w	sl, sl, #1
 8009a3c:	9304      	str	r3, [sp, #16]
 8009a3e:	9307      	str	r3, [sp, #28]
 8009a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a44:	931a      	str	r3, [sp, #104]	; 0x68
 8009a46:	4654      	mov	r4, sl
 8009a48:	2205      	movs	r2, #5
 8009a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4e:	4858      	ldr	r0, [pc, #352]	; (8009bb0 <_vfiprintf_r+0x24c>)
 8009a50:	f7ff fb1c 	bl	800908c <memchr>
 8009a54:	9a04      	ldr	r2, [sp, #16]
 8009a56:	b9d8      	cbnz	r0, 8009a90 <_vfiprintf_r+0x12c>
 8009a58:	06d1      	lsls	r1, r2, #27
 8009a5a:	bf44      	itt	mi
 8009a5c:	2320      	movmi	r3, #32
 8009a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a62:	0713      	lsls	r3, r2, #28
 8009a64:	bf44      	itt	mi
 8009a66:	232b      	movmi	r3, #43	; 0x2b
 8009a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a70:	2b2a      	cmp	r3, #42	; 0x2a
 8009a72:	d015      	beq.n	8009aa0 <_vfiprintf_r+0x13c>
 8009a74:	4654      	mov	r4, sl
 8009a76:	2000      	movs	r0, #0
 8009a78:	f04f 0c0a 	mov.w	ip, #10
 8009a7c:	9a07      	ldr	r2, [sp, #28]
 8009a7e:	4621      	mov	r1, r4
 8009a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a84:	3b30      	subs	r3, #48	; 0x30
 8009a86:	2b09      	cmp	r3, #9
 8009a88:	d94e      	bls.n	8009b28 <_vfiprintf_r+0x1c4>
 8009a8a:	b1b0      	cbz	r0, 8009aba <_vfiprintf_r+0x156>
 8009a8c:	9207      	str	r2, [sp, #28]
 8009a8e:	e014      	b.n	8009aba <_vfiprintf_r+0x156>
 8009a90:	eba0 0308 	sub.w	r3, r0, r8
 8009a94:	fa09 f303 	lsl.w	r3, r9, r3
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	46a2      	mov	sl, r4
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	e7d2      	b.n	8009a46 <_vfiprintf_r+0xe2>
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	1d19      	adds	r1, r3, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	9103      	str	r1, [sp, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bfbb      	ittet	lt
 8009aac:	425b      	neglt	r3, r3
 8009aae:	f042 0202 	orrlt.w	r2, r2, #2
 8009ab2:	9307      	strge	r3, [sp, #28]
 8009ab4:	9307      	strlt	r3, [sp, #28]
 8009ab6:	bfb8      	it	lt
 8009ab8:	9204      	strlt	r2, [sp, #16]
 8009aba:	7823      	ldrb	r3, [r4, #0]
 8009abc:	2b2e      	cmp	r3, #46	; 0x2e
 8009abe:	d10c      	bne.n	8009ada <_vfiprintf_r+0x176>
 8009ac0:	7863      	ldrb	r3, [r4, #1]
 8009ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ac4:	d135      	bne.n	8009b32 <_vfiprintf_r+0x1ce>
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	3402      	adds	r4, #2
 8009aca:	1d1a      	adds	r2, r3, #4
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	9203      	str	r2, [sp, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	bfb8      	it	lt
 8009ad4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009bc0 <_vfiprintf_r+0x25c>
 8009ade:	2203      	movs	r2, #3
 8009ae0:	4650      	mov	r0, sl
 8009ae2:	7821      	ldrb	r1, [r4, #0]
 8009ae4:	f7ff fad2 	bl	800908c <memchr>
 8009ae8:	b140      	cbz	r0, 8009afc <_vfiprintf_r+0x198>
 8009aea:	2340      	movs	r3, #64	; 0x40
 8009aec:	eba0 000a 	sub.w	r0, r0, sl
 8009af0:	fa03 f000 	lsl.w	r0, r3, r0
 8009af4:	9b04      	ldr	r3, [sp, #16]
 8009af6:	3401      	adds	r4, #1
 8009af8:	4303      	orrs	r3, r0
 8009afa:	9304      	str	r3, [sp, #16]
 8009afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b00:	2206      	movs	r2, #6
 8009b02:	482c      	ldr	r0, [pc, #176]	; (8009bb4 <_vfiprintf_r+0x250>)
 8009b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b08:	f7ff fac0 	bl	800908c <memchr>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d03f      	beq.n	8009b90 <_vfiprintf_r+0x22c>
 8009b10:	4b29      	ldr	r3, [pc, #164]	; (8009bb8 <_vfiprintf_r+0x254>)
 8009b12:	bb1b      	cbnz	r3, 8009b5c <_vfiprintf_r+0x1f8>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	3307      	adds	r3, #7
 8009b18:	f023 0307 	bic.w	r3, r3, #7
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	9303      	str	r3, [sp, #12]
 8009b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b22:	443b      	add	r3, r7
 8009b24:	9309      	str	r3, [sp, #36]	; 0x24
 8009b26:	e767      	b.n	80099f8 <_vfiprintf_r+0x94>
 8009b28:	460c      	mov	r4, r1
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b30:	e7a5      	b.n	8009a7e <_vfiprintf_r+0x11a>
 8009b32:	2300      	movs	r3, #0
 8009b34:	f04f 0c0a 	mov.w	ip, #10
 8009b38:	4619      	mov	r1, r3
 8009b3a:	3401      	adds	r4, #1
 8009b3c:	9305      	str	r3, [sp, #20]
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b44:	3a30      	subs	r2, #48	; 0x30
 8009b46:	2a09      	cmp	r2, #9
 8009b48:	d903      	bls.n	8009b52 <_vfiprintf_r+0x1ee>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0c5      	beq.n	8009ada <_vfiprintf_r+0x176>
 8009b4e:	9105      	str	r1, [sp, #20]
 8009b50:	e7c3      	b.n	8009ada <_vfiprintf_r+0x176>
 8009b52:	4604      	mov	r4, r0
 8009b54:	2301      	movs	r3, #1
 8009b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b5a:	e7f0      	b.n	8009b3e <_vfiprintf_r+0x1da>
 8009b5c:	ab03      	add	r3, sp, #12
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	462a      	mov	r2, r5
 8009b62:	4630      	mov	r0, r6
 8009b64:	4b15      	ldr	r3, [pc, #84]	; (8009bbc <_vfiprintf_r+0x258>)
 8009b66:	a904      	add	r1, sp, #16
 8009b68:	f7fd fcd6 	bl	8007518 <_printf_float>
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	1c78      	adds	r0, r7, #1
 8009b70:	d1d6      	bne.n	8009b20 <_vfiprintf_r+0x1bc>
 8009b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b74:	07d9      	lsls	r1, r3, #31
 8009b76:	d405      	bmi.n	8009b84 <_vfiprintf_r+0x220>
 8009b78:	89ab      	ldrh	r3, [r5, #12]
 8009b7a:	059a      	lsls	r2, r3, #22
 8009b7c:	d402      	bmi.n	8009b84 <_vfiprintf_r+0x220>
 8009b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b80:	f7ff fa16 	bl	8008fb0 <__retarget_lock_release_recursive>
 8009b84:	89ab      	ldrh	r3, [r5, #12]
 8009b86:	065b      	lsls	r3, r3, #25
 8009b88:	f53f af12 	bmi.w	80099b0 <_vfiprintf_r+0x4c>
 8009b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b8e:	e711      	b.n	80099b4 <_vfiprintf_r+0x50>
 8009b90:	ab03      	add	r3, sp, #12
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	462a      	mov	r2, r5
 8009b96:	4630      	mov	r0, r6
 8009b98:	4b08      	ldr	r3, [pc, #32]	; (8009bbc <_vfiprintf_r+0x258>)
 8009b9a:	a904      	add	r1, sp, #16
 8009b9c:	f7fd ff58 	bl	8007a50 <_printf_i>
 8009ba0:	e7e4      	b.n	8009b6c <_vfiprintf_r+0x208>
 8009ba2:	bf00      	nop
 8009ba4:	0800a080 	.word	0x0800a080
 8009ba8:	0800a0a0 	.word	0x0800a0a0
 8009bac:	0800a060 	.word	0x0800a060
 8009bb0:	0800a21c 	.word	0x0800a21c
 8009bb4:	0800a226 	.word	0x0800a226
 8009bb8:	08007519 	.word	0x08007519
 8009bbc:	0800993f 	.word	0x0800993f
 8009bc0:	0800a222 	.word	0x0800a222

08009bc4 <_sbrk_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4d05      	ldr	r5, [pc, #20]	; (8009be0 <_sbrk_r+0x1c>)
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	602b      	str	r3, [r5, #0]
 8009bd0:	f7f8 f956 	bl	8001e80 <_sbrk>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_sbrk_r+0x1a>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_sbrk_r+0x1a>
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	20001cc0 	.word	0x20001cc0

08009be4 <__sread>:
 8009be4:	b510      	push	{r4, lr}
 8009be6:	460c      	mov	r4, r1
 8009be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bec:	f000 f8e2 	bl	8009db4 <_read_r>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	bfab      	itete	ge
 8009bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8009bf8:	181b      	addge	r3, r3, r0
 8009bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bfe:	bfac      	ite	ge
 8009c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c02:	81a3      	strhlt	r3, [r4, #12]
 8009c04:	bd10      	pop	{r4, pc}

08009c06 <__swrite>:
 8009c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c0a:	461f      	mov	r7, r3
 8009c0c:	898b      	ldrh	r3, [r1, #12]
 8009c0e:	4605      	mov	r5, r0
 8009c10:	05db      	lsls	r3, r3, #23
 8009c12:	460c      	mov	r4, r1
 8009c14:	4616      	mov	r6, r2
 8009c16:	d505      	bpl.n	8009c24 <__swrite+0x1e>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c20:	f000 f898 	bl	8009d54 <_lseek_r>
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	4632      	mov	r2, r6
 8009c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	4628      	mov	r0, r5
 8009c30:	463b      	mov	r3, r7
 8009c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3a:	f000 b817 	b.w	8009c6c <_write_r>

08009c3e <__sseek>:
 8009c3e:	b510      	push	{r4, lr}
 8009c40:	460c      	mov	r4, r1
 8009c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c46:	f000 f885 	bl	8009d54 <_lseek_r>
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	bf15      	itete	ne
 8009c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c5a:	81a3      	strheq	r3, [r4, #12]
 8009c5c:	bf18      	it	ne
 8009c5e:	81a3      	strhne	r3, [r4, #12]
 8009c60:	bd10      	pop	{r4, pc}

08009c62 <__sclose>:
 8009c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c66:	f000 b831 	b.w	8009ccc <_close_r>
	...

08009c6c <_write_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	4611      	mov	r1, r2
 8009c74:	2200      	movs	r2, #0
 8009c76:	4d05      	ldr	r5, [pc, #20]	; (8009c8c <_write_r+0x20>)
 8009c78:	602a      	str	r2, [r5, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f7f8 f8b4 	bl	8001de8 <_write>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d102      	bne.n	8009c8a <_write_r+0x1e>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	b103      	cbz	r3, 8009c8a <_write_r+0x1e>
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	20001cc0 	.word	0x20001cc0

08009c90 <__assert_func>:
 8009c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c92:	4614      	mov	r4, r2
 8009c94:	461a      	mov	r2, r3
 8009c96:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <__assert_func+0x2c>)
 8009c98:	4605      	mov	r5, r0
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68d8      	ldr	r0, [r3, #12]
 8009c9e:	b14c      	cbz	r4, 8009cb4 <__assert_func+0x24>
 8009ca0:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <__assert_func+0x30>)
 8009ca2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ca6:	9100      	str	r1, [sp, #0]
 8009ca8:	462b      	mov	r3, r5
 8009caa:	4906      	ldr	r1, [pc, #24]	; (8009cc4 <__assert_func+0x34>)
 8009cac:	f000 f81e 	bl	8009cec <fiprintf>
 8009cb0:	f000 f89f 	bl	8009df2 <abort>
 8009cb4:	4b04      	ldr	r3, [pc, #16]	; (8009cc8 <__assert_func+0x38>)
 8009cb6:	461c      	mov	r4, r3
 8009cb8:	e7f3      	b.n	8009ca2 <__assert_func+0x12>
 8009cba:	bf00      	nop
 8009cbc:	20000010 	.word	0x20000010
 8009cc0:	0800a22d 	.word	0x0800a22d
 8009cc4:	0800a23a 	.word	0x0800a23a
 8009cc8:	0800a268 	.word	0x0800a268

08009ccc <_close_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4d05      	ldr	r5, [pc, #20]	; (8009ce8 <_close_r+0x1c>)
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	602b      	str	r3, [r5, #0]
 8009cd8:	f7f8 f8a2 	bl	8001e20 <_close>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_close_r+0x1a>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_close_r+0x1a>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20001cc0 	.word	0x20001cc0

08009cec <fiprintf>:
 8009cec:	b40e      	push	{r1, r2, r3}
 8009cee:	b503      	push	{r0, r1, lr}
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	ab03      	add	r3, sp, #12
 8009cf4:	4805      	ldr	r0, [pc, #20]	; (8009d0c <fiprintf+0x20>)
 8009cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cfa:	6800      	ldr	r0, [r0, #0]
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	f7ff fe31 	bl	8009964 <_vfiprintf_r>
 8009d02:	b002      	add	sp, #8
 8009d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d08:	b003      	add	sp, #12
 8009d0a:	4770      	bx	lr
 8009d0c:	20000010 	.word	0x20000010

08009d10 <_fstat_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	2300      	movs	r3, #0
 8009d14:	4d06      	ldr	r5, [pc, #24]	; (8009d30 <_fstat_r+0x20>)
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	602b      	str	r3, [r5, #0]
 8009d1e:	f7f8 f88a 	bl	8001e36 <_fstat>
 8009d22:	1c43      	adds	r3, r0, #1
 8009d24:	d102      	bne.n	8009d2c <_fstat_r+0x1c>
 8009d26:	682b      	ldr	r3, [r5, #0]
 8009d28:	b103      	cbz	r3, 8009d2c <_fstat_r+0x1c>
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	bd38      	pop	{r3, r4, r5, pc}
 8009d2e:	bf00      	nop
 8009d30:	20001cc0 	.word	0x20001cc0

08009d34 <_isatty_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	2300      	movs	r3, #0
 8009d38:	4d05      	ldr	r5, [pc, #20]	; (8009d50 <_isatty_r+0x1c>)
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	602b      	str	r3, [r5, #0]
 8009d40:	f7f8 f888 	bl	8001e54 <_isatty>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_isatty_r+0x1a>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_isatty_r+0x1a>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	20001cc0 	.word	0x20001cc0

08009d54 <_lseek_r>:
 8009d54:	b538      	push	{r3, r4, r5, lr}
 8009d56:	4604      	mov	r4, r0
 8009d58:	4608      	mov	r0, r1
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	4d05      	ldr	r5, [pc, #20]	; (8009d74 <_lseek_r+0x20>)
 8009d60:	602a      	str	r2, [r5, #0]
 8009d62:	461a      	mov	r2, r3
 8009d64:	f7f8 f880 	bl	8001e68 <_lseek>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_lseek_r+0x1e>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_lseek_r+0x1e>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	20001cc0 	.word	0x20001cc0

08009d78 <__ascii_mbtowc>:
 8009d78:	b082      	sub	sp, #8
 8009d7a:	b901      	cbnz	r1, 8009d7e <__ascii_mbtowc+0x6>
 8009d7c:	a901      	add	r1, sp, #4
 8009d7e:	b142      	cbz	r2, 8009d92 <__ascii_mbtowc+0x1a>
 8009d80:	b14b      	cbz	r3, 8009d96 <__ascii_mbtowc+0x1e>
 8009d82:	7813      	ldrb	r3, [r2, #0]
 8009d84:	600b      	str	r3, [r1, #0]
 8009d86:	7812      	ldrb	r2, [r2, #0]
 8009d88:	1e10      	subs	r0, r2, #0
 8009d8a:	bf18      	it	ne
 8009d8c:	2001      	movne	r0, #1
 8009d8e:	b002      	add	sp, #8
 8009d90:	4770      	bx	lr
 8009d92:	4610      	mov	r0, r2
 8009d94:	e7fb      	b.n	8009d8e <__ascii_mbtowc+0x16>
 8009d96:	f06f 0001 	mvn.w	r0, #1
 8009d9a:	e7f8      	b.n	8009d8e <__ascii_mbtowc+0x16>

08009d9c <__malloc_lock>:
 8009d9c:	4801      	ldr	r0, [pc, #4]	; (8009da4 <__malloc_lock+0x8>)
 8009d9e:	f7ff b906 	b.w	8008fae <__retarget_lock_acquire_recursive>
 8009da2:	bf00      	nop
 8009da4:	20001cb8 	.word	0x20001cb8

08009da8 <__malloc_unlock>:
 8009da8:	4801      	ldr	r0, [pc, #4]	; (8009db0 <__malloc_unlock+0x8>)
 8009daa:	f7ff b901 	b.w	8008fb0 <__retarget_lock_release_recursive>
 8009dae:	bf00      	nop
 8009db0:	20001cb8 	.word	0x20001cb8

08009db4 <_read_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	4611      	mov	r1, r2
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4d05      	ldr	r5, [pc, #20]	; (8009dd4 <_read_r+0x20>)
 8009dc0:	602a      	str	r2, [r5, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f7f7 fff3 	bl	8001dae <_read>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d102      	bne.n	8009dd2 <_read_r+0x1e>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	b103      	cbz	r3, 8009dd2 <_read_r+0x1e>
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	20001cc0 	.word	0x20001cc0

08009dd8 <__ascii_wctomb>:
 8009dd8:	4603      	mov	r3, r0
 8009dda:	4608      	mov	r0, r1
 8009ddc:	b141      	cbz	r1, 8009df0 <__ascii_wctomb+0x18>
 8009dde:	2aff      	cmp	r2, #255	; 0xff
 8009de0:	d904      	bls.n	8009dec <__ascii_wctomb+0x14>
 8009de2:	228a      	movs	r2, #138	; 0x8a
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	4770      	bx	lr
 8009dec:	2001      	movs	r0, #1
 8009dee:	700a      	strb	r2, [r1, #0]
 8009df0:	4770      	bx	lr

08009df2 <abort>:
 8009df2:	2006      	movs	r0, #6
 8009df4:	b508      	push	{r3, lr}
 8009df6:	f000 f82b 	bl	8009e50 <raise>
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	f7f7 ffcd 	bl	8001d9a <_exit>

08009e00 <_raise_r>:
 8009e00:	291f      	cmp	r1, #31
 8009e02:	b538      	push	{r3, r4, r5, lr}
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	d904      	bls.n	8009e14 <_raise_r+0x14>
 8009e0a:	2316      	movs	r3, #22
 8009e0c:	6003      	str	r3, [r0, #0]
 8009e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e16:	b112      	cbz	r2, 8009e1e <_raise_r+0x1e>
 8009e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e1c:	b94b      	cbnz	r3, 8009e32 <_raise_r+0x32>
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f000 f830 	bl	8009e84 <_getpid_r>
 8009e24:	462a      	mov	r2, r5
 8009e26:	4601      	mov	r1, r0
 8009e28:	4620      	mov	r0, r4
 8009e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e2e:	f000 b817 	b.w	8009e60 <_kill_r>
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d00a      	beq.n	8009e4c <_raise_r+0x4c>
 8009e36:	1c59      	adds	r1, r3, #1
 8009e38:	d103      	bne.n	8009e42 <_raise_r+0x42>
 8009e3a:	2316      	movs	r3, #22
 8009e3c:	6003      	str	r3, [r0, #0]
 8009e3e:	2001      	movs	r0, #1
 8009e40:	e7e7      	b.n	8009e12 <_raise_r+0x12>
 8009e42:	2400      	movs	r4, #0
 8009e44:	4628      	mov	r0, r5
 8009e46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e4a:	4798      	blx	r3
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	e7e0      	b.n	8009e12 <_raise_r+0x12>

08009e50 <raise>:
 8009e50:	4b02      	ldr	r3, [pc, #8]	; (8009e5c <raise+0xc>)
 8009e52:	4601      	mov	r1, r0
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	f7ff bfd3 	b.w	8009e00 <_raise_r>
 8009e5a:	bf00      	nop
 8009e5c:	20000010 	.word	0x20000010

08009e60 <_kill_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	2300      	movs	r3, #0
 8009e64:	4d06      	ldr	r5, [pc, #24]	; (8009e80 <_kill_r+0x20>)
 8009e66:	4604      	mov	r4, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	602b      	str	r3, [r5, #0]
 8009e6e:	f7f7 ff84 	bl	8001d7a <_kill>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	d102      	bne.n	8009e7c <_kill_r+0x1c>
 8009e76:	682b      	ldr	r3, [r5, #0]
 8009e78:	b103      	cbz	r3, 8009e7c <_kill_r+0x1c>
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	bd38      	pop	{r3, r4, r5, pc}
 8009e7e:	bf00      	nop
 8009e80:	20001cc0 	.word	0x20001cc0

08009e84 <_getpid_r>:
 8009e84:	f7f7 bf72 	b.w	8001d6c <_getpid>

08009e88 <_init>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	bf00      	nop
 8009e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8e:	bc08      	pop	{r3}
 8009e90:	469e      	mov	lr, r3
 8009e92:	4770      	bx	lr

08009e94 <_fini>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	bf00      	nop
 8009e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9a:	bc08      	pop	{r3}
 8009e9c:	469e      	mov	lr, r3
 8009e9e:	4770      	bx	lr
